{
  "name": "mbpp_615_average_tuple",
  "language": "go_test.go",
  "prompt": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "func TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwauurxe1_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmpwauurxe1_test.go:35 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5pqj6_6v_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5pqj6_6v_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5pqj6_6v_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            result = append(result, average_int(num.([]int)))\n        case []float64:\n            result = append(result, average_float64(num.([]float64)))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf4ppa9hw_test.go:14:37: undefined: average_int\n/tmp/tmpf4ppa9hw_test.go:16:37: undefined: average_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum/float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmphrfqw2sz_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmphrfqw2sz_test.go:28 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n            case []int:\n                var sum int\n                for _, v := range v.([]int) {\n                    sum += v\n                }\n                result = append(result, float64(sum) / float64(len(v.([]int))))\n            case []float64:\n                var sum float64\n                for _, v := range v.([]float64) {\n                    sum += v\n                }\n                result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp1wdtqo33_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp1wdtqo33_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp1wdtqo33_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, val := range num.([]int) {\n                    sum += val\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, val := range num.([]float64) {\n                    sum += val\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp_rpq5saf_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp_rpq5saf_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp_rpq5saf_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var res []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            res = append(res, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            res = append(res, sum / float64(len(num.([]float64))))\n        }\n    }\n    return res\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpejfpo3mw_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpejfpo3mw_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpejfpo3mw_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n        }\n        result = append(result, sum/float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpa05jliz2_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpa05jliz2_test.go:35 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvatbix9z_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmpvatbix9z_test.go:35 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n            case []int:\n                var sum int\n                for _, vv := range v.([]int) {\n                    sum += vv\n                }\n                result = append(result, float64(sum) / float64(len(v.([]int))))\n            case []float64:\n                var sum float64\n                for _, vv := range v.([]float64) {\n                    sum += vv\n                }\n                result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvpln7flr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvpln7flr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvpln7flr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvatbix9z_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmpvatbix9z_test.go:35 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        case []string:\n            for _, vv := range v.([]string) {\n                sum += float64(len(vv))\n            }\n            result = append(result, sum / float64(len(v.([]string))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpihkqai9u_test.go:49: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpihkqai9u_test.go:49: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpihkqai9u_test.go:49: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n            case []int:\n                var sum int\n                for _, v2 := range v.([]int) {\n                    sum += v2\n                }\n                result = append(result, float64(sum) / float64(len(v.([]int))))\n            case []float64:\n                var sum float64\n                for _, v2 := range v.([]float64) {\n                    sum += v2\n                }\n                result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpa4sxu6sa_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpa4sxu6sa_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpa4sxu6sa_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v1 := range v.([]int) {\n                sum += float64(v1)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v1 := range v.([]float64) {\n                sum += v1\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5adoowf1_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5adoowf1_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5adoowf1_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpll168m3g_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpll168m3g_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpll168m3g_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v1 := range v.([]int) {\n                sum += float64(v1)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v1 := range v.([]float64) {\n                sum += v1\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpb0h2idp5_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpb0h2idp5_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpb0h2idp5_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp86azhz1b_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp86azhz1b_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp86azhz1b_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp86azhz1b_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v := range v.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvatbix9z_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmpvatbix9z_test.go:35 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, i := range num.([]int) {\n                sum += i\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, i := range num.([]float64) {\n                sum += i\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpmthshfw4_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpmthshfw4_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpmthshfw4_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwauurxe1_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmpwauurxe1_test.go:35 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum)/float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmphuz09bfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmphuz09bfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmphuz09bfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                sum := 0\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                sum := 0.0\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpy_1s_72__test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpy_1s_72__test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpy_1s_72__test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v1 := range v.([]int) {\n                sum += float64(v1)\n            }\n        case []float64:\n            for _, v1 := range v.([]float64) {\n                sum += v1\n            }\n        }\n        result = append(result, sum/float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpek6jnjv6_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmpek6jnjv6_test.go:35 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n                count++\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n                count++\n            }\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpytv_szpg_test.go:46: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpytv_szpg_test.go:46: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpytv_szpg_test.go:46: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum)/float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmphuz09bfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmphuz09bfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmphuz09bfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp_43cii9h_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp_43cii9h_test.go:35 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            result = append(result, average_int(v.([]int)))\n        case []float64:\n            result = append(result, average_float64(v.([]float64)))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq4t_hy5s_test.go:14:37: undefined: average_int\n/tmp/tmpq4t_hy5s_test.go:16:37: undefined: average_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, vv := range v.([]int) {\n            sum += float64(vv)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpxlbkfq_t_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpxlbkfq_t_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v := range v.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v := range v.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, value := range num.([]int) {\n                sum += value\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, value := range num.([]float64) {\n                sum += value\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpngzj3jtf_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpngzj3jtf_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpngzj3jtf_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpfohwxgc9_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpfohwxgc9_test.go:35 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n            count++\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp1t1ssnl7_test.go:14 +0x16b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp1t1ssnl7_test.go:30 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var avgs []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            avgs = append(avgs, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            avgs = append(avgs, sum / float64(len(num.([]float64))))\n        }\n    }\n    return avgs\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123928,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpy6y7glce_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpy6y7glce_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpy6y7glce_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n                count++\n            }\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n                count++\n            }\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpjt9nyv7w_test.go:46: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpjt9nyv7w_test.go:46: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpjt9nyv7w_test.go:46: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            result = append(result, average_int(num.([]int)))\n        case []float64:\n            result = append(result, average_float64(num.([]float64)))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf4ppa9hw_test.go:14:37: undefined: average_int\n/tmp/tmpf4ppa9hw_test.go:16:37: undefined: average_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var total int\n            for _, v := range num.([]int) {\n                total += v\n            }\n            result = append(result, float64(total) / float64(len(num.([]int))))\n        case []float64:\n            var total float64\n            for _, v := range num.([]float64) {\n                total += v\n            }\n            result = append(result, total / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpobia7htl_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpobia7htl_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpobia7htl_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count int\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum / float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpjsqr4bj__test.go:15 +0x18e\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpjsqr4bj__test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmptz3lpi66_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmptz3lpi66_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmptz3lpi66_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v1 := range v.([]int) {\n                sum += float64(v1)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v1 := range v.([]float64) {\n                sum += v1\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5adoowf1_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5adoowf1_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5adoowf1_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpccmqy9so_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count int\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n                count++\n            }\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n                count++\n            }\n        }\n        result = append(result, sum / float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpq4tfpn98_test.go:46: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpq4tfpn98_test.go:46: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpq4tfpn98_test.go:46: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                result = append(result, average_int(num.([]int)))\n            case []float64:\n                result = append(result, average_float(num.([]float64)))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123928,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfc3ixupb_test.go:14:41: undefined: average_int\n/tmp/tmpfc3ixupb_test.go:16:41: undefined: average_float\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n                count++\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n                count++\n            }\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpytv_szpg_test.go:46: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpytv_szpg_test.go:46: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpytv_szpg_test.go:46: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var res []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v1 := range v.([]int) {\n                sum += float64(v1)\n            }\n            res = append(res, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v1 := range v.([]float64) {\n                sum += v1\n            }\n            res = append(res, sum/float64(len(v.([]float64))))\n        }\n    }\n    return res\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpo6h26yj4_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpo6h26yj4_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpo6h26yj4_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpll168m3g_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpll168m3g_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpll168m3g_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp86azhz1b_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp86azhz1b_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var avg []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            avg = append(avg, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            avg = append(avg, sum / float64(len(v.([]float64))))\n        }\n    }\n    return avg\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp_sjjfqfp_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp_sjjfqfp_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp_sjjfqfp_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum)/float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp9rxavbm0_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp9rxavbm0_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp9rxavbm0_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var averages []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            averages = append(averages, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            averages = append(averages, sum / float64(len(num.([]float64))))\n        }\n    }\n    return averages\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmph2qqzxsu_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmph2qqzxsu_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmph2qqzxsu_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvatbix9z_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmpvatbix9z_test.go:35 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v := range v.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v := range v.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum)/float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp8gi0jtlt_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp8gi0jtlt_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp8gi0jtlt_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            sum := 0\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            sum := 0.0\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpsdhj3mgd_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpsdhj3mgd_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpsdhj3mgd_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, vv := range v.([]int) {\n            sum += float64(vv)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpxlbkfq_t_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpxlbkfq_t_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v := range v.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmptksz7_lv_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmptksz7_lv_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmptksz7_lv_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            result = append(result, average_int(num.([]int)))\n        case []float64:\n            result = append(result, average_float64(num.([]float64)))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf4ppa9hw_test.go:14:37: undefined: average_int\n/tmp/tmpf4ppa9hw_test.go:16:37: undefined: average_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, val := range num.([]int) {\n                    sum += val\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, val := range num.([]float64) {\n                    sum += val\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n            default:\n                fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "Type not supported\nType not supported\nType not supported\nType not supported\nType not supported\nType not supported\nType not supported\nType not supported\nType not supported\nType not supported\nType not supported\nType not supported\n--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpsa4ywx9w_test.go:47: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpsa4ywx9w_test.go:47: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpsa4ywx9w_test.go:47: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum float64\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxyc4z7y5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxyc4z7y5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxyc4z7y5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, v := range num.([]int) {\n                    sum += v\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, v := range num.([]float64) {\n                    sum += v\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpsztl7pf5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpsztl7pf5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpsztl7pf5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpll168m3g_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpll168m3g_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpll168m3g_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v := range v.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, value := range nums {\n        switch value.(type) {\n        case []int:\n            var sum int\n            for _, v := range value.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(value.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range value.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(value.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmphzwitdyr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmphzwitdyr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmphzwitdyr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        sum := 0.0\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpt2jb1une_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpt2jb1une_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpt2jb1une_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            sum := 0\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum)/float64(len(num.([]int))))\n        case []float64:\n            sum := 0.0\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmplkujh7b9_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmplkujh7b9_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmplkujh7b9_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum float64\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxyc4z7y5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxyc4z7y5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxyc4z7y5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v1 := range v.([]int) {\n                sum += float64(v1)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v1 := range v.([]float64) {\n                sum += v1\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpb0h2idp5_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpb0h2idp5_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpb0h2idp5_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64 = 0\n        var count int = 0\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum / float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp50nleqst_test.go:15 +0x18e\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp50nleqst_test.go:30 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpbbmskmqk_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, i := range nums {\n        switch i.(type) {\n        case []int:\n            var sum int\n            for _, j := range i.([]int) {\n                sum += j\n            }\n            result = append(result, float64(sum) / float64(len(i.([]int))))\n        case []float64:\n            var sum float64\n            for _, j := range i.([]float64) {\n                sum += j\n            }\n            result = append(result, sum / float64(len(i.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpkkwfyulf_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpkkwfyulf_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpkkwfyulf_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v := range v.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, i := range num.([]int) {\n                    sum += i\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, i := range num.([]float64) {\n                    sum += i\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp3c6dlb8f_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp3c6dlb8f_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp3c6dlb8f_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp86azhz1b_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp86azhz1b_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp0hh5noga_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n            case []int:\n                var sum int\n                for _, v2 := range v.([]int) {\n                    sum += v2\n                }\n                result = append(result, float64(sum) / float64(len(v.([]int))))\n            case []float64:\n                var sum float64\n                for _, v2 := range v.([]float64) {\n                    sum += v2\n                }\n                result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpa4sxu6sa_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpa4sxu6sa_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpa4sxu6sa_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum)/float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvatbix9z_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmpvatbix9z_test.go:35 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5idgknfx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp86azhz1b_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp86azhz1b_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        sum := 0.0\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpt2jb1une_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpt2jb1une_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpt2jb1une_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v1 := range v.([]int) {\n                sum += float64(v1)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v1 := range v.([]float64) {\n                sum += v1\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpb0h2idp5_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpb0h2idp5_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpb0h2idp5_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v := range v.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpt8jga0oq_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmphnwp2shr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwauurxe1_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmpwauurxe1_test.go:35 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n            case []int:\n                var sum int\n                for _, v2 := range v.([]int) {\n                    sum += v2\n                }\n                result = append(result, float64(sum) / float64(len(v.([]int))))\n            case []float64:\n                var sum float64\n                for _, v2 := range v.([]float64) {\n                    sum += v2\n                }\n                result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpa4sxu6sa_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpa4sxu6sa_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpa4sxu6sa_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        switch v.(type) {\n            case []int:\n                for _, v2 := range v.([]int) {\n                    sum += float64(v2)\n                    count++\n                }\n            case []float64:\n                for _, v2 := range v.([]float64) {\n                    sum += v2\n                    count++\n                }\n        }\n        result = append(result, sum/count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123930,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpu1b34g8y_test.go:46: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpu1b34g8y_test.go:46: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpu1b34g8y_test.go:46: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum float64\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123930,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpb4q7xzx0_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpb4q7xzx0_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpb4q7xzx0_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp86azhz1b_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp86azhz1b_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpj5ndc7ue_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp86azhz1b_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp86azhz1b_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum)/float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum)/float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        default:\n            result = append(result, num.(float64))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123930,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp34b__5cs_test.go:16 +0x273\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmp34b__5cs_test.go:33 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum)/float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmptumkq4mn_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, vv := range v.([]int) {\n                sum += float64(vv)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6gws_3w6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvar5unw5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var avg []float64\n    for _, v := range nums {\n        sum := 0.0\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            avg = append(avg, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            avg = append(avg, sum/float64(len(v.([]float64))))\n        }\n    }\n    return avg\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123930,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7tt0maul_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7tt0maul_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7tt0maul_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, v := range num.([]int) {\n                    sum += v\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, v := range num.([]float64) {\n                    sum += v\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123929,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpsztl7pf5_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpsztl7pf5_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpsztl7pf5_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            result = append(result, average_int(v.([]int)))\n        case []float64:\n            result = append(result, average_float(v.([]float64)))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123930,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8yjgy7br_test.go:14:37: undefined: average_int\n/tmp/tmp8yjgy7br_test.go:16:37: undefined: average_float\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvatbix9z_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmpvatbix9z_test.go:35 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum/float64(len(num.([]int))))\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123930,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmps3zqhipq_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmps3zqhipq_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmps3zqhipq_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp7q0i57qp_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v := v.(type) {\n        case []int:\n            for _, v := range v {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v)))\n        case []float64:\n            for _, v := range v {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v)))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123930,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpk31kxnk6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpk31kxnk6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpk31kxnk6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp86azhz1b_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp86azhz1b_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvatbix9z_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmpvatbix9z_test.go:35 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123926,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvatbix9z_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmpvatbix9z_test.go:35 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n            case []int:\n                var sum int\n                for _, n := range num.([]int) {\n                    sum += n\n                }\n                result = append(result, float64(sum) / float64(len(num.([]int))))\n            case []float64:\n                var sum float64\n                for _, n := range num.([]float64) {\n                    sum += n\n                }\n                result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510638,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6qaz1231_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        sum := 0.0\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123930,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpu1kiv3fk_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpu1kiv3fk_test.go:35 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a list of lists and returns the average value for each list as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v1 := range v.([]int) {\n                sum += v1\n            }\n            result = append(result, float64(sum)/float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v1 := range v.([]float64) {\n                sum += v1\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123930,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp8etv93pe_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp8etv93pe_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp8etv93pe_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}