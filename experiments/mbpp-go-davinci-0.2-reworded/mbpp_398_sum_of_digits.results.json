{
  "name": "mbpp_398_sum_of_digits",
  "language": "go_test.go",
  "prompt": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa40qtngq_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    }\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm8ekiee__test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            for n > 0 {\n                sum += n % 10\n                n /= 10\n            }\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            for _, c := range n {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph2ke3_iv_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjd2ma98o_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    default:\n        fmt.Println(\"Invalid type\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3nfqvde8_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    }\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc1htthu6_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0byxav9g_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxiv_hh48_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    }\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc1htthu6_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    }\n    if sum < 10 {\n        return sum\n    }\n    return sum_of_digits(sum)\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbh718g9_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp47nopiit_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    default:\n        panic(fmt.Sprintf(\"unexpected type: %T\", nums))\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphjg6gb8b_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    sum := 0\n    switch nums.(type) {\n    case int:\n        for nums > 0 {\n            sum += int(nums.(int) % 10)\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp796e3ymq_test.go:13:18: invalid operation: nums > 0 (operator > not defined on interface)\n/tmp/tmp796e3ymq_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp02qsbf56_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa9wqyd___test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjd2ma98o_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = 0\n        for nums > 0 {\n            sum += int(nums) % 10\n            nums /= 10\n        }\n    case []int:\n        sum = 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbdlpz78f_test.go:14:18: invalid operation: nums > 0 (operator > not defined on interface)\n/tmp/tmpbdlpz78f_test.go:15:23: cannot convert nums (type interface {}) to type int: need type assertion\n/tmp/tmpbdlpz78f_test.go:16:18: invalid operation: nums /= 10 (mismatched types interface {} and int)\n/tmp/tmpbdlpz78f_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num != 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpencgpabj_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n        case []int:\n            for _, num := range nums.([]int) {\n                sum += sum_of_digits(num)\n            }\n        case int:\n            for num := nums.(int); num > 0; num /= 10 {\n                sum += num % 10\n            }\n        default:\n            panic(fmt.Sprintf(\"unexpected type %T\", nums))\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2s6shmgz_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(\"Invalid type\")\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnyfccj74_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw0fvyp4w_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unexpected type: %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpph6yfqge_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n        case int:\n            sum = nums.(int)\n        case []int:\n            for _, num := range nums.([]int) {\n                sum += sum_of_digits(num)\n            }\n        case []interface{}:\n            for _, num := range nums.([]interface{}) {\n                sum += sum_of_digits(num)\n            }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiay17lu2_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbzh5_ion_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            for v > 0 {\n                sum += v % 10\n                v /= 10\n            }\n        }\n    case []string:\n        for _, v := range nums.([]string) {\n            for _, vv := range v {\n                sum += int(vv - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoonq7rme_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptlu5zo3w_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp02qsbf56_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int = 0\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7u3zza4s_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    sum := 0\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6x10c3ya_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunytvenb_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = sum_of_digits([]int{nums.(int)})\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps65pr5l0_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case int:\n        return sum_of_digits_int(nums.(int))\n    case []int:\n        return sum_of_digits_int_slice(nums.([]int))\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaglsrcfh_test.go:12:16: undefined: sum_of_digits_int\n/tmp/tmpaglsrcfh_test.go:14:16: undefined: sum_of_digits_int_slice\n/tmp/tmpaglsrcfh_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunytvenb_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp47nopiit_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_riq8r28_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unsupported type: %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcizvyyfd_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    }\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp331apu4_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n        case []int:\n            for _, num := range nums.([]int) {\n                sum += sum_of_digits(num)\n            }\n        case int:\n            for num := nums.(int); num > 0; num /= 10 {\n                sum += num % 10\n            }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkczutp__test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_riq8r28_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    sum := 0\n    switch nums.(type) {\n    case int:\n        num := nums.(int)\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0w16b5b6_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_riq8r28_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2zy_i03_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n    case []string:\n        for _, v := range nums.([]string) {\n            sum += sum_of_digits(v)\n        }\n    case string:\n        for _, v := range nums.(string) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpilt4772g_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunytvenb_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_riq8r28_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsu69kjqc_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unsupported type: %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp17k7iy0k_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6fb0s14m_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxiv_hh48_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(\"nums must be int or []int\")\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvyan8c8j_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit) - '0'\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwqn04z87_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            for v > 0 {\n                sum += v % 10\n                v /= 10\n            }\n        }\n    case []string:\n        for _, v := range nums.([]string) {\n            for _, c := range v {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl2swv4cm_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqlq_4ljl_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        var sum int\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        panic(\"Unsupported type\")\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphgqx9bo6_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []float64:\n        sum := 0.0\n        for _, num := range nums.([]float64) {\n            sum += num\n        }\n        return int(sum)\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvnq6m4a_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0byxav9g_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunytvenb_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunytvenb_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    if sum < 10 {\n        return sum\n    }\n    return sum_of_digits(sum)\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9qwdsk_p_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        for nums > 0 {\n            sum += int(nums.(int) % 10)\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5fkw_2d9_test.go:13:18: invalid operation: nums > 0 (operator > not defined on interface)\n/tmp/tmp5fkw_2d9_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = 0\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        sum = 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case []interface{}:\n        sum = 0\n        for _, num := range nums.([]interface{}) {\n            sum += sum_of_digits(num)\n        }\n    default:\n        sum = 0\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnnuqnyo8_test.go:42:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpebmzgksz_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2zy_i03_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2zy_i03_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case int:\n        return sum_of_digits_int(nums.(int))\n    case []int:\n        return sum_of_digits_int_slice(nums.([]int))\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaglsrcfh_test.go:12:16: undefined: sum_of_digits_int\n/tmp/tmpaglsrcfh_test.go:14:16: undefined: sum_of_digits_int_slice\n/tmp/tmpaglsrcfh_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_ymnuben_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            for v > 0 {\n                sum += v % 10\n                v /= 10\n            }\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, v := range nums.([]string) {\n            for _, c := range v {\n                sum += int(c - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbjgucjv6_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    sum := 0\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6x10c3ya_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case int:\n        return sum_of_digits_int(nums.(int))\n    case []int:\n        return sum_of_digits_slice(nums.([]int))\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3phfqdm3_test.go:12:16: undefined: sum_of_digits_int\n/tmp/tmp3phfqdm3_test.go:14:16: undefined: sum_of_digits_slice\n/tmp/tmp3phfqdm3_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp47nopiit_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    default:\n        fmt.Println(\"Invalid type\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3nfqvde8_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int = 0\n    switch nums.(type) {\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxqd49tap_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unexpected type %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb2678yhc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbzh5_ion_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int = 0\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplf4_t9h8_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunytvenb_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            for _, ch := range num {\n                sum += int(ch - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0v4ocntz_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = 0\n        for nums != 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        sum = 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case []interface{}:\n        sum = 0\n        for _, num := range nums.([]interface{}) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_bx2xu_1_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphwy322th_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxiv_hh48_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    sum := 0\n    switch nums.(type) {\n    case int:\n        for nums > 0 {\n            sum += nums % 10\n            nums /= 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case []interface{}:\n        for _, num := range nums.([]interface{}) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsfmfr22_test.go:13:18: invalid operation: nums > 0 (operator > not defined on interface)\n/tmp/tmplsfmfr22_test.go:14:25: invalid operation: nums % 10 (mismatched types interface {} and int)\n/tmp/tmplsfmfr22_test.go:15:18: invalid operation: nums /= 10 (mismatched types interface {} and int)\n/tmp/tmplsfmfr22_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunytvenb_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsu69kjqc_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_riq8r28_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            for num > 0 {\n                sum += int(num) % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, n := range num {\n                sum += int(n - '0')\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2l784wx0_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            for num > 0 {\n                sum += int(num) % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, char := range num {\n                sum += int(char - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbbfi6av6_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp02qsbf56_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqlq_4ljl_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ywygkfk_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxiv_hh48_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunytvenb_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    }\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9gm7gn8_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfjd3zoqx_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp02qsbf56_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        var sum int\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphlb1e2oc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxiv_hh48_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2g8ww3zv_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    sum := 0\n    switch nums.(type) {\n    case int:\n        for nums != 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr0fl4jne_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps3p4m7f9_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c) - '0'\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgglm4tew_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptlu5zo3w_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2zy_i03_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            sum += int(num)\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8uhbxxl2_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n        case []int:\n            for _, n := range nums.([]int) {\n                sum += sum_of_digits(n)\n            }\n        case int:\n            for n := nums.(int); n > 0; n /= 10 {\n                sum += n % 10\n            }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1zoeqg4j_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            for n > 0 {\n                sum += n % 10\n                n /= 10\n            }\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            for _, c := range n {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph2ke3_iv_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n        return sum\n    case []float64:\n        sum := 0.0\n        for _, n := range nums.([]float64) {\n            sum += n\n        }\n        return int(sum)\n    case []string:\n        sum := 0\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp0jag6dz_test.go:42:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    }\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9gm7gn8_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        return sum\n    case []float64:\n        sum := 0.0\n        for _, num := range nums.([]float64) {\n            for num > 0 {\n                sum += num - float64(int(num))\n                num = float64(int(num))\n            }\n        }\n        return int(sum)\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2p2cgfka_test.go:42:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        var sum int\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiyu3h577_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxiv_hh48_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n        case []int:\n            for _, v := range nums.([]int) {\n                sum += sum_of_digits(v)\n            }\n        case int:\n            for n := nums.(int); n > 0; n /= 10 {\n                sum += n % 10\n            }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnzmupdqe_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp02qsbf56_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_riq8r28_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}