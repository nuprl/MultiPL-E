{
  "name": "mbpp_295_sum_div",
  "language": "go_test.go",
  "prompt": "package sum_div_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return the sum of all divisors of a number.\nfunc sum_div(number int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSum_Div(t *testing.T) {\n  candidate := sum_div\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: 7 },\n     { actual: candidate(12), expected: 16 },\n     { actual: candidate(7), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i < number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n"
  ]
}