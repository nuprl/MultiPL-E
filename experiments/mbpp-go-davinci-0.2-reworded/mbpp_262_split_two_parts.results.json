{
  "name": "mbpp_262_split_two_parts",
  "language": "go_test.go",
  "prompt": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmp5208q7v7_test.go:29: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '%!s(<nil>)'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmp5208q7v7_test.go:29: expected '[[a b] [c d]]', got '%!s(<nil>)'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmp5208q7v7_test.go:29: expected '[[p y t h] [o n]]', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    if L <= 0 {\n        return nil\n    }\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        if s.Len() < L {\n            return nil\n        }\n        list2 := reflect.MakeSlice(reflect.TypeOf(list1), s.Len()-L, s.Len()-L)\n        for i := 0; i < s.Len()-L; i++ {\n            list2.Index(i).Set(s.Index(i+L))\n        }\n        s = s.Slice(0, L)\n        return []interface{}{s.Interface(), list2.Interface()}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvsnp2z99_test.go:13:12: undefined: reflect\n/tmp/tmpvsnp2z99_test.go:14:10: undefined: reflect\n/tmp/tmpvsnp2z99_test.go:15:14: undefined: reflect\n/tmp/tmpvsnp2z99_test.go:19:18: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list := list1.([]int)\n    list2 := make([]int, L)\n    copy(list2, list)\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x522580, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x522580, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpx0x8r5g0_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpx0x8r5g0_test.go:24 +0x1ad\ntesting.tRunner(0xc000001380, 0x54df08)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    var list3 []interface{}\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if i < L {\n                list2 = append(list2, s.Index(i).Interface())\n            } else {\n                list3 = append(list3, s.Index(i).Interface())\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_iig3bgr_test.go:12:12: undefined: reflect\n/tmp/tmp_iig3bgr_test.go:13:10: undefined: reflect\n/tmp/tmp_iig3bgr_test.go:14:14: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []string:\n        list := list1.([]string)\n        return [][]string{list[:L], list[L:]}\n    case []int:\n        list := list1.([]int)\n        return [][]int{list[:L], list[L:]}\n    case []float64:\n        list := list1.([]float64)\n        return [][]float64{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: runtime error: index out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51a3c0, 0xc00008c658, 0x3, 0x0, 0x4cd165)\n\t/tmp/tmpkhhed_4h_test.go:18 +0x3ed\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpkhhed_4h_test.go:39 +0xea\ntesting.tRunner(0xc000001380, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: runtime error: index out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51a3c0, 0xc00008c658, 0x3, 0x0, 0x4cd165)\n\t/tmp/tmpkhhed_4h_test.go:18 +0x3ed\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpkhhed_4h_test.go:39 +0xea\ntesting.tRunner(0xc000001380, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphkchckqb_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmphkchckqb_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    case []float64:\n        list2 = list1.([]float64)[:L]\n        list3 = list1.([]float64)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123782,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_nzgxf4f_test.go:14:15: cannot use list1.([]int)[:L] (type []int) as type []interface {} in assignment\n/tmp/tmp_nzgxf4f_test.go:15:15: cannot use list1.([]int)[L:] (type []int) as type []interface {} in assignment\n/tmp/tmp_nzgxf4f_test.go:17:15: cannot use list1.([]string)[:L] (type []string) as type []interface {} in assignment\n/tmp/tmp_nzgxf4f_test.go:18:15: cannot use list1.([]string)[L:] (type []string) as type []interface {} in assignment\n/tmp/tmp_nzgxf4f_test.go:20:15: cannot use list1.([]float64)[:L] (type []float64) as type []interface {} in assignment\n/tmp/tmp_nzgxf4f_test.go:21:15: cannot use list1.([]float64)[L:] (type []float64) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    for _, v := range list1.([]interface{}) {\n        if len(list2) < L {\n            list2 = append(list2, v)\n        } else {\n            list3 = append(list3, v)\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51a3c0, 0xc00008a658, 0x3, 0x0, 0x4cd165)\n\t/tmp/tmpth0tp30b_test.go:12 +0x432\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpth0tp30b_test.go:29 +0xea\ntesting.tRunner(0xc000001380, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    var list3 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n        list3 = list2[L:]\n        list2 = list2[:L]\n    case []string:\n        list2 = list1.([]string)\n        list3 = list2[L:]\n        list2 = list2[:L]\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123782,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmply3u759c_test.go:14:15: cannot use list1.([]int) (type []int) as type []interface {} in assignment\n/tmp/tmply3u759c_test.go:18:15: cannot use list1.([]string) (type []string) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    default:\n        return nil\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpp6wrqu54_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpp6wrqu54_test.go:24 +0x1f3\ntesting.tRunner(0xc000001380, 0x54df68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    var list3 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n        list3 = list1.([]int)\n    case []string:\n        list2 = list1.([]string)\n        list3 = list1.([]string)\n    }\n    list2 = list2[:L]\n    list3 = list3[L:]\n    list4 := []interface{}{list2, list3}\n    return list4\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123782,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo2k_8nmr_test.go:14:15: cannot use list1.([]int) (type []int) as type []interface {} in assignment\n/tmp/tmpo2k_8nmr_test.go:15:15: cannot use list1.([]int) (type []int) as type []interface {} in assignment\n/tmp/tmpo2k_8nmr_test.go:17:15: cannot use list1.([]string) (type []string) as type []interface {} in assignment\n/tmp/tmpo2k_8nmr_test.go:18:15: cannot use list1.([]string) (type []string) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    case []string:\n        list := list1.([]string)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123782,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps6kimxyd_test.go:14:15: cannot use list1.([]int)[:L] (type []int) as type []interface {} in assignment\n/tmp/tmps6kimxyd_test.go:15:15: cannot use list1.([]int)[L:] (type []int) as type []interface {} in assignment\n/tmp/tmps6kimxyd_test.go:17:15: cannot use list1.([]string)[:L] (type []string) as type []interface {} in assignment\n/tmp/tmps6kimxyd_test.go:18:15: cannot use list1.([]string)[L:] (type []string) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := []int{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []string:\n        list2 = list1.([]string)\n    }\n    return list2[:L], list2[L:]\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123782,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdvag3_sl_test.go:15:15: cannot use list1.([]string) (type []string) as type []int in assignment\n/tmp/tmpdvag3_sl_test.go:17:5: too many arguments to return\n\thave ([]int, []int)\n\twant (interface {})\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return [2][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        return [2][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if len(list) < L {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if len(list) < L {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        default:\n            return list1\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmpkh9mwbbx_test.go:29: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '%!s(<nil>)'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmpkh9mwbbx_test.go:29: expected '[[a b] [c d]]', got '%!s(<nil>)'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmpkh9mwbbx_test.go:29: expected '[[p y t h] [o n]]', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    if L <= 0 {\n        return nil\n    }\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, 0)\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2.([]int), v)\n            }\n        }\n    case []string:\n        list2 = make([]string, 0)\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2.([]string), v)\n            }\n        }\n    case []float64:\n        list2 = make([]float64, 0)\n        for i, v := range list1.([]float64) {\n            if i < L {\n                list2 = append(list2.([]float64), v)\n            }\n        }\n    case []bool:\n        list2 = make([]bool, 0)\n        for i, v := range list1.([]bool) {\n            if i < L {\n                list2 = append(list2.([]bool), v)\n            }\n        }\n    }\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmpsbzsuxww_test.go:62: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmpsbzsuxww_test.go:62: expected '[[a b] [c d]]', got '[a b]'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmpsbzsuxww_test.go:62: expected '[[p y t h] [o n]]', got '[p y t h]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    case []string:\n        list := list1.([]string)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        default:\n            return list1\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[0:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[0:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return []interface{}{list, []int{}}\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return []interface{}{list, []string{}}\n        }\n        return []interface{}{list[:L], list[L:]}\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    for i, v := range list1.([]interface{}) {\n        if i < L {\n            list2 = append(list2, v)\n        } else {\n            list3 = append(list3, v)\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51a3c0, 0xc00008a658, 0x3, 0x0, 0x4cd165)\n\t/tmp/tmpposbw0_i_test.go:12 +0x432\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpposbw0_i_test.go:29 +0xea\ntesting.tRunner(0xc000001380, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    case []string:\n        list := list1.([]string)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpp6wrqu54_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpp6wrqu54_test.go:24 +0x1f3\ntesting.tRunner(0xc000001380, 0x54df68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        case []float64:\n            list := list1.([]float64)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123782,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7p7tn06l_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmp7p7tn06l_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n/tmp/tmp7p7tn06l_test.go:19:26: cannot use list[L:] (type []float64) as type float64 in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpp6wrqu54_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpp6wrqu54_test.go:24 +0x1f3\ntesting.tRunner(0xc000001380, 0x54df68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    list4 := make([]interface{}, 0)\n    list5 := make([]interface{}, 0)\n    list6 := make([]interface{}, 0)\n    list7 := make([]interface{}, 0)\n    list8 := make([]interface{}, 0)\n    list9 := make([]interface{}, 0)\n    list10 := make([]interface{}, 0)\n    list11 := make([]interface{}, 0)\n    list12 := make([]interface{}, 0)\n    list13 := make([]interface{}, 0)\n    list14 := make([]interface{}, 0)\n    list15 := make([]interface{}, 0)\n    list16 := make([]interface{}, 0)\n    list17 := make([]interface{}, 0)\n    list18 := make([]interface{}, 0)\n    list19 := make([]interface{}, 0)\n    list20 := make([]interface{}, 0)\n    list21 := make([]interface{}, 0)\n    list22 := make([]interface{}, 0)\n    list23 := make([]interface{}, 0)\n    list24 := make([]interface{}, 0)\n    list25 := make([]interface{}, 0)\n    list26 := make([]interface{}, 0)\n    list27 := make([]interface{}, 0)\n    list28 := make([]interface{}, 0)\n    list29 := make([]interface{}, 0)\n    list30 := make([]interface{}, 0)\n    list31 := make([]interface{}, 0)\n    list32 := make([]interface{}, 0)\n    list33 := make([]interface{}, 0)\n    list34 := make([]interface{}, 0)\n    list35 := make([]interface{}, 0)\n    list36 := make([]interface{}, 0)\n    list37 := make([]interface{}, 0)\n    list38 := make([]interface{}, 0)\n    list39 := make([]interface{}, 0)\n    list40 := make([]interface{}, 0)\n    list41 :=\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123781,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpcii8gfhi_test.go:50:6: expected '(', found TestSplit_Two_Parts\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    var list3 []interface{}\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if i < L {\n                list2 = append(list2, s.Index(i).Interface())\n            } else {\n                list3 = append(list3, s.Index(i).Interface())\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_iig3bgr_test.go:12:12: undefined: reflect\n/tmp/tmp_iig3bgr_test.go:13:10: undefined: reflect\n/tmp/tmp_iig3bgr_test.go:14:14: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, L)\n        copy(list2.([]int), list1.([]int)[:L])\n        list1 = list1.([]int)[L:]\n    case []string:\n        list2 = make([]string, L)\n        copy(list2.([]string), list1.([]string)[:L])\n        list1 = list1.([]string)[L:]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmpfsjycuf4_test.go:39: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '[[%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)] [%!s(int=1) %!s(int=1) %!s(int=2)]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmpfsjycuf4_test.go:39: expected '[[a b] [c d]]', got '[[c d] [a b]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmpfsjycuf4_test.go:39: expected '[[p y t h] [o n]]', got '[[o n] [p y t h]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphkchckqb_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmphkchckqb_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    var list3 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    case []float64:\n        list2 = list1.([]float64)[:L]\n        list3 = list1.([]float64)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawkt7s4n_test.go:14:15: cannot use list1.([]int)[:L] (type []int) as type []interface {} in assignment\n/tmp/tmpawkt7s4n_test.go:15:15: cannot use list1.([]int)[L:] (type []int) as type []interface {} in assignment\n/tmp/tmpawkt7s4n_test.go:17:15: cannot use list1.([]string)[:L] (type []string) as type []interface {} in assignment\n/tmp/tmpawkt7s4n_test.go:18:15: cannot use list1.([]string)[L:] (type []string) as type []interface {} in assignment\n/tmp/tmpawkt7s4n_test.go:20:15: cannot use list1.([]float64)[:L] (type []float64) as type []interface {} in assignment\n/tmp/tmpawkt7s4n_test.go:21:15: cannot use list1.([]float64)[L:] (type []float64) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphkchckqb_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmphkchckqb_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        case []float64:\n            list := list1.([]float64)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123782,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7p7tn06l_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmp7p7tn06l_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n/tmp/tmp7p7tn06l_test.go:19:26: cannot use list[L:] (type []float64) as type float64 in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        default:\n            return list1\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        default:\n            return list1\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []int\n    list2 = list1.([]int)\n    return list2[:L], list2[L:]\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123784,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa4dn4tz4_test.go:12:5: too many arguments to return\n\thave ([]int, []int)\n\twant (interface {})\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmp5208q7v7_test.go:29: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '%!s(<nil>)'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmp5208q7v7_test.go:29: expected '[[a b] [c d]]', got '%!s(<nil>)'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmp5208q7v7_test.go:29: expected '[[p y t h] [o n]]', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int))-L)\n        for i := 0; i < len(list1.([]int)); i++ {\n            if i < L {\n                list2[i] = list1.([]int)[i]\n            } else {\n                list2[i-L] = list1.([]int)[i]\n            }\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string))-L)\n        for i := 0; i < len(list1.([]string)); i++ {\n            if i < L {\n                list2[i] = list1.([]string)[i]\n            } else {\n                list2[i-L] = list1.([]string)[i]\n            }\n        }\n    }\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: runtime error: index out of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536400, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536400, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51aec0, 0xc00011ae28, 0x4, 0x51a500, 0xc00013e048)\n\t/tmp/tmp1j0vj4zt_test.go:25 +0x3e5\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000102600)\n\t/tmp/tmp1j0vj4zt_test.go:43 +0x32f\ntesting.tRunner(0xc000102600, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    var list3 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []string:\n        list2 = list1.([]string)\n    }\n    for i := 0; i < L; i++ {\n        list3 = append(list3, list2[i])\n    }\n    return list3\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123784,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyxrhf7j3_test.go:14:15: cannot use list1.([]int) (type []int) as type []interface {} in assignment\n/tmp/tmpyxrhf7j3_test.go:16:15: cannot use list1.([]string) (type []string) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphkchckqb_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmphkchckqb_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, L)\n        copy(list2, list1.([]int)[:L])\n        list1 = list1.([]int)[L:]\n    case []string:\n        list2 = make([]interface{}, L)\n        copy(list2, list1.([]string)[:L])\n        list1 = list1.([]string)[L:]\n    default:\n        return nil\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123784,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp75lfy1x0_test.go:14:13: arguments to copy have different element types: []interface {} and []int\n/tmp/tmp75lfy1x0_test.go:18:13: arguments to copy have different element types: []interface {} and []string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    for i := 0; i < L; i++ {\n        list2 = append(list2, list1.([]interface{})[i])\n    }\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x522580, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x522580, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpscbpbzlw_test.go:12\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpscbpbzlw_test.go:24 +0xa8\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n        case []int:\n            list2 = list1.([]int)[:L]\n            list3 = list1.([]int)[L:]\n        case []string:\n            list2 = list1.([]string)[:L]\n            list3 = list1.([]string)[L:]\n        case []float64:\n            list2 = list1.([]float64)[:L]\n            list3 = list1.([]float64)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123784,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9tcu9g7_test.go:14:19: cannot use list1.([]int)[:L] (type []int) as type []interface {} in assignment\n/tmp/tmpq9tcu9g7_test.go:15:19: cannot use list1.([]int)[L:] (type []int) as type []interface {} in assignment\n/tmp/tmpq9tcu9g7_test.go:17:19: cannot use list1.([]string)[:L] (type []string) as type []interface {} in assignment\n/tmp/tmpq9tcu9g7_test.go:18:19: cannot use list1.([]string)[L:] (type []string) as type []interface {} in assignment\n/tmp/tmpq9tcu9g7_test.go:20:19: cannot use list1.([]float64)[:L] (type []float64) as type []interface {} in assignment\n/tmp/tmpq9tcu9g7_test.go:21:19: cannot use list1.([]float64)[L:] (type []float64) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list := list1.([]int)\n    list_len := len(list)\n    if list_len < L {\n        return list\n    }\n    return [][]int{list[:L], list[L:]}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5226a0, 0xc00011e270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5226a0, 0xc00011e270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpuhosudxm_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000102600)\n\t/tmp/tmpuhosudxm_test.go:26 +0x1b0\ntesting.tRunner(0xc000102600, 0x54e028)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[0:L], list[L:len(list)])\n    case []string:\n        list := list1.([]string)\n        return append(list[0:L], list[L:len(list)])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvubg9g3u_test.go:13:22: cannot use list[L:len(list)] (type []int) as type int in append\n/tmp/tmpvubg9g3u_test.go:16:22: cannot use list[L:len(list)] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return list[:L], list[L:]\n        case []string:\n            list := list1.([]string)\n            return list[:L], list[L:]\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkvq1uzw6_test.go:13:13: too many arguments to return\n\thave ([]int, []int)\n\twant (interface {})\n/tmp/tmpkvq1uzw6_test.go:16:13: too many arguments to return\n\thave ([]string, []string)\n\twant (interface {})\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    default:\n        list2 = list1\n        list1 = list1\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpp6wrqu54_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpp6wrqu54_test.go:24 +0x1f3\ntesting.tRunner(0xc000001380, 0x54df68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return list1\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        return [][]string{list[:L], list[L:]}\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    list2 = append(list2, list1)\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmp85jecl4s_test.go:30: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '[[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmp85jecl4s_test.go:30: expected '[[a b] [c d]]', got '[[a b c d]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmp85jecl4s_test.go:30: expected '[[p y t h] [o n]]', got '[[p y t h o n]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n        case []int:\n            list2 = make([]int, len(list1.([]int)) - L)\n            copy(list2.([]int), list1.([]int)[L:])\n        case []string:\n            list2 = make([]string, len(list1.([]string)) - L)\n            copy(list2.([]string), list1.([]string)[L:])\n        case []float64:\n            list2 = make([]float64, len(list1.([]float64)) - L)\n            copy(list2.([]float64), list1.([]float64)[L:])\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmp0eouggub_test.go:40: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '[[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmp0eouggub_test.go:40: expected '[[a b] [c d]]', got '[[a b c d] [c d]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmp0eouggub_test.go:40: expected '[[p y t h] [o n]]', got '[[p y t h o n] [o n]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case string:\n        list := list1.(string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp2q9tr_t_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpp2q9tr_t_test.go:16:22: first argument to append must be slice; have string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := list1.([]int)\n    return list2[:L], list2[L:]\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb5ra2ewb_test.go:11:5: too many arguments to return\n\thave ([]int, []int)\n\twant (interface {})\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    case []float64:\n        list2 = list1.([]float64)[L:]\n        list1 = list1.([]float64)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n        case []int:\n            list2 = list1.([]int)[L:]\n            list1 = list1.([]int)[:L]\n        case []string:\n            list2 = list1.([]string)[L:]\n            list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpp6wrqu54_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpp6wrqu54_test.go:24 +0x1f3\ntesting.tRunner(0xc000001380, 0x54df68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphkchckqb_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmphkchckqb_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmp5208q7v7_test.go:29: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '%!s(<nil>)'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmp5208q7v7_test.go:29: expected '[[a b] [c d]]', got '%!s(<nil>)'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmp5208q7v7_test.go:29: expected '[[p y t h] [o n]]', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int))-L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i-L] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string))-L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i-L] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: runtime error: index out of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51aec0, 0xc00008a628, 0x4, 0x51a500, 0xc00000c060)\n\t/tmp/tmp15gtxfic_test.go:23 +0x40d\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmp15gtxfic_test.go:41 +0x32f\ntesting.tRunner(0xc000001380, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return list[:L], list[L:]\n        case []string:\n            list := list1.([]string)\n            return list[:L], list[L:]\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkvq1uzw6_test.go:13:13: too many arguments to return\n\thave ([]int, []int)\n\twant (interface {})\n/tmp/tmpkvq1uzw6_test.go:16:13: too many arguments to return\n\thave ([]string, []string)\n\twant (interface {})\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123782,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps6kimxyd_test.go:14:15: cannot use list1.([]int)[:L] (type []int) as type []interface {} in assignment\n/tmp/tmps6kimxyd_test.go:15:15: cannot use list1.([]int)[L:] (type []int) as type []interface {} in assignment\n/tmp/tmps6kimxyd_test.go:17:15: cannot use list1.([]string)[:L] (type []string) as type []interface {} in assignment\n/tmp/tmps6kimxyd_test.go:18:15: cannot use list1.([]string)[L:] (type []string) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpp6wrqu54_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpp6wrqu54_test.go:24 +0x1f3\ntesting.tRunner(0xc000001380, 0x54df68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    case []string:\n        list := list1.([]string)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    var list3 []interface{}\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if i < L {\n                list2 = append(list2, s.Index(i).Interface())\n            } else {\n                list3 = append(list3, s.Index(i).Interface())\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_iig3bgr_test.go:12:12: undefined: reflect\n/tmp/tmp_iig3bgr_test.go:13:10: undefined: reflect\n/tmp/tmp_iig3bgr_test.go:14:14: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphkchckqb_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmphkchckqb_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []float64:\n        list2 = make([]interface{}, len(list1.([]float64)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]float64)[i]\n        }\n        for i := L; i < len(list1.([]float64)); i++ {\n            list2[i] = list1.([]float64)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: runtime error: index out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51a3c0, 0xc00008a658, 0x3, 0x0, 0x4cd165)\n\t/tmp/tmp7k059cqf_test.go:18 +0x5ed\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmp7k059cqf_test.go:47 +0xea\ntesting.tRunner(0xc000001380, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    for i := 0; i < L; i++ {\n        list2 = append(list2, list1.([]interface{})[i])\n    }\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x522580, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x522580, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpscbpbzlw_test.go:12\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpscbpbzlw_test.go:24 +0xa8\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := []interface{}{}\n    list3 := []interface{}{}\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list2 := list1.([]int)\n            return append(list2[:L], list2[L:]...)\n        case []string:\n            list2 := list1.([]string)\n            return append(list2[:L], list2[L:]...)\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmp_tj4ssc2_test.go:37: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmp_tj4ssc2_test.go:37: expected '[[a b] [c d]]', got '[a b c d]'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmp_tj4ssc2_test.go:37: expected '[[p y t h] [o n]]', got '[p y t h o n]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, len(list1.([]int)) - L)\n        copy(list2.([]int), list1.([]int)[L:])\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = make([]string, len(list1.([]string)) - L)\n        copy(list2.([]string), list1.([]string)[L:])\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    case []float64:\n        list := list1.([]float64)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw_di7i0b_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpw_di7i0b_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n/tmp/tmpw_di7i0b_test.go:19:22: cannot use list[L:] (type []float64) as type float64 in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    for _, v := range list1.([]interface{}) {\n        if len(list2) < L {\n            list2 = append(list2, v)\n        } else {\n            list3 = append(list3, v)\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51a3c0, 0xc00008a658, 0x3, 0x0, 0x4cd165)\n\t/tmp/tmpth0tp30b_test.go:12 +0x432\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpth0tp30b_test.go:29 +0xea\ntesting.tRunner(0xc000001380, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: runtime error: index out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51a3c0, 0xc00008c658, 0x3, 0x0, 0x4cd165)\n\t/tmp/tmpkhhed_4h_test.go:18 +0x3ed\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpkhhed_4h_test.go:39 +0xea\ntesting.tRunner(0xc000001380, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, len(list1.([]int)) - L)\n        copy(list2.([]int), list1.([]int)[L:])\n    case []string:\n        list2 = make([]string, len(list1.([]string)) - L)\n        copy(list2.([]string), list1.([]string)[L:])\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmpm4k40__i_test.go:37: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '[[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmpm4k40__i_test.go:37: expected '[[a b] [c d]]', got '[[a b c d] [c d]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmpm4k40__i_test.go:37: expected '[[p y t h] [o n]]', got '[[p y t h o n] [o n]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, L)\n        copy(list2.([]int), list1.([]int)[:L])\n        list1 = list1.([]int)[L:]\n    case []string:\n        list2 = make([]string, L)\n        copy(list2.([]string), list1.([]string)[:L])\n        list1 = list1.([]string)[L:]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmpfsjycuf4_test.go:39: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '[[%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)] [%!s(int=1) %!s(int=1) %!s(int=2)]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmpfsjycuf4_test.go:39: expected '[[a b] [c d]]', got '[[c d] [a b]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmpfsjycuf4_test.go:39: expected '[[p y t h] [o n]]', got '[[o n] [p y t h]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, L)\n        copy(list2.([]int), list1.([]int)[:L])\n        list1 = list1.([]int)[L:]\n    case []string:\n        list2 = make([]string, L)\n        copy(list2.([]string), list1.([]string)[:L])\n        list1 = list1.([]string)[L:]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmpfsjycuf4_test.go:39: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '[[%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)] [%!s(int=1) %!s(int=1) %!s(int=2)]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmpfsjycuf4_test.go:39: expected '[[a b] [c d]]', got '[[c d] [a b]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmpfsjycuf4_test.go:39: expected '[[p y t h] [o n]]', got '[[o n] [p y t h]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := []interface{}{}\n    switch list1.(type) {\n        case []int:\n            list2 = make([]interface{}, len(list1.([]int)))\n            copy(list2.([]interface{}), list1.([]int))\n        case []string:\n            list2 = make([]interface{}, len(list1.([]string)))\n            copy(list2.([]interface{}), list1.([]string))\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdhvn4usy_test.go:14:23: invalid type assertion: list2.([]<inter>) (non-interface type []interface {} on left)\n/tmp/tmpdhvn4usy_test.go:17:23: invalid type assertion: list2.([]<inter>) (non-interface type []interface {} on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i - L] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i - L] = list1.([]string)[i]\n        }\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmpywzg2bj5_test.go:41: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '[[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmpywzg2bj5_test.go:41: expected '[[a b] [c d]]', got '[[a b c d] [c d]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmpywzg2bj5_test.go:41: expected '[[p y t h] [o n]]', got '[[p y t h o n] [o n]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := []interface{}{}\n    list3 := []interface{}{}\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return list1\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[0:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[0:L], list[L:]}\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123782,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps6kimxyd_test.go:14:15: cannot use list1.([]int)[:L] (type []int) as type []interface {} in assignment\n/tmp/tmps6kimxyd_test.go:15:15: cannot use list1.([]int)[L:] (type []int) as type []interface {} in assignment\n/tmp/tmps6kimxyd_test.go:17:15: cannot use list1.([]string)[:L] (type []string) as type []interface {} in assignment\n/tmp/tmps6kimxyd_test.go:18:15: cannot use list1.([]string)[L:] (type []string) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list1_len := len(list1.([]int))\n    if L > list1_len {\n        return nil\n    }\n    list2 := list1.([]int)[L:]\n    list1 = list1.([]int)[:L]\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmp4ayw7fl7_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmp4ayw7fl7_test.go:27 +0x24d\ntesting.tRunner(0xc000001380, 0x54df68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: runtime error: index out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536400, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51a3c0, 0xc00008c658, 0x3, 0x0, 0x4cd165)\n\t/tmp/tmpkhhed_4h_test.go:18 +0x3ed\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpkhhed_4h_test.go:39 +0xea\ntesting.tRunner(0xc000001380, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphkchckqb_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmphkchckqb_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, len(list1.([]int)) - L)\n        copy(list2.([]int), list1.([]int)[L:])\n    case []string:\n        list2 = make([]string, len(list1.([]string)) - L)\n        copy(list2.([]string), list1.([]string)[L:])\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmpm4k40__i_test.go:37: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '[[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmpm4k40__i_test.go:37: expected '[[a b] [c d]]', got '[[a b c d] [c d]]'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmpm4k40__i_test.go:37: expected '[[p y t h] [o n]]', got '[[p y t h o n] [o n]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\n    --- FAIL: TestSplit_Two_Parts/test_num__0 (0.00s)\n        tmpkh9mwbbx_test.go:29: expected '[[%!s(int=1) %!s(int=1) %!s(int=2)] [%!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]]', got '%!s(<nil>)'\n    --- FAIL: TestSplit_Two_Parts/test_num__1 (0.00s)\n        tmpkh9mwbbx_test.go:29: expected '[[a b] [c d]]', got '%!s(<nil>)'\n    --- FAIL: TestSplit_Two_Parts/test_num__2 (0.00s)\n        tmpkh9mwbbx_test.go:29: expected '[[p y t h] [o n]]', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := []interface{}{}\n    list3 := []interface{}{}\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    var list3 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0tt8f8eg_test.go:14:15: cannot use list1.([]int)[:L] (type []int) as type []interface {} in assignment\n/tmp/tmp0tt8f8eg_test.go:15:15: cannot use list1.([]int)[L:] (type []int) as type []interface {} in assignment\n/tmp/tmp0tt8f8eg_test.go:17:15: cannot use list1.([]string)[:L] (type []string) as type []interface {} in assignment\n/tmp/tmp0tt8f8eg_test.go:18:15: cannot use list1.([]string)[L:] (type []string) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    if L == 0 {\n        return list1\n    }\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcb9ir4n5_test.go:16:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpcb9ir4n5_test.go:19:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    case []float64:\n        list2 = list1.([]float64)[L:]\n        list1 = list1.([]float64)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L < 0 {\n                return nil\n            }\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L < 0 {\n                return nil\n            }\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    for i, v := range list1.([]interface{}) {\n        if i < L {\n            list2 = append(list2, v)\n        } else {\n            list3 = append(list3, v)\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(0x51a3c0, 0xc00008a658, 0x3, 0x0, 0x4cd165)\n\t/tmp/tmpposbw0_i_test.go:12 +0x432\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpposbw0_i_test.go:29 +0xea\ntesting.tRunner(0xc000001380, 0x54f2d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    var list3 []interface{}\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if i < L {\n                list2 = append(list2, s.Index(i).Interface())\n            } else {\n                list3 = append(list3, s.Index(i).Interface())\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_iig3bgr_test.go:12:12: undefined: reflect\n/tmp/tmp_iig3bgr_test.go:13:10: undefined: reflect\n/tmp/tmp_iig3bgr_test.go:14:14: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    case []float64:\n        list := list1.([]float64)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu0up0mgt_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpu0up0mgt_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n/tmp/tmpu0up0mgt_test.go:19:22: cannot use list[L:] (type []float64) as type float64 in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpp6wrqu54_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpp6wrqu54_test.go:24 +0x1f3\ntesting.tRunner(0xc000001380, 0x54df68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    // convert list1 to slice\n    list2 := list1.([]interface{})\n    // split list2 into two parts\n    list3 := list2[:L]\n    list4 := list2[L:]\n    // return list3 and list4\n    return []interface{}{list3, list4}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5225e0, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5225e0, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmp6g_p4_u2_test.go:11\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000102600)\n\t/tmp/tmp6g_p4_u2_test.go:26 +0x9d\ntesting.tRunner(0xc000102600, 0x54df60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    case []float64:\n        list := list1.([]float64)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu0up0mgt_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpu0up0mgt_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n/tmp/tmpu0up0mgt_test.go:19:22: cannot use list[L:] (type []float64) as type float64 in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)))\n        copy(list2, list1.([]int))\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)))\n        copy(list2, list1.([]string))\n    default:\n        return nil\n    }\n    return []interface{}{list1, list2[L:]}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0ma9a_aa_test.go:14:13: arguments to copy have different element types: []interface {} and []int\n/tmp/tmp0ma9a_aa_test.go:17:13: arguments to copy have different element types: []interface {} and []string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    case []float64:\n        list2 = list1.([]float64)[L:]\n        list1 = list1.([]float64)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123785,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixal0aqy_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmpixal0aqy_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphkchckqb_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmphkchckqb_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "--- FAIL: TestSplit_Two_Parts (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5225e0, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.split_two_parts(...)\n\t/tmp/tmpp6wrqu54_test.go:10\ncommand-line-arguments_test.TestSplit_Two_Parts(0xc000001380)\n\t/tmp/tmpp6wrqu54_test.go:24 +0x1f3\ntesting.tRunner(0xc000001380, 0x54df68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphkchckqb_test.go:13:22: cannot use list[L:] (type []int) as type int in append\n/tmp/tmphkchckqb_test.go:16:22: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph1owhiba_test.go:13:26: cannot use list[L:] (type []int) as type int in append\n/tmp/tmph1owhiba_test.go:16:26: cannot use list[L:] (type []string) as type string in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n\nfunc TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}