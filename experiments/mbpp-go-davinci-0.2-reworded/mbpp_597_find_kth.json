{
  "name": "mbpp_597_find_kth",
  "language": "go_test.go",
  "prompt": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) == 1 && len(arr2) == 1 {\n        return arr1[0]\n    }\n    if len(arr1) == 1 {\n        if k == 1 {\n            return arr1[0]\n        } else {\n            return arr2[k-1]\n        }\n    }\n    if len(arr2) == 1 {\n        if k == 1 {\n            return arr2[0]\n        } else {\n            return arr1[k-1]\n        }\n    }\n    var i int\n    if len(arr1) < len(arr2) {\n        i = len(arr1) / 2\n    } else {\n        i = len(arr2) / 2\n    }\n    if k <= i {\n        return find_kth(arr1[:i], arr2[:i], k)\n    } else {\n        if arr1[i] < arr2[i] {\n            return find_kth(arr1[i:], arr2, k-i)\n        } else {\n            return find_kth(arr1, arr2[i:], k-i)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n    if len(arr1) > k/2 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if len(arr1) == 1 {\n        if arr1[0] < arr2[k-1] {\n            return arr2[k-1]\n        } else {\n            return arr2[k]\n        }\n    }\n    if len(arr2) == 1 {\n        if arr2[0] < arr1[k-1] {\n            return arr1[k-1]\n        } else {\n            return arr1[k]\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if k == 2 {\n        if arr1[1] < arr2[1] {\n            return find_kth(arr1[2:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[2:], 0)\n        }\n    }\n    if k == 3 {\n        if arr1[2] < arr2[2] {\n            return find_kth(arr1[3:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[3:], 0)\n        }\n    }\n    if k == 4 {\n        if arr1[3] < arr2[3] {\n            return find_kth(arr1[4:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[4:], 0)\n        }\n    }\n    if k == 5 {\n        if arr1[4] < arr2[4] {\n            return find_kth(arr1[5:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[5:], 0)\n        }\n    }\n    if k == 6 {\n        if arr1[5] < arr2[5] {\n            return find_kth(arr1[6:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[6:], 0",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid int\n    if len(arr1) < k/2 {\n        mid = len(arr1)\n    } else {\n        mid = k/2\n    }\n    if arr1[mid-1] < arr2[mid-1] {\n        return find_kth(arr1[mid:], arr2, k-mid)\n    } else {\n        return find_kth(arr1, arr2[mid:], k-mid)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) > k/2 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k/2)\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    } else {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if k == 1 {\n        return min(arr1[0], arr2[0])\n    }\n    i := min(len(arr1), k/2)\n    j := min(len(arr2), k/2)\n    if arr1[i-1] > arr2[j-1] {\n        return find_kth(arr1, arr2[j:], k-j)\n    } else {\n        return find_kth(arr1[i:], arr2, k-i)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n    if len(arr1) > k/2 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n}\n",
    "    if k <= 0 {\n        return -1\n    }\n\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    var i, j int\n    if len(arr1) < k / 2 {\n        i = len(arr1)\n    } else {\n        i = k / 2\n    }\n\n    if len(arr2) < k / 2 {\n        j = len(arr2)\n    } else {\n        j = k / 2\n    }\n\n    if arr1[i - 1] < arr2[j - 1] {\n        return find_kth(arr1[i:], arr2, k - i)\n    } else {\n        return find_kth(arr1, arr2[j:], k - j)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k / 2 {\n        a = arr1[len(arr1) - 1]\n    } else {\n        a = arr1[k / 2 - 1]\n    }\n    if len(arr2) < k / 2 {\n        b = arr2[len(arr2) - 1]\n    } else {\n        b = arr2[k / 2 - 1]\n    }\n    if a < b {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k/2 > len(arr1) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if k/2 > len(arr2) {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var k1, k2 int\n    if len(arr1) < k/2 {\n        k1 = len(arr1)\n    } else {\n        k1 = k/2\n    }\n    if len(arr2) < k/2 {\n        k2 = len(arr2)\n    } else {\n        k2 = k/2\n    }\n    if arr1[k1-1] < arr2[k2-1] {\n        return find_kth(arr1[k1:], arr2, k-k1)\n    } else {\n        return find_kth(arr1, arr2[k2:], k-k2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k/2 > len(arr1) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if k/2 > len(arr2) {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) == 1 && len(arr2) == 1 {\n        return arr1[0]\n    }\n    if len(arr1) == 1 {\n        if k == 1 {\n            if arr1[0] < arr2[0] {\n                return arr1[0]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            return arr2[k-1]\n        }\n    }\n    if len(arr2) == 1 {\n        if k == 1 {\n            if arr1[0] < arr2[0] {\n                return arr1[0]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            return arr1[k-1]\n        }\n    }\n    var mid1 int = len(arr1) / 2\n    var mid2 int = len(arr2) / 2\n    if mid1 + mid2 < k {\n        if arr1[mid1] > arr2[mid2] {\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n        } else {\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n        }\n    } else {\n        if arr1[mid1] > arr2[mid2] {\n            return find_kth(arr1[:mid1], arr2, k)\n        } else {\n            return find_kth(arr1, arr2[:mid2], k)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1) - 1\n    } else {\n        i = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2) - 1\n    } else {\n        j = k/2 - 1\n    }\n    if arr1[i] > arr2[j] {\n        return find_kth(arr1, arr2[j+1:], k-j-1)\n    } else {\n        return find_kth(arr1[i+1:], arr2, k-i-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k - mid1 - 1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k - mid2 - 1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1)+1:], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2)+1:], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2+1:], arr2, k-k/2-1)\n    } else {\n        return find_kth(arr1, arr2[k/2+1:], k-k/2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr1[k/2-1] < arr2[len(arr2)-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr1))\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    } else if len(arr2) == 0 {\n        return arr1[k]\n    }\n\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n\n    if len(arr1) <= k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1)] {\n            return arr2[k - len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    } else {\n        if arr1[k / 2] < arr2[0] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1[:k / 2], arr2, k / 2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) == 1 && len(arr2) == 1 {\n        return arr1[0]\n    }\n    if len(arr1) == 1 {\n        if k == 1 {\n            return arr1[0]\n        } else {\n            return arr2[k-1]\n        }\n    }\n    if len(arr2) == 1 {\n        if k == 1 {\n            return arr2[0]\n        } else {\n            return arr1[k-1]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if k == 3 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    return arr1[2]\n                } else {\n                    return arr2[0]\n                }\n            } else {\n                if arr2[1] < arr1[2] {\n                    return arr2[1]\n                } else {\n                    return arr1[2]\n                }\n            }\n        } else {\n            if arr2[1",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n        return find_kth(arr1, arr2[:k/2], k/2)\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n        return find_kth(arr1[:k/2], arr2, k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n        return find_kth(arr1, arr2[:k/2], k/2)\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n        return find_kth(arr1[:k/2], arr2, k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) >= k/2 {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], len(arr1))\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) <= k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2]\n    }\n    if len(arr2) <= k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1 int\n    var mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1) - 1] {\n            return arr2[k - len(arr1) - 1]\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    }\n    if len(arr2) < k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k - len(arr2) - 1] {\n            return arr1[k - len(arr2) - 1]\n        } else {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        }\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) >= k/2 {\n        mid1 = arr1[k/2-1]\n    } else {\n        mid1 = arr1[len(arr1)-1]\n    }\n    if len(arr2) >= k/2 {\n        mid2 = arr2[k/2-1]\n    } else {\n        mid2 = arr2[len(arr2)-1]\n    }\n    if mid1 < mid2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if k > len(arr1) + len(arr2) {\n        return -1\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if k/2 > len(arr1) {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if k/2 > len(arr2) {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        return min(arr1[0], arr2[0])\n    }\n    if len(arr1) < k / 2 {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n    if len(arr2) < k / 2 {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    }\n    return find_kth(arr1, arr2[k / 2:], k - k / 2)\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    var i, j int\n    var res int\n    for i < len(arr1) && j < len(arr2) && k > 0 {\n        if arr1[i] < arr2[j] {\n            res = arr1[i]\n            i++\n        } else {\n            res = arr2[j]\n            j++\n        }\n        k--\n    }\n\n    for i < len(arr1) && k > 0 {\n        res = arr1[i]\n        i++\n        k--\n    }\n\n    for j < len(arr2) && k > 0 {\n        res = arr2[j]\n        j++\n        k--\n    }\n\n    return res\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1 int\n    var mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if k == 1 {\n        return min(arr1[0], arr2[0])\n    }\n    i := min(len(arr1), k / 2)\n    j := min(len(arr2), k / 2)\n    if arr1[i - 1] > arr2[j - 1] {\n        return find_kth(arr1, arr2[j:], k - j)\n    } else {\n        return find_kth(arr1[i:], arr2, k - i)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr1))\n        }\n    } else if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr2))\n        }\n    } else {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid int\n    if len(arr1) < k/2 {\n        mid = len(arr1)\n    } else {\n        mid = k/2\n    }\n    if arr1[mid-1] < arr2[mid-1] {\n        return find_kth(arr1[mid:], arr2, k-mid)\n    } else {\n        return find_kth(arr1, arr2[mid:], k-mid)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    k1 := k / 2\n    if k1 > len(arr1) {\n        k1 = len(arr1)\n    }\n    k2 := k - k1\n    if arr1[k1-1] < arr2[k2-1] {\n        return find_kth(arr1[k1:], arr2, k2)\n    } else {\n        return find_kth(arr1, arr2[k2:], k1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid int\n    if len(arr1) < k / 2 {\n        mid = len(arr1)\n    } else {\n        mid = k / 2\n    }\n    if arr1[mid - 1] < arr2[mid - 1] {\n        return find_kth(arr1[mid:], arr2, k - mid)\n    } else {\n        return find_kth(arr1, arr2[mid:], k - mid)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var idx1, idx2 int\n    if len(arr1) < k/2 {\n        idx1 = len(arr1)\n    } else {\n        idx1 = k/2\n    }\n    if len(arr2) < k/2 {\n        idx2 = len(arr2)\n    } else {\n        idx2 = k/2\n    }\n    if arr1[idx1-1] < arr2[idx2-1] {\n        return find_kth(arr1[idx1:], arr2, k-idx1)\n    } else {\n        return find_kth(arr1, arr2[idx2:], k-idx2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) > k/2 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k - k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k - k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    // k/2 is the index of the kth element in the first array\n    // k - k/2 is the index of the kth element in the second array\n    if arr1[k/2] < arr2[k - k/2] {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    } else {\n        return find_kth(arr1, arr2[k - k/2:], k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k - mid1 - 1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k - mid2 - 1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) < k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1) - 1] {\n            return arr2[k - len(arr1) - 1]\n        } else {\n            return find_kth(arr1, arr2[k - len(arr1):], len(arr1))\n        }\n    } else {\n        if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1 int\n    var mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1)\n    } else {\n        mid1 = k/2\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2)\n    } else {\n        mid2 = k/2\n    }\n    if arr1[mid1-1] < arr2[mid2-1] {\n        return find_kth(arr1[mid1:], arr2, k-mid1)\n    } else {\n        return find_kth(arr1, arr2[mid2:], k-mid2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        return min(arr1[0], arr2[0])\n    }\n    if len(arr1) < k / 2 {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n    if len(arr2) < k / 2 {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    }\n    return find_kth(arr1, arr2[k / 2:], k - k / 2)\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    } else {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) <= k / 2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k / 2 - 1\n    }\n    if len(arr2) <= k / 2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k / 2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    } else {\n        return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1[len(arr1):], arr2, k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1, arr2[len(arr2):], k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] > arr2[0] {\n            return arr2[0]\n        } else {\n            return arr1[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] > arr2[k-len(arr1)] {\n            return arr1[len(arr1)-1]\n        } else {\n            return arr2[k-len(arr1)]\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] > arr1[k-len(arr2)] {\n            return arr2[len(arr2)-1]\n        } else {\n            return arr1[k-len(arr2)]\n        }\n    }\n    if arr1[k/2] > arr2[k/2] {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) >= k/2 {\n        mid1 = k/2 - 1\n    } else {\n        mid1 = len(arr1) - 1\n    }\n    if len(arr2) >= k/2 {\n        mid2 = k/2 - 1\n    } else {\n        mid2 = len(arr2) - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if k % 2 == 0 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k/2)\n        }\n    } else {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k/2+1)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k/2+1)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            }\n            return arr2[0]\n        }\n        if arr2[1] < arr1[0] {\n            return arr2[1]\n        }\n        return arr1[0]\n    }\n    if k == 3 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    return arr1[2]\n                }\n                return arr2[0]\n            }\n            if arr2[1] < arr1[2] {\n                return arr2[1]\n            }\n            return arr1[2]\n        }\n        if arr2[1] < arr1[0] {\n            if arr2[2] < arr1[0] {\n                return arr2[2]\n            }\n            return arr1[0]\n        }\n        if arr1[1] < arr2[2] {\n            return arr1[1]\n        }\n        return arr2[2]\n    }\n    if k == 4 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    if arr1[3] < arr2[0] {\n                        return arr1[3]\n                    }\n                    return arr2[0]\n                }\n                if arr2[1] < arr1[3] {\n                    return arr2[1]\n                }\n                return arr1[3]\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    } else if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    } else {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if k/2 > len(arr1) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if k/2 > len(arr2) {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) > k/2 {\n        i = k/2\n    } else {\n        i = len(arr1)\n    }\n    if len(arr2) > k/2 {\n        j = k/2\n    } else {\n        j = len(arr2)\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    } else {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    var mid1, mid2 int\n    if len(arr1) < k / 2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k / 2 - 1\n    }\n    if len(arr2) < k / 2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k / 2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    }\n    return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1) - 1] {\n            return arr2[k - len(arr1) - 1]\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    }\n    if len(arr2) < k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k - len(arr2) - 1] {\n            return arr1[k - len(arr2) - 1]\n        } else {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        }\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k / 2 - 1] {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        } else {\n            return find_kth(arr1, arr2[:k / 2], k - k / 2)\n        }\n    }\n    if len(arr2) < k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k / 2 - 1] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1[:k / 2], arr2, k - k / 2)\n        }\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1)] {\n            return arr2[k - len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    } else if len(arr2) <= k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k - len(arr2)] {\n            return arr1[k - len(arr2)]\n        } else {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        }\n    } else {\n        if arr1[k / 2] < arr2[k / 2] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[0]\n            }\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[0]\n            }\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) >= k/2 {\n        mid1 = arr1[k/2-1]\n    } else {\n        mid1 = arr1[len(arr1)-1]\n    }\n    if len(arr2) >= k/2 {\n        mid2 = arr2[k/2-1]\n    } else {\n        mid2 = arr2[len(arr2)-1]\n    }\n    if mid1 < mid2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k/2 > len(arr1) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if k/2 > len(arr2) {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    } else if len(arr2) == 0 {\n        return arr1[k]\n    }\n\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], len(arr1))\n        }\n    } else if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, len(arr2))\n        }\n    } else {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n"
  ]
}