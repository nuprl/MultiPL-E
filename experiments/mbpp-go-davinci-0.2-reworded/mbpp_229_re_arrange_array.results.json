{
  "name": "mbpp_229_re_arrange_array",
  "language": "go_test.go",
  "prompt": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j > 0 && arr[j-1] > 0 {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n                j--\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpbcpgjyu8_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    // if n == 2 {\n    //     if arr[0] < 0 && arr[1] < 0 {\n    //         return arr\n    //     } else if arr[0] < 0 && arr[1] >= 0 {\n    //         return []int{arr[0], arr[1]}\n    //     } else if arr[0] >= 0 && arr[1] < 0 {\n    //         return []int{arr[1], arr[0]}\n    //     } else {\n    //         return []int{arr[1], arr[0]}\n    //     }\n    // }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), []int{arr[0]}...)\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000014468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000014468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc00001a180, 0x1, 0x1, 0x1, 0x10000c0000a81a0, 0x2b267db7e5d0, 0x0)\n\t/tmp/tmpt_97q_ww_test.go:17 +0x34f\ncommand-line-arguments_test.re_arrange_array(0xc00001a178, 0x2, 0x2, 0x2, 0xc0000c4c20, 0x419225, 0xc0000c4bf0)\n\t/tmp/tmpt_97q_ww_test.go:34 +0x269\ncommand-line-arguments_test.re_arrange_array(0xc00001a170, 0x3, 0x3, 0x3, 0x0, 0x0, 0x0)\n\t/tmp/tmpt_97q_ww_test.go:32 +0x146\ncommand-line-arguments_test.re_arrange_array(0xc00001a168, 0x4, 0x4, 0x4, 0x452467, 0x58a7bf, 0x841)\n\t/tmp/tmpt_97q_ww_test.go:34 +0x269\ncommand-line-arguments_test.re_arrange_array(0xc00001a160, 0x5, 0x5, 0x5, 0x58a7bf, 0x3b, 0xc000094508)\n\t/tmp/tmpt_97q_ww_test.go:34 +0x269\ncommand-line-arguments_test.re_arrange_array(0xc00001a158, 0x6, 0x6, 0x6, 0x5fa340, 0x609a20, 0x4cd164)\n\t/tmp/tmpt_97q_ww_test.go:34 +0x269\ncommand-line-arguments_test.re_arrange_array(0xc00001a150, 0x7, 0x7, 0x7, 0x5826a3, 0x0, 0x40d8fb)\n\t/tmp/tmpt_97q_ww_test.go:32 +0x146\ncommand-line-arguments_test.re_arrange_array(0xc00001a148, 0x8, 0x8, 0x8, 0x5fa340, 0x6204a0, 0x0)\n\t/tmp/tmpt_97q_ww_test.go:34 +0x269\ncommand-line-arguments_test.re_arrange_array(0xc00001a140, 0x9, 0x9, 0x9, 0x0, 0xc0000181f0, 0x4cd164)\n\t/tmp/tmpt_97q_ww_test.go:32 +0x146\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000001380)\n\t/tmp/tmpt_97q_ww_test.go:45 +0xc2\ntesting.tRunner(0xc000001380, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] > 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] > 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] > 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] < 0 && arr[1] > 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        } else if arr[0] > 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        } else if arr[0] < 0 && arr[1] > 0 && arr[2] > 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] > 0 && arr[1] < 0 && arr[2] > 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        } else if arr[0] > 0 && arr[1] > 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        } else {\n            return []int{arr[2], arr[1], arr[0]}\n        }\n    }\n    if n ==\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmppfq_siiq_test.go:51:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] >= 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpty7hyxtk_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpty7hyxtk_test.go:39: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpty7hyxtk_test.go:39: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    i := 0\n    j := n - 1\n\n    for i < j {\n        if arr[i] < 0 {\n            i++\n            continue\n        }\n        if arr[j] > 0 {\n            j--\n            continue\n        }\n        arr[i], arr[j] = arr[j], arr[i]\n        i++\n        j--\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpbuhax3jy_test.go:49: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpbuhax3jy_test.go:49: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpbuhax3jy_test.go:49: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                return arr\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmplvwej5mk_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmplvwej5mk_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmplvwej5mk_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    if n == 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j = i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                return arr\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp419k0m78_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp419k0m78_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp419k0m78_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n                j++\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpx0s43nio_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpx0s43nio_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpx0s43nio_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                break\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpj0ez1v2m_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpj0ez1v2m_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpj0ez1v2m_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 1 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp2ipn69ef_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp2ipn69ef_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp2ipn69ef_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[n-1] < 0 {\n        return append([]int{arr[n-1]}, append(re_arrange_array(arr[:n-1], n-1), arr[n-1])...)\n    } else {\n        return append(re_arrange_array(arr[:n-1], n-1), arr[n-1])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000014468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000014468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc0000242d0, 0x1, 0x5, 0x1, 0x40d40a, 0x2ba170cc7968, 0x0)\n\t/tmp/tmpau7leb4z_test.go:17 +0x3b4\ncommand-line-arguments_test.re_arrange_array(0xc0000242d0, 0x2, 0x5, 0x2, 0x2ba170cc7968, 0x0, 0xa0)\n\t/tmp/tmpau7leb4z_test.go:21 +0x133\ncommand-line-arguments_test.re_arrange_array(0xc0000242d0, 0x3, 0x5, 0x3, 0x40d8fb, 0x58, 0x14)\n\t/tmp/tmpau7leb4z_test.go:21 +0x133\ncommand-line-arguments_test.re_arrange_array(0xc0000242d0, 0x4, 0x5, 0x4, 0x6204a0, 0x0, 0xc0000c4e50)\n\t/tmp/tmpau7leb4z_test.go:23 +0x2c5\ncommand-line-arguments_test.re_arrange_array(0xc0000242d0, 0x5, 0x5, 0x5, 0xc0000e4000, 0xb, 0x14)\n\t/tmp/tmpau7leb4z_test.go:23 +0x2c5\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000001380)\n\t/tmp/tmpau7leb4z_test.go:35 +0x14e\ntesting.tRunner(0xc000001380, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j+1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpnx9swia4_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpnx9swia4_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpnx9swia4_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    var i int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    if i == n {\n        return arr\n    }\n    var j int\n    for j = i + 1; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j] = arr[i]\n            j++\n        }\n    }\n    for i = j; i < n; i++ {\n        if arr[i] > 0 {\n            arr[j] = arr[i]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpnd9istkk_test.go:50: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpnd9istkk_test.go:50: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=13) %!s(int=15) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpnd9istkk_test.go:50: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=85) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{-arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], -arr[1]}\n        }\n        if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], -arr[0]}\n        }\n        if arr[0] >= 0 && arr[1] >= 0 {\n            return []int{-arr[0], -arr[1]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], -arr[2]}\n        }\n        if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], -arr[1]}\n        }\n        if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n            return []int{arr[0], -arr[2], -arr[1]}\n        }\n        if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], -arr[0]}\n        }\n        if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[1], -arr[0], -arr[2]}\n        }\n        if arr[0] >= 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[2], -arr[0], -arr[1]}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122855,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9o4vdyw8_test.go:56:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j = i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        }\n        arr[0], arr[1] = arr[1], arr[0]\n        return arr\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] >= 0 {\n            return arr\n        }\n        if arr[0] >= 0 && arr[1] < 0 {\n            arr[0], arr[1] = arr[1], arr[0]\n            return arr\n        }\n        if arr[0] >= 0 && arr[1] >= 0 {\n            arr[0], arr[1] = arr[1], arr[0]\n            return arr\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpnd4tsttx_test.go:54: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpnd4tsttx_test.go:54: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpnd4tsttx_test.go:54: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc0001b8040, 0x1, 0x1, 0x1, 0x2b1cf2ba45b0, 0xaa, 0x2b1cf2ba4528)\n\t/tmp/tmpycw5ur2m_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc0001b8038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8030, 0x3, 0x3, 0x3, 0x2b1cf287dd00, 0x20300000000000, 0x2b1cf2a6ffff)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8020, 0x5, 0x5, 0x5, 0xc00008cd18, 0x417993, 0x2b1cf2ba3b10)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b1ccbf10a68, 0xf)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008ce50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8000, 0x9, 0x9, 0x9, 0x0, 0xc00019e068, 0x4cd164)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000186300)\n\t/tmp/tmpycw5ur2m_test.go:34 +0xc2\ntesting.tRunner(0xc000186300, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.co",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpr7e4fzg9_test.go:43: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpr7e4fzg9_test.go:43: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpr7e4fzg9_test.go:43: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 || n == 0 {\n        return arr\n    }\n\n    // find the first positive number\n    i := 0\n    for ; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n\n    // if all numbers are negative, return\n    if i == n {\n        return arr\n    }\n\n    // find the first negative number\n    j := i + 1\n    for ; j < n; j++ {\n        if arr[j] < 0 {\n            break\n        }\n    }\n\n    // if all numbers are positive, return\n    if j == n {\n        return arr\n    }\n\n    // swap\n    for i < j {\n        arr[i], arr[j] = arr[j], arr[i]\n        i++\n        j++\n        for ; i < n; i++ {\n            if arr[i] >= 0 {\n                break\n            }\n        }\n        for ; j < n; j++ {\n            if arr[j] < 0 {\n                break\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [9] with length 9 [recovered]\n\tpanic: runtime error: index out of range [9] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536460, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536460, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc00001c140, 0x9, 0x9, 0x9, 0x0, 0xc00001a1f0, 0x4cd164)\n\t/tmp/tmpkd48ggmn_test.go:42 +0x19f\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000001380)\n\t/tmp/tmpkd48ggmn_test.go:67 +0xc2\ntesting.tRunner(0xc000001380, 0x54f328)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        } else if arr[0] >= 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        } else {\n            return []int{arr[2], arr[1], arr[0]}\n        }\n    }\n    if n ==\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122855,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwrv9o_l3_test.go:51:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp03h42ydq_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp03h42ydq_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp03h42ydq_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[n-1] < 0 {\n        arr[n-1], arr[n-2] = arr[n-2], arr[n-1]\n    }\n    return re_arrange_array(arr, n-1)\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpq62ykzaa_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-7) %!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpq62ykzaa_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=12) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpq62ykzaa_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i - 1\n            for j >= 0 && arr[j] > 0 {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                j--\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpmk8xeh37_test.go:43: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpzj_rhrjw_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpzj_rhrjw_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpzj_rhrjw_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        }\n        return []int{-arr[0], arr[0]}\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] > 0 {\n            return []int{arr[0], arr[1]}\n        }\n        if arr[0] > 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        }\n        return []int{-arr[0], -arr[1], arr[0], arr[1]}\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] < 0 && arr[2] > 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        }\n        if arr[0] < 0 && arr[1] > 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        }\n        if arr[0] < 0 && arr[1] > 0 && arr[2] > 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        }\n        if arr[0] > 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        }\n        if arr[0] > 0 && arr[1] < 0 && arr[2] > 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        }\n        if arr[0] > 0 && arr[1] > 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        }\n        return []int{-arr[0], -arr[1], -arr[2], arr\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122855,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0ku2e6tb_test.go:53:52: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] > 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpqxpwe102_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpqxpwe102_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpqxpwe102_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] > 0 {\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpazh23sww_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                return arr\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpeycqyx1c_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpeycqyx1c_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpeycqyx1c_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 || n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] >= 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpza7qz091_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpza7qz091_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpza7qz091_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        }\n        if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        }\n        if arr[0] >= 0 && arr[1] >= 0 {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n > 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n        }\n        if arr[0] < 0 && arr[1] >= 0 {\n            return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n        }\n        if arr[0] >= 0 && arr[1] < 0 {\n            return append([]int{arr[1]}, re_arrange_array(arr[0:1], 1)...)\n        }\n        if arr[0] >= 0 && arr[1] >= 0 {\n            return append([]int{arr[1]}, re_arrange_array(arr[0:1], 1)...)\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc00001c148, 0x1, 0x8, 0x1, 0x40d8fb, 0x5fa3c0, 0xd0)\n\t/tmp/tmpzgzfc2o0_test.go:17 +0x885\ncommand-line-arguments_test.re_arrange_array(0xc00001c148, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc000092650)\n\t/tmp/tmpzgzfc2o0_test.go:42 +0x365\ncommand-line-arguments_test.re_arrange_array(0xc00001c140, 0x9, 0x9, 0x9, 0x0, 0xc00001a1f0, 0x4cd164)\n\t/tmp/tmpzgzfc2o0_test.go:39 +0x48a\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000001380)\n\t/tmp/tmpzgzfc2o0_test.go:58 +0xc2\ntesting.tRunner(0xc000001380, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpsk7w36n4_test.go:36: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 1 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    var i int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n\n    var j int\n    for j = i + 1; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 {\n        return arr\n    }\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    j = i + 1\n    for j < n {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n        j++\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122858,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122858,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpq5etm6xr_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpq5etm6xr_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpq5etm6xr_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] > 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpcj3vzt_d_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpcj3vzt_d_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpcj3vzt_d_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc0001b8040, 0x1, 0x1, 0x1, 0x2b1cf2ba45b0, 0xaa, 0x2b1cf2ba4528)\n\t/tmp/tmpycw5ur2m_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc0001b8038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8030, 0x3, 0x3, 0x3, 0x2b1cf287dd00, 0x20300000000000, 0x2b1cf2a6ffff)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8020, 0x5, 0x5, 0x5, 0xc00008cd18, 0x417993, 0x2b1cf2ba3b10)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b1ccbf10a68, 0xf)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008ce50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8000, 0x9, 0x9, 0x9, 0x0, 0xc00019e068, 0x4cd164)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000186300)\n\t/tmp/tmpycw5ur2m_test.go:34 +0xc2\ntesting.tRunner(0xc000186300, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.co",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpsk7w36n4_test.go:36: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i + 1\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1_8q9olq_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1_8q9olq_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1_8q9olq_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpik2kzmbu_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        } else if arr[0] >= 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        } else {\n            return []int{arr[2], arr[1], arr[0]}\n        }\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122858,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzgnsv3wf_test.go:51:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    j := n-1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] >= 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmps7d2ciz9_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmps7d2ciz9_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmps7d2ciz9_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{-arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append([]int{-arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpl62xleyo_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6) %!s(int=-7) %!s(int=-8) %!s(int=-9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpl62xleyo_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-12) %!s(int=-14) %!s(int=-26) %!s(int=-13) %!s(int=-15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpl62xleyo_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-10) %!s(int=-24) %!s(int=-36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=-85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 0 {\n        return arr\n    }\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            arr[0], arr[1] = arr[1], arr[0]\n            return arr\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] >= 0 {\n            return arr\n        }\n        if arr[0] >= 0 && arr[1] < 0 {\n            arr[0], arr[1] = arr[1], arr[0]\n            return arr\n        }\n        if arr[0] >= 0 && arr[1] >= 0 {\n            arr[0], arr[1] = arr[1], arr[0]\n            return arr\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            arr[1], arr[2] = arr[2], arr[1]\n            return arr\n        }\n        if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n            arr[0], arr[1] = arr[1], arr[0]\n            return arr\n        }\n        if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            arr[0], arr[1] = arr[1], arr[0]\n            return arr\n        }\n        if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            arr[0], arr[1] = arr[1], arr[0]\n            arr[1], arr[2] = arr[2], arr[1]\n            return arr\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122858,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpr6ast80l_test.go:63:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 1 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    j = i + 1\n    for j < n {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n        j++\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        var j int\n        for j = i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n        if j == n {\n            break\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1g9_r1qs_test.go:29: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1g9_r1qs_test.go:29: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1g9_r1qs_test.go:29: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    var i int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n\n    var j int\n    for j = i + 1; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 0 {\n        return arr\n    }\n    if n == 0 {\n        return []int{}\n    }\n    if len(arr) == 0 {\n        return arr\n    }\n    if len(arr) == 1 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                i++\n                j--\n            } else {\n                j--\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmph2fakpjq_test.go:58: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmph2fakpjq_test.go:58: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmph2fakpjq_test.go:58: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = i + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpz6btka9i_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpz6btka9i_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpz6btka9i_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j-1], arr[j] = arr[j], arr[j-1]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp3pwy5iv9_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if arr[n-1] < 0 {\n        re_arrange_array(arr, n-1)\n    } else {\n        for i := n; i < len(arr); i++ {\n            if arr[i] < 0 {\n                arr[i], arr[n-1] = arr[n-1], arr[i]\n                break\n            }\n        }\n        re_arrange_array(arr, n-1)\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp33evtzuj_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=2) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp33evtzuj_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-14) %!s(int=12) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp33evtzuj_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-42) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        }\n        return []int{-arr[0], arr[0]}\n    }\n    if arr[n-1] < 0 {\n        return append([]int{arr[n-1]}, re_arrange_array(arr[:n-1], n-1)...)\n    }\n    return append(re_arrange_array(arr[:n-1], n-1), arr[n-1])\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmppk0lzzv3_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-7) %!s(int=-3) %!s(int=-1) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmppk0lzzv3_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=-12) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmppk0lzzv3_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=-10) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                break\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpt5a6894z_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpt5a6894z_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpt5a6894z_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n >= len(arr) {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpfowsybwk_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpfowsybwk_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpfowsybwk_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp79iczfsb_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp79iczfsb_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp79iczfsb_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    // find the first positive element\n    i := 0\n    for ; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    // if all elements are negative, return\n    if i == n {\n        return arr\n    }\n    // find the first negative element\n    j := i\n    for ; j < n; j++ {\n        if arr[j] < 0 {\n            break\n        }\n    }\n    // if all elements are positive, return\n    if j == n {\n        return arr\n    }\n    // swap the elements\n    for i < j {\n        arr[i], arr[j] = arr[j], arr[i]\n        for ; i < n; i++ {\n            if arr[i] >= 0 {\n                break\n            }\n        }\n        for ; j < n; j++ {\n            if arr[j] < 0 {\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [9] with length 9 [recovered]\n\tpanic: runtime error: index out of range [9] with length 9\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536460, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536460, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc00001c140, 0x9, 0x9, 0x9, 0x0, 0xc00001a1f0, 0x4cd164)\n\t/tmp/tmpqh8z2xdh_test.go:37 +0x18a\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000001380)\n\t/tmp/tmpqh8z2xdh_test.go:59 +0xc2\ntesting.tRunner(0xc000001380, 0x54f328)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            arr[0], arr[1] = arr[1], arr[0]\n            return arr\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    i := 0\n    j := n - 1\n\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            j--\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpehbo3fot_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=5) %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpehbo3fot_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpehbo3fot_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=85) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    j = i + 1\n    for j < n {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n        j++\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp03h42ydq_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp03h42ydq_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp03h42ydq_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n >= len(arr) {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpfowsybwk_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpfowsybwk_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpfowsybwk_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    j = i + 1\n    for j < n {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n        j++\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpsk7w36n4_test.go:36: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n                j++\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122860,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpjt914ydp_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpjt914ydp_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpjt914ydp_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n >= len(arr) {\n        return arr\n    }\n    i := 0\n    j := n\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122860,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpmomxsswd_test.go:47: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpmomxsswd_test.go:47: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpmomxsswd_test.go:47: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n >= len(arr) {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpfowsybwk_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpfowsybwk_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpfowsybwk_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpeoc41via_test.go:43: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpeoc41via_test.go:43: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpeoc41via_test.go:43: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp2ad8823o_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpb4tt7t5a_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc0001b8040, 0x1, 0x1, 0x1, 0x2b1cf2ba45b0, 0xaa, 0x2b1cf2ba4528)\n\t/tmp/tmpycw5ur2m_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc0001b8038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8030, 0x3, 0x3, 0x3, 0x2b1cf287dd00, 0x20300000000000, 0x2b1cf2a6ffff)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8020, 0x5, 0x5, 0x5, 0xc00008cd18, 0x417993, 0x2b1cf2ba3b10)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b1ccbf10a68, 0xf)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008ce50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8000, 0x9, 0x9, 0x9, 0x0, 0xc00019e068, 0x4cd164)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000186300)\n\t/tmp/tmpycw5ur2m_test.go:34 +0xc2\ntesting.tRunner(0xc000186300, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.co",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpsk7w36n4_test.go:36: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 0 {\n        return arr\n    }\n    if n >= len(arr) {\n        n = len(arr) - 1\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{-arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append([]int{-arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpl62xleyo_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6) %!s(int=-7) %!s(int=-8) %!s(int=-9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpl62xleyo_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-12) %!s(int=-14) %!s(int=-26) %!s(int=-13) %!s(int=-15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpl62xleyo_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-10) %!s(int=-24) %!s(int=-36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=-85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] > 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpcj3vzt_d_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpcj3vzt_d_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpcj3vzt_d_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j = i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n        if j == n {\n            break\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpsk7w36n4_test.go:36: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var negative []int\n    var positive []int\n    for _, v := range arr {\n        if v < 0 {\n            negative = append(negative, v)\n        } else {\n            positive = append(positive, v)\n        }\n    }\n    return append(negative, positive...)\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpc5o3wcx0_test.go:37: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpcad9lr1z_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-7) %!s(int=-3) %!s(int=-1) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpcad9lr1z_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpcad9lr1z_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] >= 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] < 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1g9_r1qs_test.go:29: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1g9_r1qs_test.go:29: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-14) %!s(int=-26) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1g9_r1qs_test.go:29: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 || n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpf0i1w2xu_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpf0i1w2xu_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpf0i1w2xu_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpik2kzmbu_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j = i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpamzxfgo4_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpamzxfgo4_test.go:39: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpamzxfgo4_test.go:39: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpzj_rhrjw_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpzj_rhrjw_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpzj_rhrjw_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j] = arr[j-1]\n            }\n            arr[j] = arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpfnof7glv_test.go:37: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=6) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpfnof7glv_test.go:37: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=12) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpfnof7glv_test.go:37: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=36) %!s(int=36) %!s(int=36) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpsk7w36n4_test.go:36: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 1 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 {\n            i++\n        }\n        for arr[j] > 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpy8bejcd2_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpy8bejcd2_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpy8bejcd2_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmplr2awakx_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmplr2awakx_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmplr2awakx_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1dkflq7__test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1dkflq7__test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1dkflq7__test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var neg_arr []int\n    var pos_arr []int\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            neg_arr = append(neg_arr, arr[i])\n        } else {\n            pos_arr = append(pos_arr, arr[i])\n        }\n    }\n    return append(neg_arr, pos_arr...)\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp06z5v4mg_test.go:37: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) == 0 || n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 && i < j {\n            i++\n        }\n        for arr[j] >= 0 && i < j {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpsgivuqbl_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpsgivuqbl_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpsgivuqbl_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 && arr[j] > 0 {\n            i++\n            j--\n        } else if arr[i] > 0 && arr[j] > 0 {\n            j--\n        } else if arr[i] < 0 && arr[j] < 0 {\n            i++\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp_9skw5ne_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp_9skw5ne_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp_9skw5ne_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpsk7w36n4_test.go:36: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpagvwy2_l_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=5) %!s(int=6) %!s(int=4) %!s(int=8) %!s(int=9) %!s(int=2)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpagvwy2_l_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15) %!s(int=12)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpagvwy2_l_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=85) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i int\n    var j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpkumlsnta_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpkumlsnta_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpkumlsnta_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122862,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpco0kkt97_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpco0kkt97_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpco0kkt97_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        j = i + 1\n        for j < n {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n            j++\n        }\n        if j == n {\n            break\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122862,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpik2kzmbu_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        for j = 0; j < n - i - 1; j++ {\n            if arr[j] > 0 && arr[j + 1] < 0 {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122863,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmplg5k4npk_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n - 1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n - 1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122863,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc0001c4040, 0x1, 0x1, 0x1, 0x0, 0xc000000180, 0x203000)\n\t/tmp/tmp98epv_fx_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc0001c4038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmp98epv_fx_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001c4030, 0x3, 0x3, 0x3, 0x2acb699a3300, 0x20300000000000, 0x2acb69b94fff)\n\t/tmp/tmp98epv_fx_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001c4028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmp98epv_fx_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001c4020, 0x5, 0x5, 0x5, 0xc00008c518, 0x417993, 0x2acb69cc8a00)\n\t/tmp/tmp98epv_fx_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001c4018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmp98epv_fx_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001c4010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2acb43035a68, 0xf)\n\t/tmp/tmp98epv_fx_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001c4008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008c650)\n\t/tmp/tmp98epv_fx_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001c4000, 0x9, 0x9, 0x9, 0x0, 0xc00019a078, 0x4cd164)\n\t/tmp/tmp98epv_fx_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc0001a0300)\n\t/tmp/tmp98epv_fx_test.go:34 +0xc2\ntesting.tRunner(0xc0001a0300, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp2ad8823o_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc0001b8040, 0x1, 0x1, 0x1, 0x2b1cf2ba45b0, 0xaa, 0x2b1cf2ba4528)\n\t/tmp/tmpycw5ur2m_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc0001b8038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8030, 0x3, 0x3, 0x3, 0x2b1cf287dd00, 0x20300000000000, 0x2b1cf2a6ffff)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8020, 0x5, 0x5, 0x5, 0xc00008cd18, 0x417993, 0x2b1cf2ba3b10)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b1ccbf10a68, 0xf)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008ce50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8000, 0x9, 0x9, 0x9, 0x0, 0xc00019e068, 0x4cd164)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000186300)\n\t/tmp/tmpycw5ur2m_test.go:34 +0xc2\ntesting.tRunner(0xc000186300, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.co",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122863,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            j := i - 1\n            for j >= 0 && arr[j] > 0 {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                j--\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122863,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp53g4dw2l_test.go:37: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpamzxfgo4_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpamzxfgo4_test.go:39: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpamzxfgo4_test.go:39: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 && arr[j] > 0 {\n            i++\n            j--\n        } else if arr[i] < 0 && arr[j] < 0 {\n            i++\n        } else if arr[i] > 0 && arr[j] > 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n            j--\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122863,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpdz0y12ap_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpdz0y12ap_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpdz0y12ap_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.017s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j = i; j > 0 && arr[j-1] > 0; j-- {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpsk7w36n4_test.go:36: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc00001c180, 0x1, 0x1, 0x1, 0x0, 0xc000000180, 0x203000)\n\t/tmp/tmpzronptr6_test.go:18 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc00001c178, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpzronptr6_test.go:25 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc00001c170, 0x3, 0x3, 0x3, 0x0, 0x0, 0xc0000924b0)\n\t/tmp/tmpzronptr6_test.go:23 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc00001c168, 0x4, 0x4, 0x4, 0x841, 0x0, 0x58a7bf)\n\t/tmp/tmpzronptr6_test.go:25 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc00001c160, 0x5, 0x5, 0x5, 0x5fa340, 0x609a20, 0xc000000007)\n\t/tmp/tmpzronptr6_test.go:25 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc00001c158, 0x6, 0x6, 0x6, 0x0, 0x58a7bf, 0x3b)\n\t/tmp/tmpzronptr6_test.go:25 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc00001c150, 0x7, 0x7, 0x7, 0x40d8fb, 0x5fa340, 0xd0)\n\t/tmp/tmpzronptr6_test.go:23 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc00001c148, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc000092650)\n\t/tmp/tmpzronptr6_test.go:25 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc00001c140, 0x9, 0x9, 0x9, 0x0, 0xc00001a1f0, 0x4cd164)\n\t/tmp/tmpzronptr6_test.go:23 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000001380)\n\t/tmp/tmpzronptr6_test.go:36 +0xc2\ntesting.tRunner(0xc000001380, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i+1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if len(arr) < n {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122863,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpr8_xwij7_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpr8_xwij7_test.go:39: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpr8_xwij7_test.go:39: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    if len(arr) == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpdtbyanpf_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpdtbyanpf_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpdtbyanpf_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] >= 0 {\n                    arr[j], arr[j-1] = arr[j-1], arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp2ad8823o_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122861,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmplr2awakx_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmplr2awakx_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmplr2awakx_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n                j++\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp8qrr3pf1_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp8qrr3pf1_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp8qrr3pf1_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i, j := 0, n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpseh4ld3s_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpseh4ld3s_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpseh4ld3s_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] >= 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] < 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpn9b2br0a_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpn9b2br0a_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpn9b2br0a_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 1 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n\n    for j = i + 1; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    var i, j int = 0, n - 1\n    for i < j {\n        for i < j && arr[i] < 0 {\n            i++\n        }\n        for i < j && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpe9z5br77_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpe9z5br77_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpe9z5br77_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122859,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpik2kzmbu_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp8za0v5g6_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-3) %!s(int=-7) %!s(int=-1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp8za0v5g6_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=-26) %!s(int=-14) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp8za0v5g6_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=-39) %!s(int=-78) %!s(int=-42) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    i := 0\n    j := n - 1\n    for i < j {\n        for arr[i] < 0 {\n            i++\n        }\n        for arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp6xtr6enk_test.go:42: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp6xtr6enk_test.go:42: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp6xtr6enk_test.go:42: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc0001b8040, 0x1, 0x1, 0x1, 0x2b1cf2ba45b0, 0xaa, 0x2b1cf2ba4528)\n\t/tmp/tmpycw5ur2m_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc0001b8038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8030, 0x3, 0x3, 0x3, 0x2b1cf287dd00, 0x20300000000000, 0x2b1cf2a6ffff)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8020, 0x5, 0x5, 0x5, 0xc00008cd18, 0x417993, 0x2b1cf2ba3b10)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b1ccbf10a68, 0xf)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008ce50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8000, 0x9, 0x9, 0x9, 0x0, 0xc00019e068, 0x4cd164)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000186300)\n\t/tmp/tmpycw5ur2m_test.go:34 +0xc2\ntesting.tRunner(0xc000186300, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.co",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    var i int = 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                return arr\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp419k0m78_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp419k0m78_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp419k0m78_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i < n {\n        if arr[i] < 0 {\n            i++\n        } else {\n            j = i + 1\n            for j < n {\n                if arr[j] < 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    i++\n                    j++\n                    break\n                }\n                j++\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122892,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    for j = i + 1; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    var temp int\n    for i = 0; i < n; i++ {\n        for j = 0; j < n-i-1; j++ {\n            if arr[j] > 0 && arr[j+1] < 0 {\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpl5g7qcn3_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n < 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp3drmr1i1_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp3drmr1i1_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp3drmr1i1_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        j = i\n        for j < n && arr[j] >= 0 {\n            j++\n        }\n        if j < n {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j = i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n        if j == n {\n            break\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmproli4y1m_test.go:40: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    // Write your code here\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i; j > 0; j-- {\n                if arr[j-1] < 0 {\n                    break\n                }\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpfl1yptne_test.go:39: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), arr[0])\n    }\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364e0, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.re_arrange_array(0xc0001b8040, 0x1, 0x1, 0x1, 0x2b1cf2ba45b0, 0xaa, 0x2b1cf2ba4528)\n\t/tmp/tmpycw5ur2m_test.go:17 +0x345\ncommand-line-arguments_test.re_arrange_array(0xc0001b8038, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8030, 0x3, 0x3, 0x3, 0x2b1cf287dd00, 0x20300000000000, 0x2b1cf2a6ffff)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8028, 0x4, 0x4, 0x4, 0x400, 0x400, 0x50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8020, 0x5, 0x5, 0x5, 0xc00008cd18, 0x417993, 0x2b1cf2ba3b10)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8018, 0x6, 0x6, 0x6, 0x6517c8, 0x58a7bf, 0x3b)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8010, 0x7, 0x7, 0x7, 0x40d8fb, 0x2b1ccbf10a68, 0xf)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.re_arrange_array(0xc0001b8008, 0x8, 0x8, 0x8, 0x6204a0, 0x0, 0xc00008ce50)\n\t/tmp/tmpycw5ur2m_test.go:23 +0x268\ncommand-line-arguments_test.re_arrange_array(0xc0001b8000, 0x9, 0x9, 0x9, 0x0, 0xc00019e068, 0x4cd164)\n\t/tmp/tmpycw5ur2m_test.go:21 +0x145\ncommand-line-arguments_test.TestRe_Arrange_Array(0xc000186300)\n\t/tmp/tmpycw5ur2m_test.go:34 +0xc2\ntesting.tRunner(0xc000186300, 0x54f3a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.co",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{0}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return arr\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        } else if arr[0] >= 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        } else {\n            return arr\n        }\n    }\n    if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n        return append([]int{\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7xb1kheu_test.go:50:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            arr[0], arr[1] = arr[1], arr[0]\n            return arr\n        }\n    }\n    if arr[n-1] < 0 {\n        return re_arrange_array(arr, n-1)\n    }\n    if arr[n-1] >= 0 {\n        arr[n-1], arr[n-2] = arr[n-2], arr[n-1]\n        return re_arrange_array(arr, n-1)\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmpn4srqxti_test.go:46: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=9) %!s(int=2) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=-7) %!s(int=8)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmpn4srqxti_test.go:46: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=15) %!s(int=-14) %!s(int=-26) %!s(int=13)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmpn4srqxti_test.go:46: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=85) %!s(int=24) %!s(int=36) %!s(int=-42) %!s(int=-39) %!s(int=-78)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j := i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122857,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n <= 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp1ze66kg8_test.go:43: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp1ze66kg8_test.go:43: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp1ze66kg8_test.go:43: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        }\n        return []int{-arr[0]}\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        }\n        if arr[0] < 0 && arr[1] > 0 {\n            return []int{arr[0], -arr[1]}\n        }\n        if arr[0] > 0 && arr[1] < 0 {\n            return []int{-arr[0], arr[1]}\n        }\n        return []int{-arr[0], -arr[1]}\n    }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    }\n    return append([]int{-arr[0]}, re_arrange_array(arr[1:], n-1)...)\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp9wti6o47_test.go:52: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-2) %!s(int=-3) %!s(int=-4) %!s(int=-5) %!s(int=-6) %!s(int=-7) %!s(int=-8) %!s(int=-9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp9wti6o47_test.go:52: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-12) %!s(int=-14) %!s(int=-26) %!s(int=-13) %!s(int=-15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp9wti6o47_test.go:52: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-10) %!s(int=-24) %!s(int=-36) %!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=-85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            j := i - 1\n            for j >= 0 && arr[j] >= 0 {\n                arr[j+1] = arr[j]\n                j--\n            }\n            arr[j+1] = arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp4ggvyakh_test.go:38: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=6) %!s(int=2) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp4ggvyakh_test.go:38: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=12) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp4ggvyakh_test.go:38: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=36) %!s(int=36) %!s(int=36) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    j = i + 1\n    for j < n {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n        j++\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] >= 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] >= 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        } else if arr[0] < 0 && arr[1] >= 0 && arr[2] >= 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        } else if arr[0] >= 0 && arr[1] < 0 && arr[2] >= 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        } else if arr[0] >= 0 && arr[1] >= 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        } else {\n            return []int{arr[2], arr[1], arr[0]}\n        }\n    }\n    return arr\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp33vkegr3_test.go:52:6: expected '(', found TestRe_Arrange_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp2j9uo8yj_test.go:44: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp2j9uo8yj_test.go:44: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp2j9uo8yj_test.go:44: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    i := 0\n    j := n - 1\n    for i < j {\n        for i < n && arr[i] < 0 {\n            i++\n        }\n        for j >= 0 && arr[j] >= 0 {\n            j--\n        }\n        if i < j {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmprgtec5rg_test.go:41: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=-1) %!s(int=-7) %!s(int=-3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmprgtec5rg_test.go:41: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=-26) %!s(int=-14) %!s(int=12) %!s(int=13) %!s(int=15)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmprgtec5rg_test.go:41: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=-78) %!s(int=-39) %!s(int=-42) %!s(int=36) %!s(int=24) %!s(int=10) %!s(int=85)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n    if n == 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    return arr\n}\n\nfunc TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122865,
      "stdout": "--- FAIL: TestRe_Arrange_Array (0.00s)\n    --- FAIL: TestRe_Arrange_Array/test_num__0 (0.00s)\n        tmp87dmebol_test.go:45: expected '[%!s(int=-1) %!s(int=-3) %!s(int=-7) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=2) %!s(int=8) %!s(int=9)]', got '[%!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=-7) %!s(int=-3) %!s(int=-1)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__1 (0.00s)\n        tmp87dmebol_test.go:45: expected '[%!s(int=-14) %!s(int=-26) %!s(int=12) %!s(int=13) %!s(int=15)]', got '[%!s(int=12) %!s(int=13) %!s(int=15) %!s(int=-14) %!s(int=-26)]'\n    --- FAIL: TestRe_Arrange_Array/test_num__2 (0.00s)\n        tmp87dmebol_test.go:45: expected '[%!s(int=-42) %!s(int=-39) %!s(int=-78) %!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85)]', got '[%!s(int=10) %!s(int=24) %!s(int=36) %!s(int=85) %!s(int=-39) %!s(int=-78) %!s(int=-42)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}