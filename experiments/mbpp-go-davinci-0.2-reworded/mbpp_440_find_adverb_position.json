{
  "name": "mbpp_440_find_adverb_position",
  "language": "go_test.go",
  "prompt": "package find_adverb_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the first adverb and their positions in a given sentence.\nfunc find_adverb_position(text string) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Adverb_Position(t *testing.T) {\n  candidate := find_adverb_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"clearly!! we can see the sky\"), expected: []interface{}{0, 7, \"clearly\"} },\n     { actual: candidate(\"seriously!! there are many roses\"), expected: []interface{}{0, 9, \"seriously\"} },\n     { actual: candidate(\"unfortunately!! sita is going to home\"), expected: []interface{}{0, 13, \"unfortunately\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"carefully\", \"sadly\"}\n    for i, word := range adverbs {\n        if pos := text.Find(word); pos != -1 {\n            result = append(result, word, pos)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"softly\"}\n    for _, adverb := range adverbs {\n        if idx := strings.Index(text, adverb); idx != -1 {\n            result = append(result, adverb, idx)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverb_positions []int\n    var adverb_position int\n    var adverb_found bool\n    var adverb string\n    var adverb_length int\n    var adverb_index int\n    var adverb_end int\n    var adverb_end_index int\n    var adverb_start int\n    var adverb_start_index int\n    var adverb_start_found bool\n    var adverb_end_found bool\n    var adverb_found_index int\n    var adverb_found_index_end int\n    var adverb_found_index_start int\n    var adverb_found_index_start_end int\n    var adverb_found_index_start_end_index int\n    var adverb_found_index_start_end_index_end int\n    var adverb_found_index_start_end_index_end_index int\n    var adverb_found_index_start_end_index_end_index_end int\n    var adverb_found_index_start_end_index_end_index_end_index int\n    var adverb_found_index_start_end_index_end_index_end_index_end int\n    var adverb_found_index_start_end_index_end_index_end_index_end_index int\n    var adverb_found_index_start_end_index_end_index_end_index_end_index_end int\n    var adverb_found_index_start_end_index_end_index_end_index_end_index_end_index int\n    var adverb_found_index_start_end_index_end_index_end_index_end_index_end_index_end int\n    var adverb_found_index_start_end_index_end_index_end_index_end_index_end_index_end_index int\n    var adverb_found_index_start_end_index_end_index_end_index_end_index_end_index_end_index_end int\n    var adverb_found_index_start_end_index_end_index_end_index_end_index_",
    "    var adverb_position []interface{}\n    var adverb_index int\n    var adverb_word string\n    var adverb_found bool\n    var adverb_word_found bool\n    var adverb_word_index int\n    var adverb_word_length int\n    var adverb_word_position int\n    var adverb_word_position_found bool\n    var adverb_word_position_index int\n    var adverb_word_position_length int\n    var adverb_word_position_position int\n    var adverb_word_position_position_found bool\n    var adverb_word_position_position_index int\n    var adverb_word_position_position_length int\n    var adverb_word_position_position_position int\n    var adverb_word_position_position_position_found bool\n    var adverb_word_position_position_position_index int\n    var adverb_word_position_position_position_length int\n    var adverb_word_position_position_position_position int\n    var adverb_word_position_position_position_position_found bool\n    var adverb_word_position_position_position_position_index int\n    var adverb_word_position_position_position_position_length int\n    var adverb_word_position_position_position_position_position int\n    var adverb_word_position_position_position_position_position_found bool\n    var adverb_word_position_position_position_position_position_index int\n    var adverb_word_position_position_position_position_position_length int\n    var adverb_word_position_position_position_position_position_position int\n    var adverb_word_position_position_position_position_position_position_found bool\n    var adverb_word_position_position_position_position_position_position_index int\n    var adverb_word_position_position_position_position_position_position_length int\n    var adverb_word_position_position_position_position_position_position_position int\n    var adverb_word_position_position_position_position_position_position_position_found bool\n    var adverb",
    "    var adverbs []interface{}\n    var adverb string\n    var adverb_position int\n    var adverb_length int\n    var adverb_found bool\n    var adverb_end bool\n    var adverb_end_position int\n    var adverb_end_length int\n    var adverb_end_found bool\n    var adverb_end_char string\n    var adverb_end_chars []string\n    var adverb_end_chars_length int\n    var adverb_end_chars_index int\n    var adverb_end_chars_found bool\n    var adverb_end_chars_found_index int\n    var adverb_end_chars_found_length int\n    var adverb_end_chars_found_position int\n    var adverb_end_chars_found_length_position int\n    var adverb_end_chars_found_length_position_end int\n    var adverb_end_chars_found_length_position_end_char string\n    var adverb_end_chars_found_length_position_end_chars []string\n    var adverb_end_chars_found_length_position_end_chars_length int\n    var adverb_end_chars_found_length_position_end_chars_index int\n    var adverb_end_chars_found_length_position_end_chars_found bool\n    var adverb_end_chars_found_length_position_end_chars_found_index int\n    var adverb_end_chars_found_length_position_end_chars_found_length int\n    var adverb_end_chars_found_length_position_end_chars_found_position int\n    var adverb_end_chars_found_length_position_end_chars_found_length_position int\n    var adverb_end_chars_found_length_position_end_chars_found_length_position_end int\n    var adverb_end_chars_found_length_position_end_chars_found_length_position_end_char string\n    var adverb_end_ch",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"softly\", \"noisily\"}\n    for _, adverb := range adverbs {\n        if index := text.Index(adverb); index != -1 {\n            result = append(result, adverb, index)\n            break\n        }\n    }\n    return result\n}\n",
    "    var adverb_list []interface{}\n    var adverb_position []int\n    var adverb_position_list []interface{}\n    var adverb_found bool\n    var adverb_start int\n    var adverb_end int\n    var adverb_length int\n    var adverb_index int\n    var adverb_word string\n    var adverb_word_length int\n    var adverb_word_index int\n    var adverb_word_start int\n    var adverb_word_end int\n    var adverb_word_found bool\n    var adverb_word_position []int\n    var adverb_word_position_list []interface{}\n    var adverb_word_position_index int\n    var adverb_word_position_start int\n    var adverb_word_position_end int\n    var adverb_word_position_found bool\n    var adverb_word_position_length int\n    var adverb_word_position_list_length int\n    var adverb_word_position_list_index int\n    var adverb_word_position_list_start int\n    var adverb_word_position_list_end int\n    var adverb_word_position_list_found bool\n    var adverb_word_position_list_length_index int\n    var adverb_word_position_list_length_start int\n    var adverb_word_position_list_length_end int\n    var adverb_word_position_list_length_found bool\n    var adverb_word_position_list_length_length int\n    var adverb_word_position_list_length_length_index int\n    var adverb_word_position_list_length_length_start int\n    var adverb_word_position_list_length_length_end int\n    var adverb_word_position_list_length_length_found bool\n    var adverb_word_position_list_length_length_length int\n    var adverb_word_position_list_length_length_length_index int\n    var adverb_word_position_list_length_length_length_start int\n    var adverb_word_position_list_length_length",
    "    var result []interface{}\n    var adverb string\n    var position int\n    var found bool\n\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            continue\n        }\n\n        if text[i] == 'l' {\n            if text[i+1] == 'y' {\n                adverb = \"ly\"\n                position = i\n                found = true\n            }\n        }\n\n        if found {\n            result = append(result, adverb, position)\n            return result\n        }\n    }\n\n    return result\n}\n",
    "    var adverbs []string\n    var positions []int\n    var result []interface{}\n    var words []string\n\n    words = strings.Split(text, \" \")\n\n    for i, word := range words {\n        if strings.HasSuffix(word, \"ly\") {\n            adverbs = append(adverbs, word)\n            positions = append(positions, i)\n        }\n    }\n\n    result = append(result, adverbs, positions)\n    return result\n}\n",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"softly\", \"noisily\"}\n    for _, adverb := range adverbs {\n        if index := text.Index(adverb); index != -1 {\n            result = append(result, adverb, index)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverb_position int\n    var adverb_length int\n    var adverb_found bool\n    var adverb_end_position int\n    var adverb_end_found bool\n    var adverb_end_length int\n    var adverb_end_index int\n    var adverb_end_index_found bool\n    var adverb_end_index_length int\n    var adverb_end_index_position int\n    var adverb_end_index_end_position int\n    var adverb_end_index_end_found bool\n    var adverb_end_index_end_length int\n    var adverb_end_index_end_index int\n    var adverb_end_index_end_index_found bool\n    var adverb_end_index_end_index_length int\n    var adverb_end_index_end_index_position int\n    var adverb_end_index_end_index_end_position int\n    var adverb_end_index_end_index_end_found bool\n    var adverb_end_index_end_index_end_length int\n    var adverb_end_index_end_index_end_index int\n    var adverb_end_index_end_index_end_index_found bool\n    var adverb_end_index_end_index_end_index_length int\n    var adverb_end_index_end_index_end_index_position int\n    var adverb_end_index_end_index_end_index_end_position int\n    var adverb_end_index_end_index_end_index_end_found bool\n    var adverb_end_index_end_index_end_index_end_length int\n    var adverb_end_index_end_index_end_index_end_index int\n    var adverb_end_index_end_index_end_index_end_index_found bool\n    var adverb_end_index_end_index_end_index_end_index_length int\n    var adverb_end_index_end_index_end_index_end_index_position int\n    var adverb_end_",
    "    var result []interface{}\n    words := []string{\"quickly\", \"slowly\", \"rudely\", \"politely\"}\n    for _, word := range words {\n        if pos := strings.Index(text, word); pos != -1 {\n            result = append(result, word, pos)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverb_list = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"softly\"}\n\n    for _, adverb := range adverb_list {\n        if index := text.Index(adverb); index != -1 {\n            result = append(result, adverb, index)\n            break\n        }\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var adverbs []string\n    var positions []int\n\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            continue\n        }\n\n        if text[i] == 'l' && text[i+1] == 'y' {\n            adverbs = append(adverbs, text[i-1:i+2])\n            positions = append(positions, i-1)\n        }\n    }\n\n    result = append(result, adverbs)\n    result = append(result, positions)\n\n    return result\n}\n",
    "    var adverb_position []interface{}\n    var adverb_list = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"softly\", \"sweetly\"}\n    for i, word := range text {\n        for _, adverb := range adverb_list {\n            if word == adverb {\n                adverb_position = append(adverb_position, i)\n                adverb_position = append(adverb_position, adverb)\n            }\n        }\n    }\n    return adverb_position\n}\n",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"elegantly\", \"badly\"}\n    for _, adverb := range adverbs {\n        if pos := text.Find(adverb); pos != -1 {\n            result = append(result, adverb, pos)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"carefully\", \"intently\"}\n    for _, adverb := range adverbs {\n        if index := text.Index(adverb); index != -1 {\n            result = append(result, adverb, index)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"carefully\", \"intently\", \"sweetly\", \"merrily\", \"upbeat\", \"lazily\", \"happily\", \"joyfully\", \"noisily\", \"quietly\", \"eagerly\", \"patiently\", \"boldly\", \"bravely\", \"courageously\", \"foolishly\", \"gleefully\", \"gracefully\", \"jauntily\", \"jovially\", \"joyously\", \"sparklingly\", \"spiritedly\", \"sprightly\", \"zestfully\", \"zestily\"}\n    for _, adverb := range adverbs {\n        if position := text.Find(adverb); position != -1 {\n            result = append(result, adverb, position)\n            break\n        }\n    }\n    return result\n}\n",
    "    var adverb_position []interface{}\n    var adverb_position_temp []interface{}\n    var adverb_position_temp_2 []interface{}\n    var adverb_position_temp_3 []interface{}\n    var adverb_position_temp_4 []interface{}\n    var adverb_position_temp_5 []interface{}\n    var adverb_position_temp_6 []interface{}\n    var adverb_position_temp_7 []interface{}\n    var adverb_position_temp_8 []interface{}\n    var adverb_position_temp_9 []interface{}\n    var adverb_position_temp_10 []interface{}\n    var adverb_position_temp_11 []interface{}\n    var adverb_position_temp_12 []interface{}\n    var adverb_position_temp_13 []interface{}\n    var adverb_position_temp_14 []interface{}\n    var adverb_position_temp_15 []interface{}\n    var adverb_position_temp_16 []interface{}\n    var adverb_position_temp_17 []interface{}\n    var adverb_position_temp_18 []interface{}\n    var adverb_position_temp_19 []interface{}\n    var adverb_position_temp_20 []interface{}\n    var adverb_position_temp_21 []interface{}\n    var adverb_position_temp_22 []interface{}\n    var adverb_position_temp_23 []interface{}\n    var adverb_position_temp_24 []interface{}\n    var adverb_position_temp_25 []interface{}\n    var adverb_position_temp_26 []interface{}\n    var adverb_position_temp_27 []interface{}\n    var adverb_position_temp_28 []interface{}\n    var adverb_position_temp_29 []interface{}\n    var adverb_position_temp_30 []interface{}\n    var adverb_position_temp_31 []interface{}\n    var adverb_position_temp_32 []interface{}\n    var adverb_position_temp_33 []interface{}\n    var adverb_position_",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"rudely\", \"politely\", \"honestly\", \"merrily\", \"sadly\"}\n    for _, adverb := range adverbs {\n        if pos := text.Find(adverb); pos != -1 {\n            result = append(result, adverb, pos)\n            break\n        }\n    }\n    return result\n}\n"
  ]
}