{
  "name": "mbpp_390_add_string",
  "language": "go_test.go",
  "prompt": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "reworded",
  "tests": "func TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    list := list_.([]string)\n    newList := make([]string, len(list))\n    for i, v := range list {\n        newList[i] = fmt.Sprintf(myString, v)\n    }\n    return newList\n}\n",
    "    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n",
    "    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n",
    "    var new_list []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(myString, v))\n        }\n    }\n    return new_list\n}\n",
    "    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    case []float64:\n        list = make([]string, len(list_.([]float64)))\n        for i, v := range list_.([]float64) {\n            list[i] = fmt.Sprintf(\"%f\", v)\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(myString, v)\n    }\n    return list\n}\n",
    "    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n",
    "    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n",
    "    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n",
    "    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n",
    "    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n",
    "    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n",
    "    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%v%v\", v, myString)\n    }\n    return result\n}\n",
    "    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n",
    "    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n",
    "    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n",
    "    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    case []float64:\n        list = make([]string, len(list_.([]float64)))\n        for i, v := range list_.([]float64) {\n            list[i] = fmt.Sprintf(\"%f\", v)\n        }\n    }\n    for i, v := range list {\n        list[i] = v + myString\n    }\n    return list\n}\n",
    "    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n",
    "    var new_list []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%s\", myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%d\", myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%f\", myString, v))\n        }\n    }\n    return new_list\n}\n",
    "    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n",
    "    list := list_.([]int)\n    result := make([]string, len(list))\n    for i, item := range list {\n        result[i] = fmt.Sprintf(myString, item)\n    }\n    return result\n}\n"
  ]
}