{
  "name": "mbpp_228_all_Bits_Set_In_The_Given_Range",
  "language": "go_test.go",
  "prompt": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py",
  "prompt_terminology": "reworded",
  "tests": "func TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    var i int\n    for i = l; i <= r; i++ {\n        if (n & (1 << uint(i))) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpmi27684v_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpmi27684v_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    for i := l; i <= r; i++ {\n        if n & (1 << uint(i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpc5zz6sah_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpc5zz6sah_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var mask int = (1 << uint(r - l + 1)) - 1\n    mask = mask << uint(l - 1)\n    return (n & mask) == mask\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpaeib9dej_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpaeib9dej_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    var i int\n    for i = l; i <= r; i++ {\n        if (n & (1 << uint(i))) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpmi27684v_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpmi27684v_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if n & (1 << i) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmp1gd1ac30_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmp1gd1ac30_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    for i := l; i <= r; i++ {\n        if (n & (1 << uint(i))) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpe1guqe0i_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpe1guqe0i_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    for i := l; i <= r; i++ {\n        if n & (1 << uint(i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpfc1kkxnp_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpfc1kkxnp_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    for i := l; i <= r; i++ {\n        if (n & (1 << uint(i))) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpe1guqe0i_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpe1guqe0i_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO: Write - Your - Code\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpzopf6gsn_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpzopf6gsn_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    for i := l; i <= r; i++ {\n        if n & (1 << uint(i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpfc1kkxnp_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpfc1kkxnp_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n   \nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123402,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpm763eiok_test.go:41:6: expected '(', found TestAll_Bits_Set_In_The_Given_Range\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if n & (1 << i) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmp1gd1ac30_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmp1gd1ac30_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if n & (1 << i) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmp1gd1ac30_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmp1gd1ac30_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if (n & (1 << i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i int\n    for i = l; i <= r; i++ {\n        if n & (1 << uint(i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpx6ai6djr_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpx6ai6djr_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if (n & (1 << i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmp64d7zpmo_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmp64d7zpmo_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var mask int = (1 << uint(r - l + 1)) - 1\n    mask = mask << uint(l - 1)\n    return (n & mask) == mask\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpaeib9dej_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpaeib9dej_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if (n & (1 << i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmp64d7zpmo_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmp64d7zpmo_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if (n & (1 << i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if (n & (1 << i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var mask int = (1 << uint(r - l + 1)) - 1\n    mask = mask << uint(l - 1)\n    return (n & mask) == mask\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpaeib9dej_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpaeib9dej_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    for i := l; i <= r; i++ {\n        if n & (1 << uint(i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpfc1kkxnp_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpfc1kkxnp_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i int\n    for i = l; i <= r; i++ {\n        if n & (1 << (i - 1)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpbnug_byr_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpbnug_byr_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var mask int = (1 << uint(r - l + 1)) - 1\n    return (n & (mask << uint(l - 1))) == 0\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if n & (1 << i) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmp1gd1ac30_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmp1gd1ac30_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    var mask int = (1 << uint(r - l + 1)) - 1\n    return (n & (mask << uint(l - 1))) == (mask << uint(l - 1))\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpddk2ngfb_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpddk2ngfb_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if n & (1 << i) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmp1gd1ac30_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmp1gd1ac30_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if (n & (1 << i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if (n & (1 << i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    for i := l; i <= r; i++ {\n        if (n & (1 << uint(i))) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmp8nf6cth5_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmp8nf6cth5_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    for i := l; i <= r; i++ {\n        if n & (1 << uint(i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpc5zz6sah_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpc5zz6sah_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if (n & (1 << i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    for i := l; i <= r; i++ {\n        if n & (1 << uint(i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpc5zz6sah_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpc5zz6sah_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpcp__x2iy_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpatkdsuaf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    for i := l; i <= r; i++ {\n        if (n & (1 << uint(i))) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpe1guqe0i_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpe1guqe0i_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510487,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmppx3giw_x_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // fmt.Printf(\"n: %b\\n\", n)\n    // fmt.Printf(\"l: %b\\n\", l)\n    // fmt.Printf(\"r: %b\\n\", r)\n    // fmt.Printf(\"n & l: %b\\n\", n & l)\n    // fmt.Printf(\"n & r: %b\\n\", n & r)\n    // fmt.Printf(\"n & (l | r): %b\\n\", n & (l | r))\n    // fmt.Printf(\"n & (l | r) == (l | r): %v\\n\", n & (l | r) == (l | r))\n    return n & (l | r) == (l | r)\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmp_3_7xeni_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmp_3_7xeni_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__2 (0.00s)\n        tmp_3_7xeni_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n    // Write your code here\n    var i uint\n    for i = uint(l); i <= uint(r); i++ {\n        if (n & (1 << i)) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123403,
      "stdout": "--- FAIL: TestAll_Bits_Set_In_The_Given_Range (0.00s)\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__0 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestAll_Bits_Set_In_The_Given_Range/test_num__1 (0.00s)\n        tmpgz9nxm3r_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}