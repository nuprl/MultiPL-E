{
  "name": "mbpp_297_flatten_list",
  "language": "go_test.go",
  "prompt": "package flatten_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to flatten a given nested list structure.\nfunc flatten_list(list1 interface{}) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFlatten_List(t *testing.T) {\n  candidate := flatten_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{0, 10, []int{20, 30}, 40, 50, []int{60, 70, 80}, []int{90, 100, 110, 120}}), expected: []int{0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120} },\n     { actual: candidate([][]int{[]int{10, 20}, []int{40}, []int{30, 56, 25}, []int{10, 20}, []int{33}, []int{40}}), expected: []int{10, 20, 40, 30, 56, 25, 10, 20, 33, 40} },\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{10, 11, 12}, []int{7, 8, 9}}), expected: []int{1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch t := list1.(type) {\n    case []interface{}:\n        for _, v := range t {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, t)\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var list []int\n    switch list1.(type) {\n    case int:\n        list = append(list, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list = append(list, flatten_list(v)...)\n        }\n    }\n    return list\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            result = append(result, v)\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var list []int\n    switch v := list1.(type) {\n    case []interface{}:\n        for _, u := range v {\n            list = append(list, flatten_list(u)...)\n        }\n    case int:\n        list = append(list, v)\n    }\n    return list\n}\n",
    "    var list []int\n    switch list1.(type) {\n    case []int:\n        list = list1.([]int)\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list = append(list, flatten_list(v)...)\n        }\n    default:\n        list = append(list, list1.(int))\n    }\n    return list\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch v := list1.(type) {\n    case int:\n        result = append(result, v)\n    case []interface{}:\n        for _, u := range v {\n            result = append(result, flatten_list(u)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            result = append(result, v)\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var list2 []int\n    switch v := list1.(type) {\n    case []interface{}:\n        for _, u := range v {\n            list2 = append(list2, flatten_list(u)...)\n        }\n    case int:\n        list2 = append(list2, v)\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        for _, v := range list {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n\n    return result\n}\n",
    "    var result []int\n    switch v := list1.(type) {\n    case []interface{}:\n        for _, val := range v {\n            result = append(result, flatten_list(val)...)\n        }\n    case int:\n        result = append(result, v)\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch v := list1.(type) {\n    case []interface{}:\n        for _, v1 := range v {\n            result = append(result, flatten_list(v1)...)\n        }\n    case int:\n        result = append(result, v)\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n        case []interface{}:\n            for _, v := range list1.([]interface{}) {\n                result = append(result, flatten_list(v)...)\n            }\n        case int:\n            result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    case int:\n        list2 = append(list2, list1.(int))\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var list []int\n    switch list1.(type) {\n    case int:\n        list = append(list, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list = append(list, flatten_list(v)...)\n        }\n    }\n    return list\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var list2 []int\n    switch list1.(type) {\n    case int:\n        list2 = append(list2, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2, flatten_list(v)...)\n        }\n    }\n    return list2\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case int:\n        result = append(result, list1.(int))\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n",
    "    var result []int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, flatten_list(v)...)\n        }\n    case int:\n        result = append(result, list1.(int))\n    }\n    return result\n}\n"
  ]
}