{
  "name": "mbpp_637_noprofit_noloss",
  "language": "go_test.go",
  "prompt": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py",
  "prompt_terminology": "reworded",
  "tests": "func TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    var profit int = sale_amount - actual_cost\n    if profit == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    return actual_cost == sale_amount\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    return actual_cost == sale_amount\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    return actual_cost == sale_amount\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    return actual_cost == sale_amount\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost < sale_amount {\n        return false\n    }\n    return true\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123492,
      "stdout": "--- FAIL: TestNoprofit_Noloss (0.00s)\n    --- FAIL: TestNoprofit_Noloss/test_num__0 (0.00s)\n        tmpkj130b0q_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost > sale_amount {\n        return false\n    }\n\n    return true\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123492,
      "stdout": "--- FAIL: TestNoprofit_Noloss (0.00s)\n    --- FAIL: TestNoprofit_Noloss/test_num__2 (0.00s)\n        tmpg4k4m_g__test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost < sale_amount {\n        return false\n    }\n    return true\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123492,
      "stdout": "--- FAIL: TestNoprofit_Noloss (0.00s)\n    --- FAIL: TestNoprofit_Noloss/test_num__0 (0.00s)\n        tmpkj130b0q_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost * sale_amount == 0 {\n        return false\n    }\n    return actual_cost * sale_amount > 0\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123492,
      "stdout": "--- FAIL: TestNoprofit_Noloss (0.00s)\n    --- FAIL: TestNoprofit_Noloss/test_num__0 (0.00s)\n        tmp4avpljoy_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestNoprofit_Noloss/test_num__2 (0.00s)\n        tmp4avpljoy_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    return actual_cost == sale_amount\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    return actual_cost == sale_amount\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    return actual_cost == sale_amount\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    }\n    return false\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n    if actual_cost == sale_amount {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510444,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}