{
  "name": "mbpp_126_sum",
  "language": "go_test.go",
  "prompt": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a%i == 0 && b%i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i:=1; i<=a; i++ {\n        if a%i == 0 && b%i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a%i == 0 && b%i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a && i <= b; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var result int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            result += i\n        }\n    }\n    return result\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var s int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            s += i\n        }\n    }\n    return s\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "--- FAIL: TestSum (0.00s)\n    --- FAIL: TestSum/test_num__0 (0.00s)\n        tmpch7pnq8y_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestSum/test_num__1 (0.00s)\n        tmpch7pnq8y_test.go:29: expected '%!s(int=93)', got '%!s(int=0)'\n    --- FAIL: TestSum/test_num__2 (0.00s)\n        tmpch7pnq8y_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i < a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var result int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            result += i\n        }\n    }\n    return result\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var result int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            result += i\n        }\n    }\n    return result\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var result int\n    for i := 1; i <= a; i++ {\n        if a%i == 0 && b%i == 0 {\n            result += i\n        }\n    }\n    return result\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var i, sum int\n    for i = 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var result int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            result += i\n        }\n    }\n    return result\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int = 0\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124346,
      "stdout": "--- FAIL: TestSum (0.00s)\n    --- FAIL: TestSum/test_num__0 (0.00s)\n        tmpch7pnq8y_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestSum/test_num__1 (0.00s)\n        tmpch7pnq8y_test.go:29: expected '%!s(int=93)', got '%!s(int=0)'\n    --- FAIL: TestSum/test_num__2 (0.00s)\n        tmpch7pnq8y_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n    var sum int\n    for i := 1; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509679,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}