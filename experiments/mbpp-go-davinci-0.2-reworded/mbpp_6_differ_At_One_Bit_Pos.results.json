{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "go_test.go",
  "prompt": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "reworded",
  "tests": "func TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c > 0 {\n        if c & 1 == 1 {\n            count++\n        }\n        c = c >> 1\n    }\n    return count == 1\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c-1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c-1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c > 0 {\n        if c & 1 == 1 {\n            count += 1\n        }\n        c = c >> 1\n    }\n    return count == 1\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c > 0 {\n        if c & 1 == 1 {\n            count++\n        }\n        c >>= 1\n    }\n    return count == 1\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c != 0 && (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    x := a ^ b\n    return (x & (x - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c-1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    return (a ^ b) & ((a ^ b) - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if (c & (c - 1)) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    return (a ^ b) & ((a ^ b) - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int\n    c = a ^ b\n    if c & (c-1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c != 0 {\n        c = c & (c - 1)\n        count++\n    }\n    return count == 1\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "--- FAIL: TestDiffer_At_One_Bit_Pos (0.00s)\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__0 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__3 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__4 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__5 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c-1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c > 0 {\n        count += c & 1\n        c = c >> 1\n    }\n    return count == 1\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    x := a ^ b\n    return (x & (x - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    if a < b {\n        a, b = b, a\n    }\n\n    var c int = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    var c int = a ^ b\n    if (c & (c - 1)) == 0 {\n        return true\n    }\n\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c-1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    if a > b {\n        a, b = b, a\n    }\n    for a > 0 {\n        if a == b {\n            return true\n        }\n        a = a >> 1\n        b = b >> 1\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "--- FAIL: TestDiffer_At_One_Bit_Pos (0.00s)\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__1 (0.00s)\n        tmp9chfyfwn_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__4 (0.00s)\n        tmp9chfyfwn_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__5 (0.00s)\n        tmp9chfyfwn_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c > 0 {\n        if c & 1 == 1 {\n            count++\n        }\n        c = c >> 1\n    }\n    return count == 1\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if (c & (c - 1)) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c > 0 {\n        if c & 1 == 1 {\n            count++\n        }\n        c = c >> 1\n    }\n    if count == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c > 0 {\n        if c & 1 == 1 {\n            count++\n        }\n        c = c >> 1\n    }\n    if count == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    c = c & (c - 1)\n    if c == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "--- FAIL: TestDiffer_At_One_Bit_Pos (0.00s)\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__0 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__3 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__4 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__5 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    return (a ^ b) & ((a ^ b) - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    if c & (c-1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    if a == 0 || b == 0 {\n        return false\n    }\n\n    if a == 1 || b == 1 {\n        return false\n    }\n\n    if a == 2 || b == 2 {\n        return false\n    }\n\n    if a == 3 || b == 3 {\n        return false\n    }\n\n    if a == 4 || b == 4 {\n        return false\n    }\n\n    if a == 5 || b == 5 {\n        return false\n    }\n\n    if a == 6 || b == 6 {\n        return false\n    }\n\n    if a == 7 || b == 7 {\n        return false\n    }\n\n    if a == 8 || b == 8 {\n        return false\n    }\n\n    if a == 9 || b == 9 {\n        return false\n    }\n\n    if a == 10 || b == 10 {\n        return false\n    }\n\n    if a == 11 || b == 11 {\n        return false\n    }\n\n    if a == 12 || b == 12 {\n        return false\n    }\n\n    if a == 13 || b == 13 {\n        return false\n    }\n\n    if a == 14 || b == 14 {\n        return false\n    }\n\n    if a == 15 || b == 15 {\n        return false\n    }\n\n    if a == 16 || b == 16 {\n        return false\n    }\n\n    if a == 17 || b == 17 {\n        return false\n    }\n\n    if a == 18 || b == 18 {\n        return false\n    }\n\n    if a == 19 || b == 19 {\n        return false\n    }\n\n    if a == 20 || b == 20 {\n        return false\n    }\n\n    if a == 21 || b == 21 {\n        return false\n    }\n\n    if a == 22 || b == 22 {\n        return false\n    }\n\n    if a == 23 || b == 23 {\n        return false\n    }\n\n    if a == 24 || b == 24 {\n        return false\n    }\n\n    if a == 25 || b == 25 {\n        return false\n    }\n\n    if a == 26 || b == 26 {\n        return false\n    }\n\n    if a == 27 || b == 27 {\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123438,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5i50p4zq_test.go:124:6: expected '(', found TestDiffer_At_One_Bit_Pos\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c > 0 {\n        if c & 1 == 1 {\n            count++\n        }\n        c = c >> 1\n    }\n    return count == 1\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c-1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    return (a ^ b) & ((a ^ b) - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c-1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    // Write your code here\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c != 0 {\n        c = c & (c - 1)\n        count++\n    }\n    if count == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c-1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    xor := a ^ b\n    return xor & (xor - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    var count int = 0\n    for c != 0 {\n        count += c & 1\n        c >>= 1\n    }\n    return count == 1\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "--- FAIL: TestDiffer_At_One_Bit_Pos (0.00s)\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__0 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__3 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__4 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__5 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "--- FAIL: TestDiffer_At_One_Bit_Pos (0.00s)\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__0 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__3 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__4 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__5 (0.00s)\n        tmp1ka3domz_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return ((c & (c - 1)) == 0)\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if (c & (c - 1)) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    return (c & (c-1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    var c int = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    count := 0\n    for c > 0 {\n        if c & 1 == 1 {\n            count++\n        }\n        c = c >> 1\n    }\n    return count == 1\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    if a > b {\n        a, b = b, a\n    }\n\n    if a == 0 {\n        return (b & (b - 1)) == 0\n    }\n\n    for a != 0 {\n        if a == b {\n            return true\n        }\n        a >>= 1\n        b >>= 1\n    }\n\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "--- FAIL: TestDiffer_At_One_Bit_Pos (0.00s)\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__1 (0.00s)\n        tmpuc79hwrd_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__4 (0.00s)\n        tmpuc79hwrd_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestDiffer_At_One_Bit_Pos/test_num__5 (0.00s)\n        tmpuc79hwrd_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c == 0 {\n        return false\n    }\n    if c & (c-1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int\n    c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123442,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    var c int = a ^ b\n    if c & (c-1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return (c & (c - 1)) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    if a == b {\n        return false\n    }\n\n    c := a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n\n    return false\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123440,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n    c := a ^ b\n    return c & (c - 1) == 0\n}\n\nfunc TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}