{
  "name": "mbpp_167_next_power_of_2",
  "language": "go_test.go",
  "prompt": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "func TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count int\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var p int = 1\n    for p < n {\n        p <<= 1\n    }\n    return p\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << count\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << count\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 64; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint = 0\n    for n > 0 {\n        n = n >> 1\n        i++\n    }\n    return 1 << i\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < uint(n); i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n",
    "    if n < 0 {\n        return 0\n    }\n\n    if n == 0 {\n        return 1\n    }\n\n    if n & (n - 1) == 0 {\n        return n\n    }\n\n    var i uint = 0\n    for n > 0 {\n        n = n >> 1\n        i++\n    }\n\n    return 1 << i\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n != 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n"
  ]
}