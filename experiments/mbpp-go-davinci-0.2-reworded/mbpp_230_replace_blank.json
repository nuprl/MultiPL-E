{
  "name": "mbpp_230_replace_blank",
  "language": "go_test.go",
  "prompt": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py",
  "prompt_terminology": "reworded",
  "tests": "func TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n",
    "    return \"\"\n}\n",
    "    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n",
    "    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n",
    "    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n",
    "    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == ' ' {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n",
    "    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n",
    "    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if string(str1[i]) == \" \" {\n            str2 += char\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n",
    "    str2 := \"\"\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n",
    "    return \"\"\n}\n",
    "    var new_str string\n    for i := 0; i < len(str1); i++ {\n        if string(str1[i]) == \" \" {\n            new_str += char\n        } else {\n            new_str += string(str1[i])\n        }\n    }\n    return new_str\n}\n",
    "    return \"\"\n}\n",
    "    var str2 string\n    for _, v := range str1 {\n        if v == ' ' {\n            str2 += char\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n"
  ]
}