{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "go_test.go",
  "prompt": "package rgb_to_hsv_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r int, g int, b int) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRgb_To_Hsv(t *testing.T) {\n  candidate := rgb_to_hsv\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(255, 255, 255), expected: []interface{}{0, 0.0, 100.0} },\n     { actual: candidate(0, 215, 0), expected: []interface{}{120.0, 100.0, 84.31372549019608} },\n     { actual: candidate(10, 215, 110), expected: []interface{}{149.26829268292684, 95.34883720930233, 84.31372549019608} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var h float64\n    var s float64\n    var v float64\n    var max float64\n    var min float64\n    var diff float64\n    var r_f float64\n    var g_f float64\n    var b_f float64\n\n    r_f = float64(r)\n    g_f = float64(g)\n    b_f = float64(b)\n\n    max = r_f\n    if g_f > max {\n        max = g_f\n    }\n    if b_f > max {\n        max = b_f\n    }\n\n    min = r_f\n    if g_f < min {\n        min = g_f\n    }\n    if b_f < min {\n        min = b_f\n    }\n\n    diff = max - min\n\n    if max == min {\n        h = 0\n    } else if max == r_f {\n        h = 60 * ((g_f - b_f) / diff)\n    } else if max == g_f {\n        h = 60 * ((b_f - r_f) / diff) + 120\n    } else if max == b_f {\n        h = 60 * ((r_f - g_f) / diff) + 240\n    }\n\n    if h < 0 {\n        h += 360\n    }\n\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n\n    v = max\n\n    return map[string]interface{}{\"h\": h, \"s\": s, \"v\": v}\n}\n",
    "    return nil\n}\n",
    "    // TODO: Implement\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // Your code goes here\n    return nil\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // TODO\n    return nil\n}\n",
    "    // Your code goes here\n    return nil\n}\n",
    "    var h int\n    var s int\n    var v int\n    var min int\n    var max int\n    var delta int\n\n    min = min(min(r, g), b)\n    max = max(max(r, g), b)\n    v = max\n\n    delta = max - min\n\n    if max != 0 {\n        s = delta * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return map[string]int{\"h\": h, \"s\": s, \"v\": v}\n    }\n\n    if r == max {\n        h = (g - b) * 60 / delta\n    } else if g == max {\n        h = 120 + (b - r) * 60 / delta\n    } else {\n        h = 240 + (r - g) * 60 / delta\n    }\n\n    if h < 0 {\n        h += 360\n    }\n\n    return map[string]int{\"h\": h, \"s\": s, \"v\": v}\n}\n",
    "    return nil\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    // Your code goes here\n    return nil\n}\n",
    "    // TODO\n    return nil\n}\n",
    "    // Your code goes here\n    return nil\n}\n",
    "    var h, s, v int\n    min := min(r, g, b)\n    max := max(r, g, b)\n    delta := max - min\n    if delta == 0 {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / delta % 6)\n    } else if max == g {\n        h = 60 * ((b - r) / delta + 2)\n    } else if max == b {\n        h = 60 * ((r - g) / delta + 4)\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max * 100\n    }\n    v = max / 255 * 100\n    return fmt.Sprintf(\"(%d, %d, %d)\", h, s, v)\n}\n",
    "    // Your code goes here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n"
  ]
}