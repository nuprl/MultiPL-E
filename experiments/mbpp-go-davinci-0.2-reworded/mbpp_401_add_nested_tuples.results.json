{
  "name": "mbpp_401_add_nested_tuples",
  "language": "go_test.go",
  "prompt": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "func TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafk_aex8_test.go:15:50: invalid operation: test_tup1[i] + test_tup2[i] (operator + not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4o_ehdaz_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmp4o_ehdaz_test.go:28 +0x1e33\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafk_aex8_test.go:15:50: invalid operation: test_tup1[i] + test_tup2[i] (operator + not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Error: Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result_tup = append(result_tup, test_tup1[i])\n        } else if test_tup1[i] == test_tup2[i] {\n            result_tup = append(result_tup, test_tup1[i])\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc0000a04b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc0000a04b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmped6b3815_test.go:16\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmped6b3815_test.go:32 +0x633\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if (test_tup1[i] == nil) {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if (test_tup2[i] == nil) {\n            result_tup = append(result_tup, test_tup1[i])\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmproh71r_m_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmproh71r_m_test.go:30 +0x1ed3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            if _, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i], test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x525080, 0xc0000a04b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x525080, 0xc0000a04b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp1njosftn_test.go:16\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp1njosftn_test.go:32 +0x645\ntesting.tRunner(0xc000001380, 0x551208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4o_ehdaz_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmp4o_ehdaz_test.go:28 +0x1e33\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                fmt.Println(\"Invalid type\")\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpum7bjytc_test.go:12\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmpum7bjytc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if i < len(test_tup2) {\n            if test_tup1[i] == nil {\n                result = append(result, test_tup2[i])\n            } else if test_tup2[i] == nil {\n                result = append(result, test_tup1[i])\n            } else if test_tup1[i] == test_tup2[i] {\n                result = append(result, test_tup1[i])\n            } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n                result = append(result, nil)\n            } else {\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        } else {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(0xc00010ddd0, 0x4, 0x4, 0xc00010dd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpnmfql8pp_test.go:17 +0x2bd\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpnmfql8pp_test.go:38 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if (test_tup1[i].(type) == []interface{}{}) {\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7l8pdob0_test.go:12:25: use of .(type) outside type switch\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4o_ehdaz_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmp4o_ehdaz_test.go:28 +0x1e33\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result_tup = append(result_tup, test_tup1[i])\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp7ky6yffy_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp7ky6yffy_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if (test_tup1[i] == nil) {\n            result = append(result, test_tup2[i])\n        } else if (test_tup2[i] == nil) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmps9qqf_we_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmps9qqf_we_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp41jmge3e_test.go:12\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp41jmge3e_test.go:28 +0x5e5\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp41jmge3e_test.go:12\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp41jmge3e_test.go:28 +0x5e5\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(type) == test_tup2[i].(type) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            default:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        } else {\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxrz5lmx__test.go:16:31: use of .(type) outside type switch\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i], test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpi0cwvizh_test.go:14\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpi0cwvizh_test.go:30 +0x649\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpdyk7i0jb_test.go:16\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpdyk7i0jb_test.go:32 +0x633\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpijsemqd7_test.go:19\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmpijsemqd7_test.go:32 +0x1ed9\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result_tup = append(result_tup, test_tup1[i])\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc00011e4a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc00011e4a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpzns5dug2_test.go:12\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmpzns5dug2_test.go:28 +0x5e5\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            default:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                fmt.Println(\"Invalid type\")\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4o_ehdaz_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmp4o_ehdaz_test.go:28 +0x1e33\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpi2q6_4sa_test.go:18 +0x45f\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpi2q6_4sa_test.go:34 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if (test_tup1[i].(type) == int) && (test_tup2[i].(type) == int) {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        } else if (test_tup1[i].(type) == float64) && (test_tup2[i].(type) == float64) {\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        } else if (test_tup1[i].(type) == string) && (test_tup2[i].(type) == string) {\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        } else if (test_tup1[i].(type) == []interface{}) && (test_tup2[i].(type) == []interface{}) {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            fmt.Println(\"Error: Type mismatch\")\n            return nil\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122798,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxshkl2xc_test.go:18:43: expected expression\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpi2q6_4sa_test.go:18 +0x45f\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpi2q6_4sa_test.go:34 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            default:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if i == 0 {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        } else {\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp38pdtkua_test.go:13\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmp38pdtkua_test.go:28 +0x1f79\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                fmt.Println(\"Invalid type\")\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result_tup = append(result_tup, test_tup1[i])\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp7ky6yffy_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp7ky6yffy_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if (test_tup1[i] == nil) {\n            result_tup = append(result_tup, test_tup2[i])\n        } else if (test_tup2[i] == nil) {\n            result_tup = append(result_tup, test_tup1[i])\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmproh71r_m_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmproh71r_m_test.go:30 +0x1ed3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpijsemqd7_test.go:19\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmpijsemqd7_test.go:32 +0x1ed9\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4o_ehdaz_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmp4o_ehdaz_test.go:28 +0x1e33\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(type) == []interface{} {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpm_w571fp_test.go:13:20: missing ',' in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            if _, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            } else {\n                result = append(result, test_tup1[i])\n            }\n        } else {\n            if _, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, test_tup2[i])\n            } else {\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp5omz9wdv_test.go:19\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc0001a0300)\n\t/tmp/tmp5omz9wdv_test.go:32 +0x20d9\ntesting.tRunner(0xc0001a0300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu3xes4jr_test.go:15:50: invalid operation: test_tup1[i] + test_tup2[i] (operator + not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4o_ehdaz_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmp4o_ehdaz_test.go:28 +0x1e33\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpeoun1qz2_test.go:19 +0x387\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpeoun1qz2_test.go:32 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpums1936c_test.go:16\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpums1936c_test.go:32 +0x20b9\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp4zturzul_test.go:16 +0x44c\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4zturzul_test.go:32 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp41jmge3e_test.go:12\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp41jmge3e_test.go:28 +0x5e5\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        return result\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, nil)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4o_ehdaz_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmp4o_ehdaz_test.go:28 +0x1e33\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if i < len(test_tup2) {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        } else {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4z6mkp51_test.go:13\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4z6mkp51_test.go:28 +0x1b13\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpums1936c_test.go:16\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpums1936c_test.go:32 +0x20b9\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpijsemqd7_test.go:19\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmpijsemqd7_test.go:32 +0x1ed9\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            } else {\n                return nil\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if (test_tup1[i].(type) == int && test_tup2[i].(type) == int) {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        } else if (test_tup1[i].(type) == float64 && test_tup2[i].(type) == float64) {\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        } else if (test_tup1[i].(type) == string && test_tup2[i].(type) == string) {\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        } else if (test_tup1[i].(type) == []interface{} && test_tup2[i].(type) == []interface{}) {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122800,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpx4rfqbec_test.go:18:43: expected expression\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                fmt.Println(\"Error: Unknown type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result_tup = append(result_tup, nil)\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpc1ows64w_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpc1ows64w_test.go:28 +0x1e33\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if (test_tup1[i] == nil || test_tup2[i] == nil) {\n            result = append(result, nil)\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, nil)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            if _, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            } else {\n                result = append(result, test_tup2[i])\n            }\n        } else {\n            if _, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, test_tup1[i])\n            } else {\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] != nil && test_tup2[i] != nil {\n            if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n                result = append(result, nil)\n            } else {\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpsgyjk_gt_test.go:17 +0x44c\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpsgyjk_gt_test.go:34 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu3xes4jr_test.go:15:50: invalid operation: test_tup1[i] + test_tup2[i] (operator + not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafk_aex8_test.go:15:50: invalid operation: test_tup1[i] + test_tup2[i] (operator + not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, nil)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpijsemqd7_test.go:19\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmpijsemqd7_test.go:32 +0x1ed9\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafk_aex8_test.go:15:50: invalid operation: test_tup1[i] + test_tup2[i] (operator + not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result_tup = append(result_tup, nil)\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpc1ows64w_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpc1ows64w_test.go:28 +0x1e33\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if i < len(test_tup2) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            default:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        } else {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if tup1, ok := test_tup1[i].([]interface{}); ok {\n            if tup2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(tup1, tup2))\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i].(type) == test_tup2[i].(type) {\n            if test_tup1[i].(type) == []interface{} {\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            } else {\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        } else {\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122800,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmps3fkcw48_test.go:16:24: missing ',' in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp41jmge3e_test.go:12\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp41jmge3e_test.go:28 +0x5e5\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i], test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x525080, 0xc0000a04b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x525080, 0xc0000a04b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp1njosftn_test.go:16\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp1njosftn_test.go:32 +0x645\ntesting.tRunner(0xc000001380, 0x551208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122802,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case []interface{}:\n            switch test_tup2[i].(type) {\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, test_tup1[i])\n            }\n        default:\n            switch test_tup2[i].(type) {\n            case []interface{}:\n                result = append(result, test_tup2[i])\n            default:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122802,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmps23f7h0w_test.go:14\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmps23f7h0w_test.go:30 +0x2087\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4o_ehdaz_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmp4o_ehdaz_test.go:28 +0x1e33\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result_tup = append(result_tup, nil)\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result_tup = append(result_tup, nil)\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp25n5eg3z_test.go:14\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp25n5eg3z_test.go:30 +0x2087\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                fmt.Println(\"Invalid type\")\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(int) == test_tup2[i].(int) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpolsi9fh7_test.go:16\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmpolsi9fh7_test.go:32 +0x2113\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpums1936c_test.go:16\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpums1936c_test.go:32 +0x20b9\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp41jmge3e_test.go:12\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp41jmge3e_test.go:28 +0x5e5\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafk_aex8_test.go:15:50: invalid operation: test_tup1[i] + test_tup2[i] (operator + not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpeoun1qz2_test.go:19 +0x387\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpeoun1qz2_test.go:32 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch v := test_tup1[i].(type) {\n        case []interface{}:\n            result = append(result, add_nested_tuples(v, test_tup2[i].([]interface{})))\n        case int:\n            result = append(result, v + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        default:\n            fmt.Println(\"Invalid input\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122802,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4o_ehdaz_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmp4o_ehdaz_test.go:28 +0x1e33\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result = append(result, nil)\n        } else if _, ok := test_tup1[i].([]interface{}); ok {\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                result = append(result, test_tup1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            default:\n                fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if i == 0 {\n            result = append(result, test_tup1[i].([]interface{})...)\n        } else {\n            result = append(result, test_tup2[i].([]interface{})...)\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\n    --- FAIL: TestAdd_Nested_Tuples/test_num__0 (0.00s)\n        tmpqj31cnm2_test.go:36: expected '[[%!s(int=7) %!s(int=10)] [%!s(int=7) %!s(int=14)] [%!s(int=3) %!s(int=10)] [%!s(int=8) %!s(int=13)]]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=7) %!s(int=3)]'\n    --- FAIL: TestAdd_Nested_Tuples/test_num__1 (0.00s)\n        tmpqj31cnm2_test.go:36: expected '[[%!s(int=9) %!s(int=12)] [%!s(int=9) %!s(int=16)] [%!s(int=5) %!s(int=12)] [%!s(int=10) %!s(int=15)]]', got '[%!s(int=2) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=4)]'\n    --- FAIL: TestAdd_Nested_Tuples/test_num__2 (0.00s)\n        tmpqj31cnm2_test.go:36: expected '[[%!s(int=11) %!s(int=14)] [%!s(int=11) %!s(int=18)] [%!s(int=7) %!s(int=14)] [%!s(int=12) %!s(int=17)]]', got '[%!s(int=3) %!s(int=5) %!s(int=5) %!s(int=11) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(int) + test_tup2[i].(int) == 0 {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmp4zturzul_test.go:16 +0x44c\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4zturzul_test.go:32 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if t1, ok := test_tup1[i].([]interface{}); ok {\n            if t2, ok := test_tup2[i].([]interface{}); ok {\n                result = append(result, add_nested_tuples(t1, t2))\n            } else {\n                result = append(result, test_tup1[i])\n            }\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i], test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: runtime error: comparing uncomparable type []interface {} [recovered]\n\tpanic: runtime error: comparing uncomparable type []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524080, 0xc0000a64b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(0xc00010ddd0, 0x4, 0x4, 0xc00010dd90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmpoa1v4r1t_test.go:16 +0x2ad\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpoa1v4r1t_test.go:32 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpijsemqd7_test.go:19\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmpijsemqd7_test.go:32 +0x1ed9\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var output_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if _, ok := test_tup1[i].([]interface{}); ok {\n            output_tup = append(output_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        } else {\n            output_tup = append(output_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return output_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmp4_zh8ulw_test.go:17\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmp4_zh8ulw_test.go:30 +0x1ed3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil || test_tup2[i] == nil {\n            result_tup = append(result_tup, nil)\n        } else {\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122801,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpc1ows64w_test.go:15\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmpc1ows64w_test.go:28 +0x1e33\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509896,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case []interface{}:\n                result = append(result, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n            case int:\n                result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) + test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if (test_tup1[i] == test_tup2[i]) {\n            result = append(result, test_tup1[i])\n        } else {\n            result = append(result, test_tup1[i] + test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgr6sfcyu_test.go:15:50: invalid operation: test_tup1[i] + test_tup2[i] (operator + not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i] == nil && test_tup2[i] == nil {\n            result = append(result, nil)\n        } else {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(...)\n\t/tmp/tmpijsemqd7_test.go:19\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000102600)\n\t/tmp/tmpijsemqd7_test.go:32 +0x1ed9\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == nil {\n            result = append(result, test_tup2[i])\n        } else if test_tup2[i] == nil {\n            result = append(result, test_tup1[i])\n        } else if test_tup1[i].(int) + test_tup2[i].(int) > 0 {\n            result = append(result, test_tup1[i].(int) + test_tup2[i].(int))\n        } else {\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122803,
      "stdout": "--- FAIL: TestAdd_Nested_Tuples (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_nested_tuples(0xc0000c2dd0, 0x4, 0x4, 0xc0000c2d90, 0x4, 0x4, 0x0, 0x438, 0x4cd153)\n\t/tmp/tmptfocqyt3_test.go:16 +0x45f\ncommand-line-arguments_test.TestAdd_Nested_Tuples(0xc000001380)\n\t/tmp/tmptfocqyt3_test.go:32 +0x445\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) + test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) + test_tup2[i].(float64))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        case []interface{}:\n            result_tup = append(result_tup, add_nested_tuples(test_tup1[i].([]interface{}), test_tup2[i].([]interface{})))\n        }\n    }\n    return result_tup\n}\n\nfunc TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{7, 10}, []interface{}{7, 14}, []interface{}{3, 10}, []interface{}{8, 13}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{9, 12}, []interface{}{9, 16}, []interface{}{5, 12}, []interface{}{10, 15}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{11, 14}, []interface{}{11, 18}, []interface{}{7, 14}, []interface{}{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}