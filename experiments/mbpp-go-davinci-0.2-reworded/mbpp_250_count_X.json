{
  "name": "mbpp_250_count_X",
  "language": "go_test.go",
  "prompt": "package count_X_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in a list and an element and counts the occcurences of the element in the list.\nfunc count_X(tup []interface{}, x int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCount_X(t *testing.T) {\n  candidate := count_X\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4), expected: 0 },\n     { actual: candidate([]interface{}{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10), expected: 3 },\n     { actual: candidate([]interface{}{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, element := range tup {\n        if element == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v.(int) == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, i := range tup {\n        if i == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, i := range tup {\n        if i == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for _, i := range tup {\n        if i == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for _, i := range tup {\n        if i == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, i := range tup {\n        if i == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    // Write your code here\n    return 0\n}\n",
    "    count := 0\n    for _, val := range tup {\n        if val == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range tup {\n        if v == x {\n            count++\n        }\n    }\n    return count\n}\n"
  ]
}