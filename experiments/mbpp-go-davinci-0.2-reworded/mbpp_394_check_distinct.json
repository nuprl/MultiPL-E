{
  "name": "mbpp_394_check_distinct",
  "language": "go_test.go",
  "prompt": "package check_distinct_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if given list contains no duplicates.\nfunc check_distinct(test_tup []interface{}) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCheck_Distinct(t *testing.T) {\n  candidate := check_distinct\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 4, 5, 6, 1, 4}), expected: false },\n     { actual: candidate([]interface{}{1, 4, 5, 6}), expected: true },\n     { actual: candidate([]interface{}{2, 3, 4, 5, 6}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var seen = make(map[interface{}]bool)\n    for _, val := range test_tup {\n        if seen[val] {\n            return false\n        }\n        seen[val] = true\n    }\n    return true\n}\n",
    "    var test_map = make(map[interface{}]bool)\n    for _, val := range test_tup {\n        if test_map[val] {\n            return false\n        }\n        test_map[val] = true\n    }\n    return true\n}\n",
    "    test_map := make(map[interface{}]bool)\n    for _, elem := range test_tup {\n        if test_map[elem] {\n            return false\n        }\n        test_map[elem] = true\n    }\n    return true\n}\n",
    "    for i := 0; i < len(test_tup); i++ {\n        for j := i + 1; j < len(test_tup); j++ {\n            if test_tup[i] == test_tup[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    test_map := make(map[interface{}]bool)\n    for _, v := range test_tup {\n        if test_map[v] {\n            return false\n        }\n        test_map[v] = true\n    }\n    return true\n}\n",
    "    test_map := make(map[interface{}]bool)\n    for _, val := range test_tup {\n        if _, ok := test_map[val]; ok {\n            return false\n        }\n        test_map[val] = true\n    }\n    return true\n}\n",
    "    test_map := make(map[interface{}]bool)\n    for _, item := range test_tup {\n        if test_map[item] {\n            return false\n        }\n        test_map[item] = true\n    }\n    return true\n}\n",
    "    for i := 0; i < len(test_tup); i++ {\n        for j := i + 1; j < len(test_tup); j++ {\n            if test_tup[i] == test_tup[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    var test_map = make(map[interface{}]bool)\n    for _, val := range test_tup {\n        if test_map[val] {\n            return false\n        }\n        test_map[val] = true\n    }\n    return true\n}\n",
    "    var m = make(map[interface{}]bool)\n    for _, v := range test_tup {\n        if m[v] {\n            return false\n        }\n        m[v] = true\n    }\n    return true\n}\n",
    "    // Create a map to store the values\n    m := make(map[interface{}]int)\n    // Iterate through the list\n    for _, v := range test_tup {\n        // If the value is already in the map, return false\n        if _, ok := m[v]; ok {\n            return false\n        }\n        // Add the value to the map\n        m[v] = 1\n    }\n    // If the list is empty, return false\n    if len(m) == 0 {\n        return false\n    }\n    // Return true if the list is distinct\n    return true\n}\n",
    "    // Create a map to store the values\n    values := make(map[interface{}]bool)\n    // Iterate over the list and check if the value is already in the map\n    for _, val := range test_tup {\n        if _, ok := values[val]; ok {\n            return false\n        }\n        values[val] = true\n    }\n    return true\n}\n",
    "    var test_map = make(map[interface{}]bool)\n    for _, val := range test_tup {\n        if test_map[val] {\n            return false\n        }\n        test_map[val] = true\n    }\n    return true\n}\n",
    "    var seen = make(map[interface{}]bool)\n    for _, val := range test_tup {\n        if _, ok := seen[val]; ok {\n            return false\n        }\n        seen[val] = true\n    }\n    return true\n}\n",
    "    test_map := make(map[interface{}]bool)\n    for _, val := range test_tup {\n        if test_map[val] {\n            return false\n        }\n        test_map[val] = true\n    }\n    return true\n}\n",
    "    var test_map = make(map[interface{}]bool)\n    for _, val := range test_tup {\n        if test_map[val] {\n            return false\n        }\n        test_map[val] = true\n    }\n    return true\n}\n",
    "    for i := 0; i < len(test_tup); i++ {\n        for j := i+1; j < len(test_tup); j++ {\n            if test_tup[i] == test_tup[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(test_tup); i++ {\n        for j := i + 1; j < len(test_tup); j++ {\n            if test_tup[i] == test_tup[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // create a map to store the values\n    m := make(map[interface{}]bool)\n    for _, val := range test_tup {\n        if _, ok := m[val]; ok {\n            return false\n        } else {\n            m[val] = true\n        }\n    }\n    return true\n}\n",
    "    seen := make(map[interface{}]bool)\n    for _, x := range test_tup {\n        if seen[x] {\n            return false\n        }\n        seen[x] = true\n    }\n    return true\n}\n"
  ]
}