{
  "name": "HumanEval_93_encode",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n",
  "tests": "unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpbfbev2dm.d(21): Error: no property `length` for type `string`\n/tmp/tmpbfbev2dm.d(23): Error: slice `result` is not mutable\n/tmp/tmpbfbev2dm.d(24): Error: slice `result` is not mutable\n/tmp/tmpbfbev2dm.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfbev2dm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                c = tolower(c);\n            }\n            else if(islower(c))\n            {\n                c = toupper(c);\n            }\n            result += c;\n        }\n        else if(isvowel(c))\n        {\n            result += message[i+2];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpuvtirwf3.d(21): Error: no property `length` for type `string`\n/tmp/tmpuvtirwf3.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpuvtirwf3.d(26): Error: undefined identifier `isupper`\n/tmp/tmpuvtirwf3.d(28): Error: undefined identifier `tolower`\n/tmp/tmpuvtirwf3.d(30): Error: undefined identifier `islower`\n/tmp/tmpuvtirwf3.d(32): Error: undefined identifier `toupper`\n/tmp/tmpuvtirwf3.d(34): Error: slice `result` is not mutable\n/tmp/tmpuvtirwf3.d(36): Error: undefined identifier `isvowel`\n/tmp/tmpuvtirwf3.d(38): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuvtirwf3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            encoded += message[i];\n            encoded += message[i+2];\n        }\n        else\n        {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpz98y34rc.d(21): Error: no property `length` for type `string`\n/tmp/tmpz98y34rc.d(25): Error: slice `encoded` is not mutable\n/tmp/tmpz98y34rc.d(26): Error: slice `encoded` is not mutable\n/tmp/tmpz98y34rc.d(30): Error: slice `encoded` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz98y34rc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp2jwa0xdk.d(21): Error: no property `length` for type `string`\n/tmp/tmp2jwa0xdk.d(23): Error: slice `result` is not mutable\n/tmp/tmp2jwa0xdk.d(24): Error: slice `result` is not mutable\n/tmp/tmp2jwa0xdk.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jwa0xdk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            encoded += message[i];\n            encoded += message[i+2];\n        }\n        else\n        {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpdhygltiz.d(21): Error: no property `length` for type `string`\n/tmp/tmpdhygltiz.d(25): Error: slice `encoded` is not mutable\n/tmp/tmpdhygltiz.d(26): Error: slice `encoded` is not mutable\n/tmp/tmpdhygltiz.d(30): Error: slice `encoded` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhygltiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++)\n    {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp4g7iux8t.d(21): Error: no property `length` for type `string`\n/tmp/tmp4g7iux8t.d(25): Error: slice `result` is not mutable\n/tmp/tmp4g7iux8t.d(26): Error: slice `result` is not mutable\n/tmp/tmp4g7iux8t.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4g7iux8t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpz3o_bcb4.d(21): Error: no property `length` for type `string`\n/tmp/tmpz3o_bcb4.d(25): Error: slice `result` is not mutable\n/tmp/tmpz3o_bcb4.d(26): Error: slice `result` is not mutable\n/tmp/tmpz3o_bcb4.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3o_bcb4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                result += tolower(c);\n            } else {\n                result += toupper(c);\n            }\n        } else if (isvowel(c)) {\n            result += message[i+2];\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpgav43eu3.d(21): Error: no property `length` for type `string`\n/tmp/tmpgav43eu3.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpgav43eu3.d(24): Error: undefined identifier `isupper`\n/tmp/tmpgav43eu3.d(25): Error: undefined identifier `tolower`\n/tmp/tmpgav43eu3.d(27): Error: undefined identifier `toupper`\n/tmp/tmpgav43eu3.d(29): Error: undefined identifier `isvowel`\n/tmp/tmpgav43eu3.d(30): Error: slice `result` is not mutable\n/tmp/tmpgav43eu3.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgav43eu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + message[i] + message[i];\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + message[i] + message[i];\n        } else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i] + message[i] + message[i];\n        } else if(message[i] == 'y') {\n            result += message[i] + message[i] + message[i];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp3q3djmxz.d(21): Error: no property `length` for type `string`\n/tmp/tmp3q3djmxz.d(23): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)i])`: `string` and `int`\n/tmp/tmp3q3djmxz.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)i])`: `string` and `int`\n/tmp/tmp3q3djmxz.d(27): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)i])`: `string` and `int`\n/tmp/tmp3q3djmxz.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)i])`: `string` and `int`\n/tmp/tmp3q3djmxz.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3q3djmxz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += tolower(c);\n            }\n            else\n            {\n                result += toupper(c);\n            }\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpm68z0irj.d(21): Error: no property `length` for type `string`\n/tmp/tmpm68z0irj.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpm68z0irj.d(26): Error: undefined identifier `isupper`\n/tmp/tmpm68z0irj.d(28): Error: undefined identifier `tolower`\n/tmp/tmpm68z0irj.d(32): Error: undefined identifier `toupper`\n/tmp/tmpm68z0irj.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm68z0irj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpunn845sc.d(21): Error: no property `length` for type `string`\n/tmp/tmpunn845sc.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpunn845sc.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpunn845sc.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpunn845sc.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpunn845sc.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunn845sc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'e' || message[i] == 'E')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'i' || message[i] == 'I')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'o' || message[i] == 'O')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y' || message[i] == 'Y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp573a9c9m.d(21): Error: no property `length` for type `string`\n/tmp/tmp573a9c9m.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i];\n            encoded += message[i+2];\n        }\n        else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpuulwet9a.d(21): Error: no property `length` for type `string`\n/tmp/tmpuulwet9a.d(23): Error: slice `encoded` is not mutable\n/tmp/tmpuulwet9a.d(24): Error: slice `encoded` is not mutable\n/tmp/tmpuulwet9a.d(27): Error: slice `encoded` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuulwet9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += tolower(c);\n            }\n            else\n            {\n                result += toupper(c);\n            }\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpm68z0irj.d(21): Error: no property `length` for type `string`\n/tmp/tmpm68z0irj.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpm68z0irj.d(26): Error: undefined identifier `isupper`\n/tmp/tmpm68z0irj.d(28): Error: undefined identifier `tolower`\n/tmp/tmpm68z0irj.d(32): Error: undefined identifier `toupper`\n/tmp/tmpm68z0irj.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm68z0irj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpun__lm4q.d(21): Error: no property `length` for type `string`\n/tmp/tmpun__lm4q.d(25): Error: slice `result` is not mutable\n/tmp/tmpun__lm4q.d(26): Error: slice `result` is not mutable\n/tmp/tmpun__lm4q.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpun__lm4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp7bztsv15.d(21): Error: no property `length` for type `string`\n/tmp/tmp7bztsv15.d(23): Error: slice `result` is not mutable\n/tmp/tmp7bztsv15.d(24): Error: slice `result` is not mutable\n/tmp/tmp7bztsv15.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7bztsv15.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= '0' && message[i] <= '9')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ' ')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '.')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ',')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '!')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '?')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '-')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '_')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '(')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ')')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '=')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '+')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '*')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '&')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '@\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpyq8j99jb.d(87): Error: unterminated character constant\n/tmp/tmpyq8j99jb.d(88): Error: found `unittest` when expecting `)`\n/tmp/tmpyq8j99jb.d(98): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyq8j99jb.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyq8j99jb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + message[i+2];\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpeinler76.d(21): Error: no property `length` for type `string`\n/tmp/tmpeinler76.d(23): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpeinler76.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpeinler76.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeinler76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++)\n    {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpf_29tsb6.d(21): Error: no property `length` for type `string`\n/tmp/tmpf_29tsb6.d(25): Error: slice `result` is not mutable\n/tmp/tmpf_29tsb6.d(26): Error: slice `result` is not mutable\n/tmp/tmpf_29tsb6.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_29tsb6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            encoded += message[i];\n            encoded += message[i+2];\n        }\n        else\n        {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpdhygltiz.d(21): Error: no property `length` for type `string`\n/tmp/tmpdhygltiz.d(25): Error: slice `encoded` is not mutable\n/tmp/tmpdhygltiz.d(26): Error: slice `encoded` is not mutable\n/tmp/tmpdhygltiz.d(30): Error: slice `encoded` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhygltiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmplguekypk.d(21): Error: no property `length` for type `string`\n/tmp/tmplguekypk.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplguekypk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpaj6uc751.d(21): Error: no property `length` for type `string`\n/tmp/tmpaj6uc751.d(23): Error: slice `result` is not mutable\n/tmp/tmpaj6uc751.d(24): Error: slice `result` is not mutable\n/tmp/tmpaj6uc751.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaj6uc751.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                c = tolower(c);\n            }\n            else {\n                c = toupper(c);\n            }\n            result += c;\n            result += message[i+2];\n        }\n        else {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpvxwhipib.d(21): Error: no property `length` for type `string`\n/tmp/tmpvxwhipib.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpvxwhipib.d(24): Error: undefined identifier `isupper`\n/tmp/tmpvxwhipib.d(25): Error: undefined identifier `tolower`\n/tmp/tmpvxwhipib.d(28): Error: undefined identifier `toupper`\n/tmp/tmpvxwhipib.d(30): Error: slice `result` is not mutable\n/tmp/tmpvxwhipib.d(31): Error: slice `result` is not mutable\n/tmp/tmpvxwhipib.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxwhipib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result;\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpup871nfm.d(21): Error: no property `length` for type `string`\n/tmp/tmpup871nfm.d(25): Error: slice `result` is not mutable\n/tmp/tmpup871nfm.d(26): Error: slice `result` is not mutable\n/tmp/tmpup871nfm.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpup871nfm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpun__lm4q.d(21): Error: no property `length` for type `string`\n/tmp/tmpun__lm4q.d(25): Error: slice `result` is not mutable\n/tmp/tmpun__lm4q.d(26): Error: slice `result` is not mutable\n/tmp/tmpun__lm4q.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpun__lm4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] - 32;\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i];\n        }\n        else if(message[i] == 'e' || message[i] == 'E' || message[i] == 'i' || message[i] == 'I' || message[i] == 'o' || message[i] == 'O' || message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp4cx7x6b4.d(21): Error: no property `length` for type `string`\n/tmp/tmp4cx7x6b4.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] - 32)`: `string` and `int`\n/tmp/tmp4cx7x6b4.d(29): Error: slice `result` is not mutable\n/tmp/tmp4cx7x6b4.d(33): Error: slice `result` is not mutable\n/tmp/tmp4cx7x6b4.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cx7x6b4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i];\n            result += message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp4mtrd_io.d(21): Error: no property `length` for type `string`\n/tmp/tmp4mtrd_io.d(23): Error: slice `result` is not mutable\n/tmp/tmp4mtrd_io.d(24): Error: slice `result` is not mutable\n/tmp/tmp4mtrd_io.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mtrd_io.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result;\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpvefsfie0.d(21): Error: no property `length` for type `string`\n/tmp/tmpvefsfie0.d(25): Error: slice `result` is not mutable\n/tmp/tmpvefsfie0.d(26): Error: slice `result` is not mutable\n/tmp/tmpvefsfie0.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvefsfie0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpun__lm4q.d(21): Error: no property `length` for type `string`\n/tmp/tmpun__lm4q.d(25): Error: slice `result` is not mutable\n/tmp/tmpun__lm4q.d(26): Error: slice `result` is not mutable\n/tmp/tmpun__lm4q.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpun__lm4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'e' || message[i] == 'E')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'i' || message[i] == 'I')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'o' || message[i] == 'O')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y' || message[i] == 'Y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp573a9c9m.d(21): Error: no property `length` for type `string`\n/tmp/tmp573a9c9m.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpi9bcymme.d(21): Error: no property `length` for type `string`\n/tmp/tmpi9bcymme.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpi9bcymme.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9bcymme.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) \n    {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') \n        {\n            result += message[i];\n            result += message[i+2];\n        } \n        else \n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpwvhyahz6.d(21): Error: no property `length` for type `string`\n/tmp/tmpwvhyahz6.d(25): Error: slice `result` is not mutable\n/tmp/tmpwvhyahz6.d(26): Error: slice `result` is not mutable\n/tmp/tmpwvhyahz6.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvhyahz6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpaj6uc751.d(21): Error: no property `length` for type `string`\n/tmp/tmpaj6uc751.d(23): Error: slice `result` is not mutable\n/tmp/tmpaj6uc751.d(24): Error: slice `result` is not mutable\n/tmp/tmpaj6uc751.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaj6uc751.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= '0' && message[i] <= '9')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == ' ')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '.')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == ',')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '!')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '?')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '-')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '_')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '\"')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '\\'')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '(')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == ')')\n        \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp83c_d_fh.d(77): Error: found `unittest` instead of statement\n/tmp/tmp83c_d_fh.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83c_d_fh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpgpzijmpn.d(21): Error: no property `length` for type `string`\n/tmp/tmpgpzijmpn.d(25): Error: slice `result` is not mutable\n/tmp/tmpgpzijmpn.d(26): Error: slice `result` is not mutable\n/tmp/tmpgpzijmpn.d(30): Error: slice `result` is not mutable\n/tmp/tmpgpzijmpn.d(31): Error: slice `result` is not mutable\n/tmp/tmpgpzijmpn.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpzijmpn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                result += tolower(c);\n            } else {\n                result += toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpnp2ptprw.d(21): Error: no property `length` for type `string`\n/tmp/tmpnp2ptprw.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpnp2ptprw.d(24): Error: undefined identifier `isupper`\n/tmp/tmpnp2ptprw.d(25): Error: undefined identifier `tolower`\n/tmp/tmpnp2ptprw.d(27): Error: undefined identifier `toupper`\n/tmp/tmpnp2ptprw.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp2ptprw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpe9j_hbv6.d(21): Error: no property `length` for type `string`\n/tmp/tmpe9j_hbv6.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpe9j_hbv6.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9j_hbv6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += c;\n            }\n            else\n            {\n                result += toupper(c);\n            }\n        }\n        else\n        {\n            if(i < message.length() - 1)\n            {\n                if(isvowel(message[i + 1]))\n                {\n                    result += message[i + 1];\n                }\n                else\n                {\n                    result += message[i + 2];\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpo0uhrel_.d(21): Error: no property `length` for type `string`\n/tmp/tmpo0uhrel_.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpo0uhrel_.d(26): Error: undefined identifier `isupper`\n/tmp/tmpo0uhrel_.d(28): Error: slice `result` is not mutable\n/tmp/tmpo0uhrel_.d(32): Error: undefined identifier `toupper`\n/tmp/tmpo0uhrel_.d(37): Error: no property `length` for type `string`\n/tmp/tmpo0uhrel_.d(39): Error: undefined identifier `isvowel`\n/tmp/tmpo0uhrel_.d(41): Error: slice `result` is not mutable\n/tmp/tmpo0uhrel_.d(45): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0uhrel_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpbfbev2dm.d(21): Error: no property `length` for type `string`\n/tmp/tmpbfbev2dm.d(23): Error: slice `result` is not mutable\n/tmp/tmpbfbev2dm.d(24): Error: slice `result` is not mutable\n/tmp/tmpbfbev2dm.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfbev2dm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmplguekypk.d(21): Error: no property `length` for type `string`\n/tmp/tmplguekypk.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplguekypk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'e' || message[i] == 'E')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'i' || message[i] == 'I')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'o' || message[i] == 'O')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y' || message[i] == 'Y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp573a9c9m.d(21): Error: no property `length` for type `string`\n/tmp/tmp573a9c9m.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpbfbev2dm.d(21): Error: no property `length` for type `string`\n/tmp/tmpbfbev2dm.d(23): Error: slice `result` is not mutable\n/tmp/tmpbfbev2dm.d(24): Error: slice `result` is not mutable\n/tmp/tmpbfbev2dm.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfbev2dm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= '0' && message[i] <= '9')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == ' ')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '.')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == ',')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '!')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '?')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '-')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '_')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '\\'')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '\\\"')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == ':')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == ';')\n        \nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpcpk0lfgz.d(77): Error: found `unittest` instead of statement\n/tmp/tmpcpk0lfgz.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpk0lfgz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpi9bcymme.d(21): Error: no property `length` for type `string`\n/tmp/tmpi9bcymme.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpi9bcymme.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9bcymme.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp0ljhydy6.d(21): Error: no property `length` for type `string`\n/tmp/tmp0ljhydy6.d(25): Error: slice `result` is not mutable\n/tmp/tmp0ljhydy6.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ljhydy6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpi9bcymme.d(21): Error: no property `length` for type `string`\n/tmp/tmpi9bcymme.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpi9bcymme.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9bcymme.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'Y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 's')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'S')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'g')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'G')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'Z')\n        {\n            result += message\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpxgb9w8t2.d(70): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpxgb9w8t2.d(80): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxgb9w8t2.d(80): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxgb9w8t2.d(80): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxgb9w8t2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i];\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp4krfok3w.d(21): Error: no property `length` for type `string`\n/tmp/tmp4krfok3w.d(23): Error: slice `result` is not mutable\n/tmp/tmp4krfok3w.d(24): Error: slice `result` is not mutable\n/tmp/tmp4krfok3w.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4krfok3w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp2jwa0xdk.d(21): Error: no property `length` for type `string`\n/tmp/tmp2jwa0xdk.d(23): Error: slice `result` is not mutable\n/tmp/tmp2jwa0xdk.d(24): Error: slice `result` is not mutable\n/tmp/tmp2jwa0xdk.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jwa0xdk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'Y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpwgsola7e.d(21): Error: no property `length` for type `string`\n/tmp/tmpwgsola7e.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpwgsola7e.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpwgsola7e.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpwgsola7e.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpwgsola7e.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpwgsola7e.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + message[i + 2];\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpm7p8wcor.d(21): Error: no property `length` for type `string`\n/tmp/tmpm7p8wcor.d(23): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpm7p8wcor.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpm7p8wcor.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm7p8wcor.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++)\n    {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpo1lim28c.d(21): Error: no property `length` for type `string`\n/tmp/tmpo1lim28c.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpo1lim28c.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1lim28c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp3jj4x9fx.d(21): Error: no property `length` for type `string`\n/tmp/tmp3jj4x9fx.d(25): Error: slice `result` is not mutable\n/tmp/tmp3jj4x9fx.d(29): Error: slice `result` is not mutable\n/tmp/tmp3jj4x9fx.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3jj4x9fx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp2jwa0xdk.d(21): Error: no property `length` for type `string`\n/tmp/tmp2jwa0xdk.d(23): Error: slice `result` is not mutable\n/tmp/tmp2jwa0xdk.d(24): Error: slice `result` is not mutable\n/tmp/tmp2jwa0xdk.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jwa0xdk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpysabn2ll.d(21): Error: no property `length` for type `string`\n/tmp/tmpysabn2ll.d(25): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(26): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(30): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(31): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpysabn2ll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            result += toupper(c);\n        } else if (isvowel(c)) {\n            result += message[i+2];\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpbyo70da4.d(21): Error: no property `length` for type `string`\n/tmp/tmpbyo70da4.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpbyo70da4.d(24): Error: undefined identifier `toupper`\n/tmp/tmpbyo70da4.d(25): Error: undefined identifier `isvowel`\n/tmp/tmpbyo70da4.d(26): Error: slice `result` is not mutable\n/tmp/tmpbyo70da4.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyo70da4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i];\n            result += message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmph_f4qf59.d(21): Error: no property `length` for type `string`\n/tmp/tmph_f4qf59.d(23): Error: slice `result` is not mutable\n/tmp/tmph_f4qf59.d(24): Error: slice `result` is not mutable\n/tmp/tmph_f4qf59.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_f4qf59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i] + message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpnz29vbcp.d(21): Error: no property `length` for type `string`\n/tmp/tmpnz29vbcp.d(23): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpnz29vbcp.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnz29vbcp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            encoded += message[i];\n            encoded += message[i+2];\n        }\n        else\n        {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpz98y34rc.d(21): Error: no property `length` for type `string`\n/tmp/tmpz98y34rc.d(25): Error: slice `encoded` is not mutable\n/tmp/tmpz98y34rc.d(26): Error: slice `encoded` is not mutable\n/tmp/tmpz98y34rc.d(30): Error: slice `encoded` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz98y34rc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                result += tolower(c);\n            } else {\n                result += toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpnp2ptprw.d(21): Error: no property `length` for type `string`\n/tmp/tmpnp2ptprw.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpnp2ptprw.d(24): Error: undefined identifier `isupper`\n/tmp/tmpnp2ptprw.d(25): Error: undefined identifier `tolower`\n/tmp/tmpnp2ptprw.d(27): Error: undefined identifier `toupper`\n/tmp/tmpnp2ptprw.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnp2ptprw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'e')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'i')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'o')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmponc50rt8.d(21): Error: no property `length` for type `string`\n/tmp/tmponc50rt8.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= '0' && message[i] <= '9')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ' ')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '.')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ',')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '!')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '?')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '-')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '_')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ':')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ';')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '(')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ')')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '=')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '+')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '*\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk68gjf_4.d(87): Error: unterminated character constant\n/tmp/tmpk68gjf_4.d(88): Error: found `unittest` when expecting `)`\n/tmp/tmpk68gjf_4.d(98): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk68gjf_4.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk68gjf_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                result += tolower(c);\n            } else {\n                result += toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpuznbu2v0.d(21): Error: no property `length` for type `string`\n/tmp/tmpuznbu2v0.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpuznbu2v0.d(24): Error: undefined identifier `isupper`\n/tmp/tmpuznbu2v0.d(25): Error: undefined identifier `tolower`\n/tmp/tmpuznbu2v0.d(27): Error: undefined identifier `toupper`\n/tmp/tmpuznbu2v0.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuznbu2v0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmplguekypk.d(21): Error: no property `length` for type `string`\n/tmp/tmplguekypk.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplguekypk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'e' || message[i] == 'E')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'i' || message[i] == 'I')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'o' || message[i] == 'O')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y' || message[i] == 'Y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp573a9c9m.d(21): Error: no property `length` for type `string`\n/tmp/tmp573a9c9m.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            encoded += message[i];\n            encoded += message[i+2];\n        }\n        else\n        {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpdhygltiz.d(21): Error: no property `length` for type `string`\n/tmp/tmpdhygltiz.d(25): Error: slice `encoded` is not mutable\n/tmp/tmpdhygltiz.d(26): Error: slice `encoded` is not mutable\n/tmp/tmpdhygltiz.d(30): Error: slice `encoded` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhygltiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (isupper(c)) {\n                encoded += tolower(c);\n            } else {\n                encoded += toupper(c);\n            }\n        } else {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                encoded += c;\n            } else {\n                encoded += c;\n            }\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpjzhjif0s.d(21): Error: no property `length` for type `string`\n/tmp/tmpjzhjif0s.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpjzhjif0s.d(24): Error: undefined identifier `isupper`\n/tmp/tmpjzhjif0s.d(25): Error: undefined identifier `tolower`\n/tmp/tmpjzhjif0s.d(27): Error: undefined identifier `toupper`\n/tmp/tmpjzhjif0s.d(31): Error: slice `encoded` is not mutable\n/tmp/tmpjzhjif0s.d(33): Error: slice `encoded` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjzhjif0s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) \n    {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') \n        {\n            result += message[i];\n            result += message[i+2];\n        } \n        else \n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpwvhyahz6.d(21): Error: no property `length` for type `string`\n/tmp/tmpwvhyahz6.d(25): Error: slice `result` is not mutable\n/tmp/tmpwvhyahz6.d(26): Error: slice `result` is not mutable\n/tmp/tmpwvhyahz6.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvhyahz6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpaj6uc751.d(21): Error: no property `length` for type `string`\n/tmp/tmpaj6uc751.d(23): Error: slice `result` is not mutable\n/tmp/tmpaj6uc751.d(24): Error: slice `result` is not mutable\n/tmp/tmpaj6uc751.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaj6uc751.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] >= '0' && message[i] <= '9')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == ' ')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '.')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == ',')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '-')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '_')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == ':')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == ';')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '!')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '?')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '\"')\n\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpfhss_13l.d(73): Error: found `unittest` instead of statement\n/tmp/tmpfhss_13l.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfhss_13l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp0ljhydy6.d(21): Error: no property `length` for type `string`\n/tmp/tmp0ljhydy6.d(25): Error: slice `result` is not mutable\n/tmp/tmp0ljhydy6.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ljhydy6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] >= '0' && message[i] <= '9')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == ' ')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '.')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == ',')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '!')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '?')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '-')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '_')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '@')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '#')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '$')\n\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpcbs6eax7.d(73): Error: found `unittest` instead of statement\n/tmp/tmpcbs6eax7.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbs6eax7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'e' || message[i] == 'E')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'i' || message[i] == 'I')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'o' || message[i] == 'O')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y' || message[i] == 'Y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp573a9c9m.d(21): Error: no property `length` for type `string`\n/tmp/tmp573a9c9m.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpbfbev2dm.d(21): Error: no property `length` for type `string`\n/tmp/tmpbfbev2dm.d(23): Error: slice `result` is not mutable\n/tmp/tmpbfbev2dm.d(24): Error: slice `result` is not mutable\n/tmp/tmpbfbev2dm.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfbev2dm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) \n    {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') \n        {\n            result += message[i];\n            result += message[i+2];\n        } \n        else \n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpwvhyahz6.d(21): Error: no property `length` for type `string`\n/tmp/tmpwvhyahz6.d(25): Error: slice `result` is not mutable\n/tmp/tmpwvhyahz6.d(26): Error: slice `result` is not mutable\n/tmp/tmpwvhyahz6.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvhyahz6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i];\n            result += message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk2ozdza5.d(21): Error: no property `length` for type `string`\n/tmp/tmpk2ozdza5.d(23): Error: slice `result` is not mutable\n/tmp/tmpk2ozdza5.d(24): Error: slice `result` is not mutable\n/tmp/tmpk2ozdza5.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk2ozdza5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += tolower(c);\n            }\n            else\n            {\n                result += toupper(c);\n            }\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpm68z0irj.d(21): Error: no property `length` for type `string`\n/tmp/tmpm68z0irj.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpm68z0irj.d(26): Error: undefined identifier `isupper`\n/tmp/tmpm68z0irj.d(28): Error: undefined identifier `tolower`\n/tmp/tmpm68z0irj.d(32): Error: undefined identifier `toupper`\n/tmp/tmpm68z0irj.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm68z0irj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += tolower(c);\n            }\n            else\n            {\n                result += toupper(c);\n            }\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpm68z0irj.d(21): Error: no property `length` for type `string`\n/tmp/tmpm68z0irj.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpm68z0irj.d(26): Error: undefined identifier `isupper`\n/tmp/tmpm68z0irj.d(28): Error: undefined identifier `tolower`\n/tmp/tmpm68z0irj.d(32): Error: undefined identifier `toupper`\n/tmp/tmpm68z0irj.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm68z0irj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] - 32;\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + 32;\n        }\n        else if(message[i] == 'e' || message[i] == 'E' || message[i] == 'i' || message[i] == 'I' || message[i] == 'o' || message[i] == 'O' || message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i] + 2;\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmplnpq9koy.d(21): Error: no property `length` for type `string`\n/tmp/tmplnpq9koy.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] - 32)`: `string` and `int`\n/tmp/tmplnpq9koy.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + 32)`: `string` and `int`\n/tmp/tmplnpq9koy.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + 2)`: `string` and `int`\n/tmp/tmplnpq9koy.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnpq9koy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= '0' && message[i] <= '9')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == ' ')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '.')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == ',')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '!')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '?')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '-')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '_')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '(')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == ')')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '@')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == '#')\n        {\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp9meyqbwa.d(77): Error: found `unittest` instead of statement\n/tmp/tmp9meyqbwa.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp9meyqbwa.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9meyqbwa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(islower(c))\n            {\n                result += toupper(c);\n            }\n            else if(isupper(c))\n            {\n                result += tolower(c);\n            }\n            else\n            {\n                result += c;\n            }\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp_04tgt00.d(21): Error: no property `length` for type `string`\n/tmp/tmp_04tgt00.d(24): Error: undefined identifier `isalpha`\n/tmp/tmp_04tgt00.d(26): Error: undefined identifier `islower`\n/tmp/tmp_04tgt00.d(28): Error: undefined identifier `toupper`\n/tmp/tmp_04tgt00.d(30): Error: undefined identifier `isupper`\n/tmp/tmp_04tgt00.d(32): Error: undefined identifier `tolower`\n/tmp/tmp_04tgt00.d(36): Error: slice `result` is not mutable\n/tmp/tmp_04tgt00.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_04tgt00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + message[i+2];\n        } else if(message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpulommfr3.d(21): Error: no property `length` for type `string`\n/tmp/tmpulommfr3.d(23): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpulommfr3.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpulommfr3.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulommfr3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'e')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'i')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'o')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmponc50rt8.d(21): Error: no property `length` for type `string`\n/tmp/tmponc50rt8.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmplguekypk.d(21): Error: no property `length` for type `string`\n/tmp/tmplguekypk.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplguekypk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++)\n    {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmphbxbft0p.d(21): Error: no property `length` for type `string`\n/tmp/tmphbxbft0p.d(25): Error: slice `result` is not mutable\n/tmp/tmphbxbft0p.d(26): Error: slice `result` is not mutable\n/tmp/tmphbxbft0p.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbxbft0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp2jwa0xdk.d(21): Error: no property `length` for type `string`\n/tmp/tmp2jwa0xdk.d(23): Error: slice `result` is not mutable\n/tmp/tmp2jwa0xdk.d(24): Error: slice `result` is not mutable\n/tmp/tmp2jwa0xdk.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jwa0xdk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            encoded += message[i];\n            encoded += message[i+2];\n        }\n        else\n        {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpdhygltiz.d(21): Error: no property `length` for type `string`\n/tmp/tmpdhygltiz.d(25): Error: slice `encoded` is not mutable\n/tmp/tmpdhygltiz.d(26): Error: slice `encoded` is not mutable\n/tmp/tmpdhygltiz.d(30): Error: slice `encoded` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhygltiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++)\n    {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmphbxbft0p.d(21): Error: no property `length` for type `string`\n/tmp/tmphbxbft0p.d(25): Error: slice `result` is not mutable\n/tmp/tmphbxbft0p.d(26): Error: slice `result` is not mutable\n/tmp/tmphbxbft0p.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphbxbft0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpysabn2ll.d(21): Error: no property `length` for type `string`\n/tmp/tmpysabn2ll.d(25): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(26): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(30): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(31): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpysabn2ll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'Y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpd7y94coq.d(21): Error: no property `length` for type `string`\n/tmp/tmpd7y94coq.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpd7y94coq.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpd7y94coq.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpd7y94coq.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpd7y94coq.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpd7y94coq.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] >= '0' && message[i] <= '9')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == ' ')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '.')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == ',')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '!')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '?')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '-')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '_')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '@')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '#')\n        {\n            result += message[i] + message[i] + message[i];\n        }\n        else if(message[i] == '$')\n\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpcbs6eax7.d(73): Error: found `unittest` instead of statement\n/tmp/tmpcbs6eax7.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbs6eax7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i] + message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp22gf3ylh.d(21): Error: no property `length` for type `string`\n/tmp/tmp22gf3ylh.d(23): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp22gf3ylh.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22gf3ylh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(isalpha(c)) {\n            if(isupper(c)) {\n                result += tolower(c);\n            } else {\n                result += toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpdnvjtrh1.d(21): Error: no property `length` for type `string`\n/tmp/tmpdnvjtrh1.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpdnvjtrh1.d(24): Error: undefined identifier `isupper`\n/tmp/tmpdnvjtrh1.d(25): Error: undefined identifier `tolower`\n/tmp/tmpdnvjtrh1.d(27): Error: undefined identifier `toupper`\n/tmp/tmpdnvjtrh1.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdnvjtrh1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            result += message[i] + message[i+2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpzbsw0jdm.d(21): Error: no property `length` for type `string`\n/tmp/tmpzbsw0jdm.d(23): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpzbsw0jdm.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbsw0jdm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + message[i + 2];\n        }\n        else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + message[i + 2];\n        }\n        else if (message[i] == 'e' || message[i] == 'E') {\n            result += message[i] + message[i + 2];\n        }\n        else if (message[i] == 'i' || message[i] == 'I') {\n            result += message[i] + message[i + 2];\n        }\n        else if (message[i] == 'o' || message[i] == 'O') {\n            result += message[i] + message[i + 2];\n        }\n        else if (message[i] == 'u' || message[i] == 'U') {\n            result += message[i] + message[i + 2];\n        }\n        else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmputabqbml.d(21): Error: no property `length` for type `string`\n/tmp/tmputabqbml.d(23): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmputabqbml.d(26): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmputabqbml.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmputabqbml.d(32): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmputabqbml.d(35): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmputabqbml.d(38): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpi9bcymme.d(21): Error: no property `length` for type `string`\n/tmp/tmpi9bcymme.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpi9bcymme.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9bcymme.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result;\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += tolower(c);\n            }\n            else\n            {\n                result += toupper(c);\n            }\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpzz9uonja.d(21): Error: no property `length` for type `string`\n/tmp/tmpzz9uonja.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpzz9uonja.d(26): Error: undefined identifier `isupper`\n/tmp/tmpzz9uonja.d(28): Error: undefined identifier `tolower`\n/tmp/tmpzz9uonja.d(32): Error: undefined identifier `toupper`\n/tmp/tmpzz9uonja.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz9uonja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (islower(c)) {\n                c = toupper(c);\n            }\n            else {\n                c = tolower(c);\n            }\n            result += c;\n        }\n        else {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5tqb31nx.d(21): Error: no property `length` for type `string`\n/tmp/tmp5tqb31nx.d(23): Error: undefined identifier `isalpha`\n/tmp/tmp5tqb31nx.d(24): Error: undefined identifier `islower`\n/tmp/tmp5tqb31nx.d(25): Error: undefined identifier `toupper`\n/tmp/tmp5tqb31nx.d(28): Error: undefined identifier `tolower`\n/tmp/tmp5tqb31nx.d(30): Error: slice `result` is not mutable\n/tmp/tmp5tqb31nx.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5tqb31nx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] - 32;\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + 32;\n        }\n        else if(message[i] == 'e' || message[i] == 'E')\n        {\n            result += message[i] + 2;\n        }\n        else if(message[i] == 'i' || message[i] == 'I')\n        {\n            result += message[i] + 1;\n        }\n        else if(message[i] == 'o' || message[i] == 'O')\n        {\n            result += message[i] + 3;\n        }\n        else if(message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i] + 4;\n        }\n        else if(message[i] == 'y' || message[i] == 'Y')\n        {\n            result += message[i] + 5;\n        }\n        else if(message[i] == 'a' || message[i] == 'A')\n        {\n            result += message[i] + 6;\n        }\n        else if(message[i] == 's' || message[i] == 'S')\n        {\n            result += message[i] + 7;\n        }\n        else if(message[i] == 'd' || message[i] == 'D')\n        {\n            result += message[i] + 8;\n        }\n        else if(message[i] == 'g' || message[i] == 'G')\n        {\n            result += message[i] + 9;\n        }\n        else if(message[i] == 'h' || message[i] == 'H')\n        {\n            result += message[i] + 10;\n        }\n        else if(message[i] == 'j' || message[i\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpx0t65z6y.d(72): Error: found `unittest` when expecting `,`\n/tmp/tmpx0t65z6y.d(82): Error: found `void` when expecting `,`\n/tmp/tmpx0t65z6y.d(82): Error: found `{` when expecting `,`\n/tmp/tmpx0t65z6y.d(82): Error: expression expected, not `}`\n/tmp/tmpx0t65z6y.d(82): Error: found `End of File` when expecting `,`\n/tmp/tmpx0t65z6y.d(82): Error: found `End of File` when expecting `]`\n/tmp/tmpx0t65z6y.d(82): Error: found `End of File` when expecting `)`\n/tmp/tmpx0t65z6y.d(82): Error: found `End of File` instead of statement\n/tmp/tmpx0t65z6y.d(82): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpx0t65z6y.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0t65z6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i] + message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpnz29vbcp.d(21): Error: no property `length` for type `string`\n/tmp/tmpnz29vbcp.d(23): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpnz29vbcp.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnz29vbcp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) \n    {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') \n        {\n            result += message[i];\n            result += message[i+2];\n        } \n        else \n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpwvhyahz6.d(21): Error: no property `length` for type `string`\n/tmp/tmpwvhyahz6.d(25): Error: slice `result` is not mutable\n/tmp/tmpwvhyahz6.d(26): Error: slice `result` is not mutable\n/tmp/tmpwvhyahz6.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwvhyahz6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i + 2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i + 2];\n        }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i + 2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i] + message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpn6i3kiw8.d(21): Error: no property `length` for type `string`\n/tmp/tmpn6i3kiw8.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpn6i3kiw8.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpn6i3kiw8.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpn6i3kiw8.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpn6i3kiw8.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn6i3kiw8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp6jsb0ou3.d(21): Error: no property `length` for type `string`\n/tmp/tmp6jsb0ou3.d(23): Error: slice `result` is not mutable\n/tmp/tmp6jsb0ou3.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jsb0ou3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpz3o_bcb4.d(21): Error: no property `length` for type `string`\n/tmp/tmpz3o_bcb4.d(25): Error: slice `result` is not mutable\n/tmp/tmpz3o_bcb4.d(26): Error: slice `result` is not mutable\n/tmp/tmpz3o_bcb4.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3o_bcb4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += tolower(c);\n            }\n            else\n            {\n                result += toupper(c);\n            }\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpm68z0irj.d(21): Error: no property `length` for type `string`\n/tmp/tmpm68z0irj.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpm68z0irj.d(26): Error: undefined identifier `isupper`\n/tmp/tmpm68z0irj.d(28): Error: undefined identifier `tolower`\n/tmp/tmpm68z0irj.d(32): Error: undefined identifier `toupper`\n/tmp/tmpm68z0irj.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm68z0irj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += c;\n            }\n            else\n            {\n                result += tolower(c);\n            }\n        }\n        else if(isvowel(c))\n        {\n            result += message[i+2];\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpvi47u_px.d(21): Error: no property `length` for type `string`\n/tmp/tmpvi47u_px.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpvi47u_px.d(26): Error: undefined identifier `isupper`\n/tmp/tmpvi47u_px.d(28): Error: slice `result` is not mutable\n/tmp/tmpvi47u_px.d(32): Error: undefined identifier `tolower`\n/tmp/tmpvi47u_px.d(35): Error: undefined identifier `isvowel`\n/tmp/tmpvi47u_px.d(37): Error: slice `result` is not mutable\n/tmp/tmpvi47u_px.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi47u_px.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpysabn2ll.d(21): Error: no property `length` for type `string`\n/tmp/tmpysabn2ll.d(25): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(26): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(30): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(31): Error: slice `result` is not mutable\n/tmp/tmpysabn2ll.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpysabn2ll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (i < message.length() - 1) {\n                char next = message[i + 1];\n                if (isalpha(next)) {\n                    result += tolower(c);\n                } else {\n                    result += toupper(c);\n                }\n            } else {\n                result += toupper(c);\n            }\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpvfrbxhel.d(21): Error: no property `length` for type `string`\n/tmp/tmpvfrbxhel.d(23): Error: undefined identifier `isalpha`\n/tmp/tmpvfrbxhel.d(24): Error: no property `length` for type `string`\n/tmp/tmpvfrbxhel.d(26): Error: undefined identifier `isalpha`\n/tmp/tmpvfrbxhel.d(27): Error: undefined identifier `tolower`\n/tmp/tmpvfrbxhel.d(29): Error: undefined identifier `toupper`\n/tmp/tmpvfrbxhel.d(32): Error: undefined identifier `toupper`\n/tmp/tmpvfrbxhel.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvfrbxhel.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if (isalpha(c)) {\n            if (i + 2 < message.length() && isalpha(message[i+2])) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n        }\n        result += c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp01epq5mp.d(21): Error: no property `length` for type `string`\n/tmp/tmp01epq5mp.d(23): Error: undefined identifier `isalpha`\n/tmp/tmp01epq5mp.d(24): Error: no property `length` for type `string`\n/tmp/tmp01epq5mp.d(24): Error: undefined identifier `isalpha`\n/tmp/tmp01epq5mp.d(25): Error: undefined identifier `toupper`\n/tmp/tmp01epq5mp.d(27): Error: undefined identifier `tolower`\n/tmp/tmp01epq5mp.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01epq5mp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i] + message[i + 2];\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result += message[i] + message[i + 2];\n        } else if (message[i] == 'e') {\n            result += message[i] + message[i + 2];\n        } else if (message[i] == 'i') {\n            result += message[i] + message[i + 2];\n        } else if (message[i] == 'o') {\n            result += message[i] + message[i + 2];\n        } else if (message[i] == 'u') {\n            result += message[i] + message[i + 2];\n        } else if (message[i] == 'y') {\n            result += message[i] + message[i + 2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5gfb5wjv.d(21): Error: no property `length` for type `string`\n/tmp/tmp5gfb5wjv.d(23): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp5gfb5wjv.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp5gfb5wjv.d(27): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp5gfb5wjv.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp5gfb5wjv.d(31): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp5gfb5wjv.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpun__lm4q.d(21): Error: no property `length` for type `string`\n/tmp/tmpun__lm4q.d(25): Error: slice `result` is not mutable\n/tmp/tmpun__lm4q.d(26): Error: slice `result` is not mutable\n/tmp/tmpun__lm4q.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpun__lm4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= '0' && message[i] <= '9')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ' ')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '.')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ',')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '-')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '_')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '!')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '@')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '#')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '$')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '%')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '^')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '&')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '*')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '('\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpeea7s_d_.d(88): Error: found `unittest` when expecting `)`\n/tmp/tmpeea7s_d_.d(98): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpeea7s_d_.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeea7s_d_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            encoded += message[i];\n            encoded += message[i+2];\n        }\n        else\n        {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpz98y34rc.d(21): Error: no property `length` for type `string`\n/tmp/tmpz98y34rc.d(25): Error: slice `encoded` is not mutable\n/tmp/tmpz98y34rc.d(26): Error: slice `encoded` is not mutable\n/tmp/tmpz98y34rc.d(30): Error: slice `encoded` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz98y34rc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmplguekypk.d(21): Error: no property `length` for type `string`\n/tmp/tmplguekypk.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmplguekypk.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplguekypk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += c;\n            }\n            else\n            {\n                result += tolower(c);\n            }\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpn7n1rs6v.d(21): Error: no property `length` for type `string`\n/tmp/tmpn7n1rs6v.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpn7n1rs6v.d(26): Error: undefined identifier `isupper`\n/tmp/tmpn7n1rs6v.d(28): Error: slice `result` is not mutable\n/tmp/tmpn7n1rs6v.d(32): Error: undefined identifier `tolower`\n/tmp/tmpn7n1rs6v.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7n1rs6v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpc9gliuqr.d(21): Error: no property `length` for type `string`\n/tmp/tmpc9gliuqr.d(25): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(26): Error: slice `result` is not mutable\n/tmp/tmpc9gliuqr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9gliuqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'e')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'i')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'o')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'u')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmponc50rt8.d(21): Error: no property `length` for type `string`\n/tmp/tmponc50rt8.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmponc50rt8.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += tolower(c);\n            }\n            else\n            {\n                result += toupper(c);\n            }\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpm68z0irj.d(21): Error: no property `length` for type `string`\n/tmp/tmpm68z0irj.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpm68z0irj.d(26): Error: undefined identifier `isupper`\n/tmp/tmpm68z0irj.d(28): Error: undefined identifier `tolower`\n/tmp/tmpm68z0irj.d(32): Error: undefined identifier `toupper`\n/tmp/tmpm68z0irj.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm68z0irj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpk8c1hf4r.d(21): Error: no property `length` for type `string`\n/tmp/tmpk8c1hf4r.d(25): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(26): Error: slice `result` is not mutable\n/tmp/tmpk8c1hf4r.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk8c1hf4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n            result += message[i];\n            result += message[i+2];\n        } else {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpbgw863e0.d(21): Error: no property `length` for type `string`\n/tmp/tmpbgw863e0.d(23): Error: slice `result` is not mutable\n/tmp/tmpbgw863e0.d(24): Error: slice `result` is not mutable\n/tmp/tmpbgw863e0.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbgw863e0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpz3o_bcb4.d(21): Error: no property `length` for type `string`\n/tmp/tmpz3o_bcb4.d(25): Error: slice `result` is not mutable\n/tmp/tmpz3o_bcb4.d(26): Error: slice `result` is not mutable\n/tmp/tmpz3o_bcb4.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3o_bcb4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'a' || message[i] == 'A' || message[i] == 'e' || message[i] == 'E' || message[i] == 'i' || message[i] == 'I' || message[i] == 'o' || message[i] == 'O' || message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpaonoyx9_.d(21): Error: no property `length` for type `string`\n/tmp/tmpaonoyx9_.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpaonoyx9_.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpaonoyx9_.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmpaonoyx9_.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaonoyx9_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp5jmhefjj.d(21): Error: no property `length` for type `string`\n/tmp/tmp5jmhefjj.d(25): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(26): Error: slice `result` is not mutable\n/tmp/tmp5jmhefjj.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jmhefjj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= '0' && message[i] <= '9')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ' ')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '.')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ',')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '!')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '?')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '-')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '_')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '(')\n        {\n            result += message[i];\n        }\n        else if(message[i] == ')')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '=')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '+')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '%')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '#')\n        {\n            result += message[i];\n        }\n        else if(message[i] == '@\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpajx2gque.d(87): Error: unterminated character constant\n/tmp/tmpajx2gque.d(88): Error: found `unittest` when expecting `)`\n/tmp/tmpajx2gque.d(98): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpajx2gque.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpajx2gque.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] - 32;\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i];\n        }\n        else if(message[i] == 'e' || message[i] == 'E' || message[i] == 'i' || message[i] == 'I' || message[i] == 'o' || message[i] == 'O' || message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp4cx7x6b4.d(21): Error: no property `length` for type `string`\n/tmp/tmp4cx7x6b4.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] - 32)`: `string` and `int`\n/tmp/tmp4cx7x6b4.d(29): Error: slice `result` is not mutable\n/tmp/tmp4cx7x6b4.d(33): Error: slice `result` is not mutable\n/tmp/tmp4cx7x6b4.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cx7x6b4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n        {\n            result += message[i];\n            result += message[i + 2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpz3o_bcb4.d(21): Error: no property `length` for type `string`\n/tmp/tmpz3o_bcb4.d(25): Error: slice `result` is not mutable\n/tmp/tmpz3o_bcb4.d(26): Error: slice `result` is not mutable\n/tmp/tmpz3o_bcb4.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3o_bcb4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        if(message[i] >= 'a' && message[i] <= 'z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'e' || message[i] == 'E')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'i' || message[i] == 'I')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'o' || message[i] == 'O')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'u' || message[i] == 'U')\n        {\n            result += message[i] + message[i+2];\n        }\n        else if(message[i] == 'y' || message[i] == 'Y')\n        {\n            result += message[i] + message[i+2];\n        }\n        else\n        {\n            result += message[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp573a9c9m.d(21): Error: no property `length` for type `string`\n/tmp/tmp573a9c9m.d(25): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(29): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(33): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(37): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(41): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and `int`\n/tmp/tmp573a9c9m.d(45): Error: incompatible types for `(result) += (cast(int)message[cast(ulong)i] + cast(int)message[cast(ulong)(i + 2)])`: `string` and ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'y') {\n            encoded += message[i];\n            encoded += message[i+2];\n        }\n        else {\n            encoded += message[i];\n        }\n    }\n    return encoded;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmp9_2ic1vk.d(21): Error: no property `length` for type `string`\n/tmp/tmp9_2ic1vk.d(23): Error: slice `encoded` is not mutable\n/tmp/tmp9_2ic1vk.d(24): Error: slice `encoded` is not mutable\n/tmp/tmp9_2ic1vk.d(27): Error: slice `encoded` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_2ic1vk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \n*/\nstring encode(string message) \n{\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++)\n    {\n        char c = message[i];\n        if(isalpha(c))\n        {\n            if(isupper(c))\n            {\n                result += tolower(c);\n            }\n            else\n            {\n                result += toupper(c);\n            }\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}",
      "timestamp": 1664293066,
      "stdout": "",
      "stderr": "/tmp/tmpm68z0irj.d(21): Error: no property `length` for type `string`\n/tmp/tmpm68z0irj.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpm68z0irj.d(26): Error: undefined identifier `isupper`\n/tmp/tmpm68z0irj.d(28): Error: undefined identifier `tolower`\n/tmp/tmpm68z0irj.d(32): Error: undefined identifier `toupper`\n/tmp/tmpm68z0irj.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm68z0irj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}