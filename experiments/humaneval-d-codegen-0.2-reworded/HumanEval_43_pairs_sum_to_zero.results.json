{
  "name": "HumanEval_43_pairs_sum_to_zero",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n",
  "tests": "unittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    \n    // sort the array\n    sort(l, l + n);\n    \n    // check for pairs that sum to zero\n    for (int i = 0; i < n - 1; i++) {\n        if (l[i] + l[i + 1] == 0) return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293250,
      "stdout": "",
      "stderr": "/tmp/tmp01_b8vf6.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp01_b8vf6.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01_b8vf6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return (sum == 0);\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplqa4vxo_.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmplqa4vxo_.__unittest_L29_C1() [0x427ed2]\n??:? void tmplqa4vxo_.__modtest() [0x4280cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0L) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0L) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    for (int i = 0; i < l.length - 1; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if(l.length == 0)\n        return false;\n    \n    long sum = 0L;\n    for(int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if(sum == 0L)\n        return false;\n    \n    for(int i = 0; i < l.length; i++)\n    {\n        for(int j = i+1; j < l.length; j++)\n        {\n            if(l[i] + l[j] == 0L)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    for (int i = 0; i < l.length - 1; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0L)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0L)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    for (int i = 0; i < l.length - 1; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0) return false;\n    if (l.length == 1) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    if (l.length == 1)\n        return false;\n    if (l.length == 2)\n        return (l[0] == 0 && l[1] == 0);\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0)\n        return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if(l.length == 0)\n        return false;\n    if(l.length == 1)\n        return false;\n    if(l.length == 2)\n        return true;\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    if(sum == 0)\n        return false;\n    for(int i = 0; i < l.length; i++)\n        for(int j = i + 1; j < l.length; j++)\n            if(l[i] + l[j] == 0)\n                return true;\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    for (int i = 0; i < l.length - 1; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if(l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if(sum == 0)\n        return false;\n    \n    for(int i = 0; i < l.length; i++)\n        for(int j = i + 1; j < l.length; j++)\n            if(l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    bool found = false;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                found = true;\n                break;\n            }\n        }\n        if (found)\n            break;\n    }\n    return found;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0L) return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0L) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmpcvhq60_a.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvhq60_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return (sum == 0);\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplqa4vxo_.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmplqa4vxo_.__unittest_L29_C1() [0x427ed2]\n??:? void tmplqa4vxo_.__modtest() [0x4280cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0L) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0L) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                for (k = 0; k < l.length; k++) {\n                    if (l[k] == l[i] || l[k] == l[j]) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6_zybxsw.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428435]\n??:? void tmp6_zybxsw.__unittest_L36_C1() [0x427ea4]\n??:? void tmp6_zybxsw.__modtest() [0x4281b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c493]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b326]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430968]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430445]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2fd]\n??:? runModuleUnitTests [0x42c269]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    \n    int i = 0;\n    int j = 1;\n    long sum = 0;\n    while (j < n) {\n        sum += l[j];\n        if (sum == 0) {\n            if (i == j) return true;\n            i = j;\n            j++;\n        }\n        else {\n            j++;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmpkbaaxjmp.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkbaaxjmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    int i = 0;\n    int j = 0;\n    \n    while (i < l.length)\n    {\n        while (j < l.length)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n            j++;\n        }\n        i++;\n        j = i + 1;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++)\n        for (j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    for (int i = 0; i < l.length - 1; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    for (int i = 0; i < l.length - 1; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0) return false;\n    if (l.length == 1) return false;\n    if (l.length == 2) return (l[0] == 0 && l[1] == 0);\n    \n    int i = 0;\n    int j = 1;\n    int k = 2;\n    \n    while (k < l.length) {\n        if (l[i] + l[j] == 0 && l[i] != 0 && l[j] != 0) return true;\n        if (l[i] + l[j] != 0 && l[k] == 0) return false;\n        i = i + 1;\n        j = j + 1;\n        k = k + 1;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4dqnadvd.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x4284bd]\n??:? void tmp4dqnadvd.__unittest_L39_C1() [0x428042]\n??:? void tmp4dqnadvd.__modtest() [0x42823c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c51b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430541]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b385]\n??:? runModuleUnitTests [0x42c2f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428980]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    for (int i = 0; i < l.length - 1; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmpy6grsfek.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy6grsfek.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    for (int i = 0; i < l.length - 1; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    if (l.length == 1)\n        return false;\n    if (l.length == 2)\n        return true;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    for (int i = 0; i < l.length - 1; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0L)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0L)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    int i = 0;\n    int j = 1;\n    long sum = 0;\n    while (j < l.length) {\n        sum += l[i] + l[j];\n        if (sum == 0) return true;\n        if (sum < 0) {\n            sum = 0;\n            i++;\n        }\n        j++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp11s_xarl.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmp11s_xarl.__unittest_L38_C1() [0x427f1a]\n??:? void tmp11s_xarl.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b286]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430419]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b25d]\n??:? runModuleUnitTests [0x42c1c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    if (l.length == 1)\n        return false;\n    if (l.length == 2)\n        return (l[0] == 0 && l[1] == 0);\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        if (l[i] == 0)\n            return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0L;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0L)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0L)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j, k;\n    int n = l.length;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmpzus58izn.d(23): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzus58izn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    int i = 0;\n    int j = 1;\n    long sum = 0;\n    \n    while (j < l.length) {\n        sum = l[i] + l[j];\n        if (sum == 0) {\n            return true;\n        }\n        if (sum < 0) {\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6eabltbx.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x42843e]\n??:? bool tmp6eabltbx.pairs_sum_to_zero(long[]) [0x427d41]\n??:? void tmp6eabltbx.__unittest_L43_C1() [0x427de7]\n??:? void tmp6eabltbx.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b27e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430411]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43039d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b255]\n??:? runModuleUnitTests [0x42c1c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    for (int i = 0; i < l.length - 1; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++)\n        for (j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    if (l.length == 1)\n        return false;\n    if (l.length == 2)\n        return true;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        if (sum - l[i] == 0) return true;\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu2gtc4wb.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpu2gtc4wb.__unittest_L37_C1() [0x427e70]\n??:? void tmpu2gtc4wb.__modtest() [0x428128]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c403]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b296]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430429]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b26d]\n??:? runModuleUnitTests [0x42c1d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if(l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if(sum == 0)\n        return false;\n    \n    for(int i = 0; i < l.length; i++)\n    {\n        for(int j = i+1; j < l.length; j++)\n        {\n            if(l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    \n    // sort the array\n    sort(l);\n    \n    // check for pairs that sum to zero\n    for (int i = 0; i < n - 1; i++) {\n        if (l[i] + l[i + 1] == 0) return true;\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmp0gk4cshz.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp0gk4cshz.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gk4cshz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    for (int i = 0; i < l.length - 1; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0) return false;\n    if (l.length == 1) return false;\n    if (l.length == 2) return true;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    int i = 0;\n    int j = 0;\n    \n    while (i < l.length)\n    {\n        while (j < l.length && l[i] + l[j] != 0)\n            j++;\n        \n        if (j < l.length)\n        {\n            if (i != j)\n                return true;\n            \n            i++;\n            j++;\n        }\n        else\n            i++;\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmh23a7xg.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpmh23a7xg.__unittest_L47_C1() [0x427f1a]\n??:? void tmpmh23a7xg.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b286]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430419]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b25d]\n??:? runModuleUnitTests [0x42c1c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmpcvhq60_a.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvhq60_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmpcvhq60_a.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvhq60_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    int i = 0;\n    int j = 1;\n    \n    while (j < l.length) {\n        if (l[i] + l[j] == 0) {\n            return true;\n        }\n        \n        if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmb8wyqvc.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x4283c5]\n??:? void tmpmb8wyqvc.__unittest_L42_C1() [0x427fec]\n??:? void tmpmb8wyqvc.__modtest() [0x428144]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428888]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    int i = 0;\n    int j = 1;\n    long sum = 0;\n    \n    while (j < l.length) {\n        sum += l[i] + l[j];\n        if (sum == 0)\n            return true;\n        if (sum < 0) {\n            sum = 0;\n            i++;\n        }\n        j++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpps9b587d.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmpps9b587d.__unittest_L41_C1() [0x427f1a]\n??:? void tmpps9b587d.__modtest() [0x428114]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b286]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430419]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b25d]\n??:? runModuleUnitTests [0x42c1c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    for (int i = 0; i < l.length - 1; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++)\n        for (j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    for (int i = 0; i < l.length - 1; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    int i = 0;\n    int j = 1;\n    \n    while (j < l.length) {\n        if (l[i] + l[j] == 0) {\n            return true;\n        }\n        else if (l[i] + l[j] < 0) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0s8wzf_q.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x4283c5]\n??:? void tmp0s8wzf_q.__unittest_L42_C1() [0x427fec]\n??:? void tmp0s8wzf_q.__modtest() [0x428144]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428888]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    if (sum == 0)\n        return false;\n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if(l.length < 2)\n        return false;\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    if(sum == 0)\n        return false;\n    for(int i = 0; i < l.length; i++)\n    {\n        for(int j = i + 1; j < l.length; j++)\n        {\n            if(l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++)\n        for (j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    for (int i = 0; i < l.length - 1; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if(l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if(sum == 0)\n        return false;\n    \n    for(int i = 0; i < l.length; i++)\n    {\n        for(int j = i + 1; j < l.length; j++)\n        {\n            if(l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if(l.length == 0)\n        return false;\n    if(l.length == 1)\n        return false;\n    if(l.length == 2)\n        return true;\n    long sum = 0;\n    for(int i = 0; i < l.length; i++)\n        sum += l[i];\n    if(sum == 0)\n        return false;\n    for(int i = 0; i < l.length; i++)\n        for(int j = i + 1; j < l.length; j++)\n            if(l[i] + l[j] == 0)\n                return true;\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    \n    int i = 0;\n    int j = 1;\n    while (j < n) {\n        if (l[i] + l[j] == 0) {\n            return true;\n        }\n        if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmparssdpat.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparssdpat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++)\n        for (j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    \n    while (i < l.length) {\n        if (l[i] == 0) {\n            count++;\n            if (count > 1)\n                return false;\n            i++;\n        } else {\n            count = 0;\n            i++;\n        }\n    }\n    \n    while (j < l.length) {\n        if (l[j] == 0) {\n            count++;\n            if (count > 1)\n                return false;\n            j++;\n        } else {\n            count = 0;\n            j++;\n        }\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbhkmh_ys.d(59): unittest failure\n----------------\n??:? _d_unittestp [0x4283b5]\n??:? void tmpbhkmh_ys.__unittest_L55_C1() [0x427e24]\n??:? void tmpbhkmh_ys.__modtest() [0x428134]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c413]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430439]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b27d]\n??:? runModuleUnitTests [0x42c1e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428878]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return false;\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0)\n        return false;\n    if (l.length == 1)\n        return false;\n    if (l.length == 2)\n        return (l[0] == 0 && l[1] == 0);\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        if (l[i] != 0)\n            for (int j = i + 1; j < l.length; j++)\n                if (l[j] != 0 && l[i] + l[j] == 0)\n                    return true;\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return (sum == 0);\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplqa4vxo_.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmplqa4vxo_.__unittest_L29_C1() [0x427ed2]\n??:? void tmplqa4vxo_.__modtest() [0x4280cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmpcvhq60_a.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvhq60_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length == 0) return false;\n    if (l.length == 1) return false;\n    if (l.length == 2) return (l[0] == 0 && l[1] == 0);\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        if (l[i] == 0) continue;\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[j] == 0) continue;\n            if (l[i] + l[j] == sum) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppwihufj7.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x4284a5]\n??:? void tmppwihufj7.__unittest_L42_C1() [0x42802a]\n??:? void tmppwihufj7.__modtest() [0x428224]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c503]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b396]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430529]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b36d]\n??:? runModuleUnitTests [0x42c2d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428968]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    int i = 0;\n    int j = 1;\n    while (j < n) {\n        if (l[i] + l[j] == 0) return true;\n        if (l[i] + l[j] < 0) {\n            i++;\n            if (i >= n) return false;\n        }\n        else {\n            j++;\n            if (j >= n) return false;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmpurag2p1t.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpurag2p1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    int i = 0;\n    int j = 1;\n    \n    while (i < l.length && j < l.length) {\n        if (l[i] + l[j] == 0) {\n            return true;\n        }\n        if (l[i] + l[j] < 0) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2d_d07iv.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp2d_d07iv.__unittest_L40_C1() [0x427ffc]\n??:? void tmp2d_d07iv.__modtest() [0x428154]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c433]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430908]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b29d]\n??:? runModuleUnitTests [0x42c209]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2) return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    \n    if (sum == 0) return false;\n    \n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length - 1; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < n; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < n; i++)\n        for (int j = i + 1; j < n; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmpy6qqb2p3.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy6qqb2p3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int i, j;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    int n = l.length;\n    if (n < 2) return false;\n    int i = 0;\n    int j = 1;\n    long sum = 0;\n    while (j < n) {\n        sum += l[i] + l[j];\n        if (sum == 0) return true;\n        if (sum < 0) {\n            sum = 0;\n            i++;\n        }\n        j++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "/tmp/tmp8e4fopfl.d(22): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8e4fopfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n        sum += l[i];\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n        for (int j = i + 1; j < l.length; j++)\n            if (l[i] + l[j] == 0)\n                return true;\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    pairs_sum_to_zero takes an array of integers as an input.\n    it returns true if there are two distinct elements in the array that\n    sum to zero, and false otherwise.\n    >>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\n    false\n    >>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\n    false\n    >>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\n    false\n    >>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\n    true\n    >>> pairs_sum_to_zero([1L])\n    false\n    \n*/\nbool pairs_sum_to_zero(long[] l) \n{\n    if (l.length < 2)\n        return false;\n    \n    long sum = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        sum += l[i];\n    }\n    \n    if (sum == 0)\n        return false;\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        for (int j = i + 1; j < l.length; j++)\n        {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}",
      "timestamp": 1664293251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}