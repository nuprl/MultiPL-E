{
  "name": "HumanEval_4_mean_absolute_deviation",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n",
  "tests": "unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mad += std.math.abs(numbers[i] - mean);\n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbxkcrhvw.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpbxkcrhvw.__unittest_L24_C1() [0x42812d]\n??:? void tmpbxkcrhvw.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpxu1n5wuu.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxu1n5wuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mad += std.math.abs(numbers[i] - mean);\n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbxkcrhvw.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpbxkcrhvw.__unittest_L24_C1() [0x42812d]\n??:? void tmpbxkcrhvw.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float)math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpk3y4ioaz.d(27): Error: C style cast illegal, use `cast(float)math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk3y4ioaz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mad += std.math.abs(numbers[i] - mean);\n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzsphathd.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpzsphathd.__unittest_L24_C1() [0x42812d]\n??:? void tmpzsphathd.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmplpgu4pou.d(24): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpgu4pou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += Math.abs(numbers[i] - mean);\n    }\n    mean = sum / numbers.length;\n    return mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpdo8fdzj2.d(18): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdo8fdzj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float mad = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        mad += temp * temp;\n    }\n    mad = mad / numbers.length;\n    \n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzz47q9ie.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpzz47q9ie.__unittest_L33_C1() [0x427fd4]\n??:? void tmpzz47q9ie.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b211]\n??:? runModuleUnitTests [0x42c17d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float result = 0.0f;\n    int count = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        temp = numbers[i];\n        sum += temp;\n        count++;\n    }\n    mean = sum / count;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        temp = numbers[i];\n        result += (temp - mean) * (temp - mean);\n    }\n    result = result / count;\n    result = math.sqrt(result);\n    return result;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp3ofoer1_.d(35): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ofoer1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (float number : numbers) {\n        mean += number;\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (float number : numbers) {\n        sum += std.math.abs(number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp037r6f2l.d(16): Error: semicolon expected, not `:`\n/tmp/tmp037r6f2l.d(16): Error: expression expected, not `:`\n/tmp/tmp037r6f2l.d(16): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmp037r6f2l.d(21): Error: semicolon expected, not `:`\n/tmp/tmp037r6f2l.d(21): Error: expression expected, not `:`\n/tmp/tmp037r6f2l.d(21): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp037r6f2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmprvwc07y0.d(24): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvwc07y0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmppasn4ijc.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppasn4ijc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += std.math.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz8ybpmgf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpz8ybpmgf.__unittest_L26_C1() [0x42812d]\n??:? void tmpz8ybpmgf.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        sum += math.abs(numbers[i] - mean);\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpv9fe_hnt.d(21): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9fe_hnt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += std.math.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz8ybpmgf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpz8ybpmgf.__unittest_L26_C1() [0x42812d]\n??:? void tmpz8ybpmgf.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += Math.abs(temp);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp2mmhs3p3.d(24): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2mmhs3p3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mad += std.math.abs(numbers[i] - mean);\n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzsphathd.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpzsphathd.__unittest_L24_C1() [0x42812d]\n??:? void tmpzsphathd.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    int count = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        count++;\n    }\n    mean = sum / count;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    return (float)Math.sqrt(sum / count);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpxzqqzkqe.d(29): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / count)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxzqqzkqe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        sum += std.math.abs(numbers[i] - mean);\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj12sv471.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpj12sv471.__unittest_L24_C1() [0x42812d]\n??:? void tmpj12sv471.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += std.math.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb4wfc_v9.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmpb4wfc_v9.__unittest_L27_C1() [0x428139]\n??:? void tmpb4wfc_v9.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpkpkjolgw.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkpkjolgw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpyrz8770y.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrz8770y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += Math.abs(numbers[i] - mean);\n    }\n    mean = sum / numbers.length;\n    return mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpdo8fdzj2.d(18): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdo8fdzj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp6ihtzroq.d(26): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ihtzroq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmprvwc07y0.d(24): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvwc07y0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpyrz8770y.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrz8770y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    \n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1_5r0cm5.d(29): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_5r0cm5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mad += std.math.abs(numbers[i] - mean);\n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzsphathd.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpzsphathd.__unittest_L24_C1() [0x42812d]\n??:? void tmpzsphathd.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += Math.abs(numbers[i] - mean);\n    }\n    mean = sum / numbers.length;\n    return mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpdo8fdzj2.d(18): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdo8fdzj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) \n    {\n        sum += std.math.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpbwfkpas8.d(15): Error: undefined identifier `mean`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwfkpas8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.fabs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcai1t4ce.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmpcai1t4ce.__unittest_L27_C1() [0x4280f9]\n??:? void tmpcai1t4ce.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b26e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430401]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43038d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b245]\n??:? runModuleUnitTests [0x42c1b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        temp2 += temp * temp;\n    }\n    \n    return (float) Math.sqrt(temp2 / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpt_abdqjx.d(30): Error: C style cast illegal, use `cast(float)Math.sqrt(temp2 / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_abdqjx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += Math.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmper2nu9kl.d(23): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmper2nu9kl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    return (float)Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpl2vgp4nq.d(28): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2vgp4nq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    return (float)math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp739aofn0.d(30): Error: C style cast illegal, use `cast(float)math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp739aofn0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmplpgu4pou.d(24): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpgu4pou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp7qvn49w0.d(26): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qvn49w0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        temp2 += temp * temp;\n    }\n    \n    return (float) Math.sqrt(temp2 / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpt_abdqjx.d(30): Error: C style cast illegal, use `cast(float)Math.sqrt(temp2 / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt_abdqjx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpxu1n5wuu.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxu1n5wuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        sum += std.math.fabs(numbers[i] - mean);\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyf64czpt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpyf64czpt.__unittest_L24_C1() [0x4280ed]\n??:? void tmpyf64czpt.__modtest() [0x428100]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b25e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43037d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b235]\n??:? runModuleUnitTests [0x42c1a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mad += std.math.abs(numbers[i] - mean);\n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbxkcrhvw.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpbxkcrhvw.__unittest_L24_C1() [0x42812d]\n??:? void tmpbxkcrhvw.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n    float sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.math.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpeh74ipqp.d(15): Error: undefined identifier `mean`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeh74ipqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        temp = numbers[i];\n        sum += temp;\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    return (float)math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp04m6bito.d(30): Error: C style cast illegal, use `cast(float)math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04m6bito.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float)Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpr64gdtqa.d(26): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr64gdtqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpv8wpo_k2.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8wpo_k2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float)math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpk3y4ioaz.d(27): Error: C style cast illegal, use `cast(float)math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk3y4ioaz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        sum += std.math.abs(numbers[i] - mean);\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm8sttx7.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmprm8sttx7.__unittest_L24_C1() [0x42812d]\n??:? void tmprm8sttx7.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += math.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmprb_pj67m.d(25): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprb_pj67m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        sum += std.math.abs(numbers[i] - mean);\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm8sttx7.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmprm8sttx7.__unittest_L24_C1() [0x42812d]\n??:? void tmprm8sttx7.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) \n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) \n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpzd7_krsu.d(27): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzd7_krsu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mad += std.math.abs(numbers[i] - mean);\n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbxkcrhvw.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpbxkcrhvw.__unittest_L24_C1() [0x42812d]\n??:? void tmpbxkcrhvw.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    \n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpa0iktnxm.d(29): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0iktnxm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpxu1n5wuu.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxu1n5wuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        sum += std.math.abs(numbers[i] - mean);\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprm8sttx7.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmprm8sttx7.__unittest_L24_C1() [0x42812d]\n??:? void tmprm8sttx7.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpur9b4z56.d(27): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpur9b4z56.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float)Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp3_ycetza.d(27): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_ycetza.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float count = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        count++;\n    }\n    mean = sum / count;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / count);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpt91zvcvm.d(27): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / count)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt91zvcvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += std.math.fabs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2u1k4o62.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmp2u1k4o62.__unittest_L27_C1() [0x4280f9]\n??:? void tmp2u1k4o62.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b26e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430401]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43038d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b245]\n??:? runModuleUnitTests [0x42c1b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmprvwc07y0.d(24): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvwc07y0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += std.math.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz8ybpmgf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpz8ybpmgf.__unittest_L26_C1() [0x42812d]\n??:? void tmpz8ybpmgf.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float)Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpy59fptk_.d(24): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy59fptk_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float sum_squares = 0.0f;\n    float n = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        sum_squares += numbers[i] * numbers[i];\n        n++;\n    }\n    mean = sum / n;\n    return (float) Math.sqrt(sum_squares / n - mean * mean);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmprmsllqzx.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum_squares / n - mean * mean)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmsllqzx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpzw0v4wn1.d(27): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzw0v4wn1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmprqfd0osl.d(22): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqfd0osl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmplpgu4pou.d(24): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpgu4pou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += (temp * temp);\n    }\n    \n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpv5u0z_ed.d(29): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5u0z_ed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpyrz8770y.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrz8770y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmplpgu4pou.d(24): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpgu4pou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpempust_e.d(28): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpempust_e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    mad = mad / numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqk47n_h0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmpqk47n_h0.__unittest_L28_C1() [0x427fe8]\n??:? void tmpqk47n_h0.__modtest() [0x428110]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b24a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43088c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430369]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b221]\n??:? runModuleUnitTests [0x42c18d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float result = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        result += temp * temp;\n    }\n    result = result / numbers.length;\n    result = math.sqrt(result);\n    \n    return result;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpevd7njxn.d(30): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevd7njxn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i];\n        sum += temp;\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += Math.abs(temp);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpy8bkoq9y.d(26): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8bkoq9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    int count = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        count++;\n    }\n    mean = sum / count;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        temp2 = temp * temp;\n        sum += temp2;\n    }\n    return (float)Math.sqrt(sum / count);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpl6bp7zr_.d(31): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / count)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6bp7zr_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float)Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpy59fptk_.d(24): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy59fptk_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    int len = numbers.length;\n    for (int i = 0; i < len; i++) {\n        temp = numbers[i];\n        sum += temp;\n    }\n    mean = sum / len;\n    sum = 0.0f;\n    for (int i = 0; i < len; i++) {\n        temp = numbers[i] - mean;\n        sum += (temp * temp);\n    }\n    return (float)Math.sqrt(sum / len);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmphnx76uee.d(29): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / len)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnx76uee.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpxu1n5wuu.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxu1n5wuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpv8wpo_k2.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8wpo_k2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmplpgu4pou.d(24): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplpgu4pou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmprvwc07y0.d(24): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvwc07y0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpyrz8770y.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrz8770y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += Math.abs(temp);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmput24ve84.d(26): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmput24ve84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmprvwc07y0.d(24): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvwc07y0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++) {\n        sum += Math.abs(numbers[i] - mean);\n    }\n    mean = sum / numbers.length;\n    return mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp0vdkbaqf.d(18): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vdkbaqf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmprvwc07y0.d(24): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvwc07y0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp_p41_tk9.d(22): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_p41_tk9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg5o5pol.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmpgg5o5pol.__unittest_L28_C1() [0x428139]\n??:? void tmpgg5o5pol.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpayooxgq1.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpayooxgq1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2zzl_h22.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp2zzl_h22.__unittest_L29_C1() [0x428139]\n??:? void tmp2zzl_h22.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float)Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpr64gdtqa.d(26): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr64gdtqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mad += std.math.abs(numbers[i] - mean);\n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbxkcrhvw.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpbxkcrhvw.__unittest_L24_C1() [0x42812d]\n??:? void tmpbxkcrhvw.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpszp8x1iz.d(24): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszp8x1iz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpxu1n5wuu.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxu1n5wuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpv8wpo_k2.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8wpo_k2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpyrz8770y.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyrz8770y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg5o5pol.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmpgg5o5pol.__unittest_L28_C1() [0x428139]\n??:? void tmpgg5o5pol.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    return (float)Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpum1n18wt.d(29): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpum1n18wt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++)\n        sum += std.math.abs(numbers[i] - mean);\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj12sv471.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpj12sv471.__unittest_L24_C1() [0x42812d]\n??:? void tmpj12sv471.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.fabs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcai1t4ce.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmpcai1t4ce.__unittest_L27_C1() [0x4280f9]\n??:? void tmpcai1t4ce.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b26e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430401]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43038d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b245]\n??:? runModuleUnitTests [0x42c1b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    int len = numbers.length;\n    for (int i = 0; i < len; i++) {\n        temp = numbers[i];\n        sum += temp;\n    }\n    mean = sum / len;\n    sum = 0.0f;\n    for (int i = 0; i < len; i++) {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    return (float) std.math.sqrt(sum / len);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpv1agfr3f.d(29): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / len)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1agfr3f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z19cm.d(22): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyt0z19cm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mean += numbers[i];\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n        mad += std.math.abs(numbers[i] - mean);\n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzsphathd.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4283cd]\n??:? void tmpzsphathd.__unittest_L24_C1() [0x42812d]\n??:? void tmpzsphathd.__modtest() [0x42814c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b285]\n??:? runModuleUnitTests [0x42c1f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428890]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += Math.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpjjtr6k9j.d(15): Error: undefined identifier `mean`, did you mean function `main`?\n/tmp/tmpjjtr6k9j.d(19): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjtr6k9j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += std.math.fabs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjk_jchc_.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpjk_jchc_.__unittest_L26_C1() [0x4280ed]\n??:? void tmpjk_jchc_.__modtest() [0x428100]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b25e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43037d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b235]\n??:? runModuleUnitTests [0x42c1a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float)std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpk1ka1vbr.d(26): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1ka1vbr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float sum_squares = 0.0f;\n    float n = numbers.length;\n    for (int i = 0; i < n; i++) {\n        sum += numbers[i];\n        sum_squares += numbers[i] * numbers[i];\n    }\n    mean = sum / n;\n    return (float) std.math.sqrt(sum_squares / n - mean * mean);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp3zqi0gyj.d(24): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum_squares / n - mean * mean)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zqi0gyj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float)Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpy59fptk_.d(24): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy59fptk_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpecj2giw1.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecj2giw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mean += numbers[i];\n    }\n    mean /= numbers.length;\n    float mad = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        mad += std.math.abs(numbers[i] - mean);\n    }\n    mad /= numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4b6xkgz1.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp4b6xkgz1.__unittest_L27_C1() [0x428139]\n??:? void tmp4b6xkgz1.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpxu1n5wuu.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxu1n5wuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        temp2 += temp * temp;\n    }\n    return (float)Math.sqrt(temp2 / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp300ib5p.d(29): Error: C style cast illegal, use `cast(float)Math.sqrt(temp2 / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp300ib5p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i];\n        sum += temp;\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += Math.abs(temp);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpy8bkoq9y.d(26): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8bkoq9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    float temp2 = 0.0f;\n    float temp3 = 0.0f;\n    float temp4 = 0.0f;\n    float temp5 = 0.0f;\n    float temp6 = 0.0f;\n    float temp7 = 0.0f;\n    float temp8 = 0.0f;\n    float temp9 = 0.0f;\n    float temp10 = 0.0f;\n    float temp11 = 0.0f;\n    float temp12 = 0.0f;\n    float temp13 = 0.0f;\n    float temp14 = 0.0f;\n    float temp15 = 0.0f;\n    float temp16 = 0.0f;\n    float temp17 = 0.0f;\n    float temp18 = 0.0f;\n    float temp19 = 0.0f;\n    float temp20 = 0.0f;\n    float temp21 = 0.0f;\n    float temp22 = 0.0f;\n    float temp23 = 0.0f;\n    float temp24 = 0.0f;\n    float temp25 = 0.0f;\n    float temp26 = 0.0f;\n    float temp27 = 0.0f;\n    float temp28 = 0.0f;\n    float temp29 = 0.0f;\n    float temp30 = 0.0f;\n    float temp31 = 0.0f;\n    float temp32 = 0.0f;\n    float temp33 = 0.0f;\n    float temp34 = 0.0f;\n    float temp35 = 0.0f;\n    float temp36 = 0.0f;\n    float temp37 = 0.0f;\n    float temp38 = 0.0f;\n    float temp39 = 0.0f;\n    float temp40 = 0.0f;\n    float temp41 = 0.0f;\n    float temp42 = 0.0f;\n    float temp43 = 0.0f;\n    float temp44 = 0.0f;\n    float temp45 = 0.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp1bshu2w7.d(62): Error: semicolon expected, not `unittest`\n/tmp/tmp1bshu2w7.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bshu2w7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    float temp = 0.0f;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++) {\n        temp = numbers[i] - mean;\n        sum += temp * temp;\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp6r0jhrg.d(28): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6r0jhrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float)Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpghybzr2x.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghybzr2x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmpp999mny0.d(25): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp999mny0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0f;\n    float sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) std.math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp7qvn49w0.d(26): Error: C style cast illegal, use `cast(float)std.math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qvn49w0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    sum = 0.0f;\n    for (int i = 0; i < numbers.length; i++) {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return (float) Math.sqrt(sum / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "timestamp": 1664293361,
      "stdout": "",
      "stderr": "/tmp/tmp4kb093wg.d(25): Error: C style cast illegal, use `cast(float)Math.sqrt(sum / numbers.length)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4kb093wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}