{
  "name": "HumanEval_2_truncate_number",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n",
  "tests": "unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n    float dec_part;\n    int_part = (int)number;\n    dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpb0b0vydb.d(17): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0b0vydb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    return number - math.floor(number);\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmp38a60v1n.d(15): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38a60v1n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n    float dec_part;\n    int_part = int(number);\n    dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmp_n630cpi.d(17): Error: cannot implicitly convert expression `number` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_n630cpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = int(number);\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpyl0kcnxw.d(15): Error: cannot implicitly convert expression `number` of type `float` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyl0kcnxw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float decimals = number - int_part;\n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpl31hv_ib.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl31hv_ib.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part = (int)number;\n    float dec_part = number - int_part;\n    return dec_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}",
      "timestamp": 1664293011,
      "stdout": "",
      "stderr": "/tmp/tmpn8styiwi.d(15): Error: C style cast illegal, use `cast(int)number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8styiwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}