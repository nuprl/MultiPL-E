{
  "name": "HumanEval_117_select_words",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n",
  "tests": "unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (count == n)\n        {\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = s.substr(j, i - j);\n            count = 0;\n            i++;\n            j = i;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        count++;\n        i++;\n    }\n    if (count == n)\n    {\n        words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        words[words.length - 1] = s.substr(j, i - j);\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpvpb9bzxm.d(40): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\n/tmp/tmpvpb9bzxm.d(57): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvpb9bzxm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.length() == 0)\n        return words;\n    \n    string[] words_in_s = s.split(\" \");\n    \n    for (int i = 0; i < words_in_s.length; i++)\n    {\n        if (words_in_s[i].length() == 0)\n            continue;\n        \n        string[] words_in_s_i = words_in_s[i].split(\"\");\n        \n        int count = 0;\n        for (int j = 0; j < words_in_s_i.length; j++)\n        {\n            if (words_in_s_i[j].length() == 0)\n                continue;\n            \n            if (words_in_s_i[j].length() == 1)\n                count++;\n            else\n                count += words_in_s_i[j].length();\n            \n            if (count == n)\n            {\n                words.push_back(words_in_s_i[j]);\n                break;\n            }\n        }\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpwh02vy05.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpwh02vy05.d(25): Error: no property `length` for type `string`\n/tmp/tmpwh02vy05.d(28): Error: no property `split` for type `string`\n/tmp/tmpwh02vy05.d(32): Error: no property `length` for type `string`\n/tmp/tmpwh02vy05.d(35): Error: no property `split` for type `string`\n/tmp/tmpwh02vy05.d(40): Error: no property `length` for type `string`\n/tmp/tmpwh02vy05.d(43): Error: no property `length` for type `string`\n/tmp/tmpwh02vy05.d(46): Error: no property `length` for type `string`\n/tmp/tmpwh02vy05.d(50): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwh02vy05.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0)\n        words.push_back(word);\n    \n    int cnt = 0;\n    for (int i = 0; i < words.length(); i++)\n    {\n        if (words[i].length() > 0)\n        {\n            cnt += words[i].length();\n            if (cnt == n)\n                return words;\n        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpueo09cq6.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpueo09cq6.d(25): Error: no property `empty` for type `string`\n/tmp/tmpueo09cq6.d(29): Error: no property `length` for type `string`\n/tmp/tmpueo09cq6.d(33): Error: no property `length` for type `string`\n/tmp/tmpueo09cq6.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmpueo09cq6.d(41): Error: slice `word` is not mutable\n/tmp/tmpueo09cq6.d(44): Error: no property `length` for type `string`\n/tmp/tmpueo09cq6.d(45): Error: no property `push_back` for type `string[]`\n/tmp/tmpueo09cq6.d(48): Error: no property `length` for type `string[]`\n/tmp/tmpueo09cq6.d(50): Error: no property `length` for type `string`\n/tmp/tmpueo09cq6.d(52): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpueo09cq6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            if (count == n)\n            {\n                words[j] = s.substr(i, i - j);\n                j++;\n                count = 0;\n            }\n            i++;\n        }\n        else\n        {\n            count++;\n            i++;\n        }\n    }\n    if (count == n)\n    {\n        words[j] = s.substr(i, i - j);\n        j++;\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmptmv0_l6x.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmptmv0_l6x.d(25): Error: no property `length` for type `string`\n/tmp/tmptmv0_l6x.d(31): Error: no property `length` for type `string`\n/tmp/tmptmv0_l6x.d(37): Error: no property `substr` for type `string`\n/tmp/tmptmv0_l6x.d(51): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmv0_l6x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if(s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while(i < s.length())\n    {\n        if(s[i] == ' ')\n        {\n            if(count == n)\n            {\n                words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n                words[words.length - 1] = s.substr(j, k - j);\n            }\n            count = 0;\n            j = i + 1;\n            k = i + 1;\n        }\n        else\n        {\n            count++;\n            k++;\n        }\n        i++;\n    }\n    if(count == n)\n    {\n        words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        words[words.length - 1] = s.substr(j, k - j);\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpa5kzde3r.d(38): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\n/tmp/tmpa5kzde3r.d(54): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5kzde3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty())\n        return {};\n    \n    string[] words = {};\n    \n    for (auto c : s)\n    {\n        if (c == ' ')\n            continue;\n        \n        auto count = math.count(s, c);\n        if (count == n)\n            words.push_back(c);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpd5b_glo9.d(29): Error: no identifier for declarator `c`\n/tmp/tmpd5b_glo9.d(29): Error: expression expected, not `:`\n/tmp/tmpd5b_glo9.d(29): Error: found `s` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd5b_glo9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0) return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (count == n)\n        {\n            words[j] = s.substr(i, j - i);\n            j++;\n            i = j;\n            count = 0;\n        }\n        \n        count++;\n        i++;\n    }\n    \n    if (count == n)\n    {\n        words[j] = s.substr(i, j - i);\n        j++;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpj6ohio_u.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpj6ohio_u.d(25): Error: no property `length` for type `string`\n/tmp/tmpj6ohio_u.d(30): Error: no property `length` for type `string`\n/tmp/tmpj6ohio_u.d(40): Error: no property `substr` for type `string`\n/tmp/tmpj6ohio_u.d(52): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6ohio_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0) return new string[0];\n    string[] words = new string[0];\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ') continue;\n        string word = \"\";\n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ') break;\n            word += s[j];\n        }\n        if(word.length() == n) words = append(words, word);\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmp71v2zt4l.d(24): Error: no property `length` for type `string`\n/tmp/tmp71v2zt4l.d(26): Error: no property `length` for type `string`\n/tmp/tmp71v2zt4l.d(30): Error: no property `length` for type `string`\n/tmp/tmp71v2zt4l.d(33): Error: slice `word` is not mutable\n/tmp/tmp71v2zt4l.d(35): Error: no property `length` for type `string`\n/tmp/tmp71v2zt4l.d(35): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp71v2zt4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    string word = \"\";\n    int i = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n        i++;\n    }\n    if (word.length() > 0)\n        words = append(words, word);\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpro71azsa.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpro71azsa.d(25): Error: no property `length` for type `string`\n/tmp/tmpro71azsa.d(29): Error: no property `length` for type `string`\n/tmp/tmpro71azsa.d(33): Error: no property `length` for type `string`\n/tmp/tmpro71azsa.d(35): Error: undefined identifier `append`\n/tmp/tmpro71azsa.d(41): Error: slice `word` is not mutable\n/tmp/tmpro71azsa.d(45): Error: no property `length` for type `string`\n/tmp/tmpro71azsa.d(46): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpro71azsa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty())\n        return {};\n    \n    string[] words = {};\n    \n    for (auto c : s)\n    {\n        if (c == ' ')\n            continue;\n        \n        if (n == 0)\n            break;\n        \n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            n--;\n        \n        if (c == ' ')\n            n--;\n        \n        if (n == 0)\n            words.push_back(s.substr(0, s.find_first_of(c, 1)));\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpvely62oq.d(29): Error: no identifier for declarator `c`\n/tmp/tmpvely62oq.d(29): Error: expression expected, not `:`\n/tmp/tmpvely62oq.d(29): Error: found `s` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvely62oq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words.push_back(word);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpocx_l9rh.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpocx_l9rh.d(25): Error: no property `length` for type `string`\n/tmp/tmpocx_l9rh.d(28): Error: no property `length` for type `string`\n/tmp/tmpocx_l9rh.d(34): Error: no property `length` for type `string`\n/tmp/tmpocx_l9rh.d(38): Error: slice `word` is not mutable\n/tmp/tmpocx_l9rh.d(41): Error: no property `length` for type `string`\n/tmp/tmpocx_l9rh.d(42): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocx_l9rh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.length() == 0)\n        return words;\n    \n    string word = \"\";\n    int i = 0;\n    while(i < s.length())\n    {\n        if(s[i] == ' ')\n        {\n            if(word.length() == n)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n            else if(word.length() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n            i++;\n        }\n        else\n        {\n            word += s[i];\n            i++;\n        }\n    }\n    if(word.length() == n)\n        words.push_back(word);\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpimgetykd.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpimgetykd.d(25): Error: no property `length` for type `string`\n/tmp/tmpimgetykd.d(30): Error: no property `length` for type `string`\n/tmp/tmpimgetykd.d(34): Error: no property `length` for type `string`\n/tmp/tmpimgetykd.d(36): Error: no property `push_back` for type `string[]`\n/tmp/tmpimgetykd.d(39): Error: no property `length` for type `string`\n/tmp/tmpimgetykd.d(41): Error: no property `push_back` for type `string[]`\n/tmp/tmpimgetykd.d(48): Error: slice `word` is not mutable\n/tmp/tmpimgetykd.d(52): Error: no property `length` for type `string`\n/tmp/tmpimgetykd.d(53): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimgetykd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty())\n        return {};\n    \n    string[] words = {};\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words.push_back(word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpua6r93sb.d(24): Error: no property `empty` for type `string`\n/tmp/tmpua6r93sb.d(27): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpua6r93sb.d(29): Error: no property `length` for type `string`\n/tmp/tmpua6r93sb.d(36): Error: no property `length` for type `string`\n/tmp/tmpua6r93sb.d(41): Error: slice `word` is not mutable\n/tmp/tmpua6r93sb.d(44): Error: no property `length` for type `string`\n/tmp/tmpua6r93sb.d(45): Error: no property `push_back` for type `string[]`\n/tmp/tmpua6r93sb.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpua6r93sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty())\n        return {};\n    string[] words = {};\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (words.empty())\n                continue;\n            words = {};\n            continue;\n        }\n        if (s[i] == ' ')\n            continue;\n        if (words.empty())\n            words = {s[i]};\n        else {\n            words.push_back(s[i]);\n        }\n    }\n    if (words.empty())\n        return {};\n    if (words.size() == n)\n        return words;\n    string[] res = {};\n    for (int i = 0; i < words.size(); ++i) {\n        string word = words[i];\n        for (int j = 0; j < word.size(); ++j) {\n            string sub = word.substr(0, j + 1);\n            string sub2 = word.substr(j + 1);\n            if (sub2.empty())\n                continue;\n            if (sub2.size() == n) {\n                res.push_back(sub);\n                break;\n            }\n            if (sub2.size() > n)\n                continue;\n            if (sub2.size() < n) {\n                string[] sub2_words = select_words(sub2, n - sub2.size());\n                for (int k = 0; k < sub2_words.size(); ++k) {\n                    res.push_back(sub + sub2_words[k]);\n                }\n                break;\n            }\n            string[] sub2_words = select_words(sub2, n);\n            for (int k = 0; k < sub2_words.size(); ++k) {\n                res.push_back(sub + sub2_words[k]);\n            }\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpdyxcg1iz.d(37): Error: found `}` when expecting `;` following statement\n/tmp/tmpdyxcg1iz.d(37): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpdyxcg1iz.d(38): Error: found `else` without a corresponding `if`, `version` or `debug` statement\n/tmp/tmpdyxcg1iz.d(41): Error: found `}` when expecting `;` following statement\n/tmp/tmpdyxcg1iz.d(76): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdyxcg1iz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    int i = 0;\n    while (i < s.length())\n    {\n        int j = i;\n        while (j < s.length() && s[j] != ' ')\n            j++;\n        if (j - i == n)\n        {\n            string word = s.substr(i, j - i);\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = word;\n            i = j + 1;\n        }\n        else\n            i = j + 1;\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpwe39825w.d(36): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwe39825w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            if(words.length == n)\n                return words;\n            words = append(words, s.substr(i, s.length() - i));\n        }\n        else\n        {\n            if(words.length == n)\n                return words;\n            words = append(words, s.substr(i, 1));\n        }\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpnnz1bc5d.d(24): Error: no property `length` for type `string`\n/tmp/tmpnnz1bc5d.d(29): Error: no property `length` for type `string`\n/tmp/tmpnnz1bc5d.d(35): Error: undefined identifier `append`\n/tmp/tmpnnz1bc5d.d(41): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnnz1bc5d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (word.length() == n) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.length() == n) {\n        words.push_back(word);\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpxc3vhj6s.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpxc3vhj6s.d(25): Error: no property `empty` for type `string`\n/tmp/tmpxc3vhj6s.d(28): Error: no property `length` for type `string`\n/tmp/tmpxc3vhj6s.d(30): Error: no property `length` for type `string`\n/tmp/tmpxc3vhj6s.d(31): Error: no property `push_back` for type `string[]`\n/tmp/tmpxc3vhj6s.d(35): Error: slice `word` is not mutable\n/tmp/tmpxc3vhj6s.d(38): Error: no property `length` for type `string`\n/tmp/tmpxc3vhj6s.d(39): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxc3vhj6s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return new string[0];\n    string[] words = new string[0];\n    string[] words_temp = new string[0];\n    string[] words_temp_temp = new string[0];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n_temp = 0;\n    int n_temp_temp = 0;\n    int n_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int n_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmp3dfnzvrj.d(50): Error: semicolon expected, not `unittest`\n/tmp/tmp3dfnzvrj.d(50): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3dfnzvrj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    \n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (k == n)\n        {\n            words.push_back(s.substr(j, i - j));\n            k = 0;\n            j = i;\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\n        {\n            k++;\n            i++;\n            continue;\n        }\n        \n        if (s[i] == 'l' && s[i + 1] == 'l')\n        {\n            i += 2;\n            continue;\n        }\n        \n        if (s[i] == 'n' && s[i + 1] == 'n')\n        {\n            i += 2;\n            continue;\n        }\n        \n        if (s[i] == 'r' && s[i + 1] == 'r')\n        {\n            i += 2;\n            continue;\n        }\n        \n        if (s[i] == 's' && s[i + 1] == 's')\n        {\n            i += 2;\n            continue;\n        }\n        \n        if (s[i] == 't' && s[i + 1] == 't')\n        {\n            i += 2;\n            continue;\n        }\n        \n        if (s[i] == 'w' && s[i + 1] == 'w')\n        {\n            i += 2;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmp_ok5p5g5.d(101): Error: found `unittest` instead of statement\n/tmp/tmp_ok5p5g5.d(113): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_ok5p5g5.d(113): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ok5p5g5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    string[] word = {\"\"};\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        if (word[0].length() == n)\n        {\n            words.push_back(word[0]);\n            word[0] = \"\";\n        }\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        word[0] += s[i];\n    }\n    \n    if (word[0].length() == n)\n        words.push_back(word[0]);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmp_ps7_mnn.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp_ps7_mnn.d(25): Error: no property `length` for type `string`\n/tmp/tmp_ps7_mnn.d(28): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp_ps7_mnn.d(30): Error: no property `length` for type `string`\n/tmp/tmp_ps7_mnn.d(35): Error: no property `length` for type `string`\n/tmp/tmp_ps7_mnn.d(37): Error: no property `push_back` for type `string[]`\n/tmp/tmp_ps7_mnn.d(47): Error: slice `word[0]` is not mutable\n/tmp/tmp_ps7_mnn.d(50): Error: no property `length` for type `string`\n/tmp/tmp_ps7_mnn.d(51): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ps7_mnn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if(s.empty())\n        return words;\n    string word = \"\";\n    int i = 0;\n    while(i < s.size())\n    {\n        if(s[i] == ' ')\n        {\n            if(word.size() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n            i++;\n        }\n        else\n        {\n            word += s[i];\n            i++;\n        }\n    }\n    if(word.size() > 0)\n        words.push_back(word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmps18pnd_b.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmps18pnd_b.d(25): Error: no property `empty` for type `string`\n/tmp/tmps18pnd_b.d(29): Error: no property `size` for type `string`\n/tmp/tmps18pnd_b.d(33): Error: no property `size` for type `string`\n/tmp/tmps18pnd_b.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmps18pnd_b.d(42): Error: slice `word` is not mutable\n/tmp/tmps18pnd_b.d(46): Error: no property `size` for type `string`\n/tmp/tmps18pnd_b.d(47): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps18pnd_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0) return words;\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (word.length() > 0) {\n                words = append(words, word);\n                word = \"\";\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0) {\n        words = append(words, word);\n    }\n    \n    int cnt = 0;\n    for (int i = 0; i < words.length; i++) {\n        if (words[i].length() > 0) {\n            cnt += words[i].length();\n        }\n    }\n    \n    if (cnt == n) {\n        return words;\n    }\n    \n    if (words.length == 0) return words;\n    \n    int start = 0;\n    int end = words.length - 1;\n    \n    while (start < end) {\n        int mid = (start + end) / 2;\n        if (words[mid].length() == n) {\n            return words;\n        }\n        if (words[mid].length() < n) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    \n    if (words[start].length() == n) {\n        return words;\n    }\n    \n    if (words[end].length() == n) {\n        return words;\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmp5fp7pyga.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp5fp7pyga.d(25): Error: no property `length` for type `string`\n/tmp/tmp5fp7pyga.d(27): Error: no property `length` for type `string`\n/tmp/tmp5fp7pyga.d(29): Error: no property `length` for type `string`\n/tmp/tmp5fp7pyga.d(30): Error: undefined identifier `append`\n/tmp/tmp5fp7pyga.d(34): Error: slice `word` is not mutable\n/tmp/tmp5fp7pyga.d(37): Error: no property `length` for type `string`\n/tmp/tmp5fp7pyga.d(38): Error: undefined identifier `append`\n/tmp/tmp5fp7pyga.d(43): Error: no property `length` for type `string`\n/tmp/tmp5fp7pyga.d(44): Error: no property `length` for type `string`\n/tmp/tmp5fp7pyga.d(55): Error: cannot implicitly convert expression `words.length - 1LU` of type `ulong` to `int`\n/tmp/tmp5fp7pyga.d(59): Error: no property `length` for type `string`\n/tmp/tmp5fp7pyga.d(62): Error: no property `length` for type `string`\n/tmp/tmp5fp7pyga.d(69): Error: no property `length` for type `string`\n/tmp/tmp5fp7pyg",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    // split the string into words\n    vector<string> words_vec = split(s, ' ');\n    \n    // count the number of consonants in each word\n    for (auto& word : words_vec) {\n        int count = 0;\n        for (auto& c : word) {\n            if (c == ' ') continue;\n            count++;\n        }\n        if (count == n) words.push_back(word);\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmppt_59i68.d(28): Error: found `>` when expecting `;` following statement\n/tmp/tmppt_59i68.d(31): Error: basic type expected, not `&`\n/tmp/tmppt_59i68.d(31): Error: no identifier for declarator `_error_`\n/tmp/tmppt_59i68.d(31): Error: found `:` when expecting `;` following `for` condition\n/tmp/tmppt_59i68.d(33): Error: basic type expected, not `&`\n/tmp/tmppt_59i68.d(33): Error: no identifier for declarator `_error_`\n/tmp/tmppt_59i68.d(33): Error: found `:` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppt_59i68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.length() == 0)\n        return words;\n    string[] words_ = {};\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        string word = \"\";\n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        if (word.length() == n)\n            words_ = append(words_, word);\n    }\n    words = words_;\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmp18biv8ff.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp18biv8ff.d(25): Error: no property `length` for type `string`\n/tmp/tmp18biv8ff.d(27): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp18biv8ff.d(28): Error: no property `length` for type `string`\n/tmp/tmp18biv8ff.d(33): Error: no property `length` for type `string`\n/tmp/tmp18biv8ff.d(37): Error: slice `word` is not mutable\n/tmp/tmp18biv8ff.d(39): Error: no property `length` for type `string`\n/tmp/tmp18biv8ff.d(40): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp18biv8ff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            if (count == n)\n            {\n                words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n                words[words.length - 1] = s.substr(j, i - j);\n                count = 0;\n            }\n            i++;\n        }\n        else\n        {\n            count++;\n            i++;\n        }\n    }\n    if (count == n)\n    {\n        words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        words[words.length - 1] = s.substr(j, i - j);\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmp7q0d2f7v.d(37): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\n/tmp/tmp7q0d2f7v.d(51): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7q0d2f7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0)\n        words.push_back(word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpmbihqaof.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpmbihqaof.d(25): Error: no property `empty` for type `string`\n/tmp/tmpmbihqaof.d(29): Error: no property `length` for type `string`\n/tmp/tmpmbihqaof.d(33): Error: no property `length` for type `string`\n/tmp/tmpmbihqaof.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmpmbihqaof.d(41): Error: slice `word` is not mutable\n/tmp/tmpmbihqaof.d(44): Error: no property `length` for type `string`\n/tmp/tmpmbihqaof.d(45): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbihqaof.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0) return words;\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (word.length() > 0) {\n                words = append(words, word);\n                word = \"\";\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0) {\n        words = append(words, word);\n    }\n    \n    int n_consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        n_consonants++;\n    }\n    \n    if (n_consonants == n) {\n        return words;\n    }\n    \n    for (int i = 0; i < words.length; i++) {\n        string[] words_i = select_words(words[i], n - n_consonants);\n        for (int j = 0; j < words_i.length; j++) {\n            words = append(words, words_i[j]);\n        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmp2hw9hbyq.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp2hw9hbyq.d(25): Error: no property `length` for type `string`\n/tmp/tmp2hw9hbyq.d(27): Error: no property `length` for type `string`\n/tmp/tmp2hw9hbyq.d(29): Error: no property `length` for type `string`\n/tmp/tmp2hw9hbyq.d(30): Error: undefined identifier `append`\n/tmp/tmp2hw9hbyq.d(34): Error: slice `word` is not mutable\n/tmp/tmp2hw9hbyq.d(37): Error: no property `length` for type `string`\n/tmp/tmp2hw9hbyq.d(38): Error: undefined identifier `append`\n/tmp/tmp2hw9hbyq.d(42): Error: no property `length` for type `string`\n/tmp/tmp2hw9hbyq.d(54): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2hw9hbyq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty())\n        return {};\n    string[] ans = {};\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        string temp = s.substr(i, n);\n        if(temp.length() == n)\n            ans.push_back(temp);\n        for(int j = i; j < s.length() - n + 1; j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            if(s[j] == s[i])\n            {\n                temp = s.substr(i, n);\n                if(temp.length() == n)\n                    ans.push_back(temp);\n                i = j;\n                break;\n            }\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpd3n2h3l4.d(24): Error: no property `empty` for type `string`\n/tmp/tmpd3n2h3l4.d(26): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpd3n2h3l4.d(27): Error: no property `length` for type `string`\n/tmp/tmpd3n2h3l4.d(31): Error: no property `substr` for type `string`\n/tmp/tmpd3n2h3l4.d(32): Error: no property `length` for type `string`\n/tmp/tmpd3n2h3l4.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmpd3n2h3l4.d(34): Error: no property `length` for type `string`\n/tmp/tmpd3n2h3l4.d(40): Error: no property `substr` for type `string`\n/tmp/tmpd3n2h3l4.d(41): Error: no property `length` for type `string`\n/tmp/tmpd3n2h3l4.d(42): Error: no property `push_back` for type `string[]`\n/tmp/tmpd3n2h3l4.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3n2h3l4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0)\n        words = append(words, word);\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpmzbgpkqa.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpmzbgpkqa.d(25): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(28): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(32): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(34): Error: undefined identifier `append`\n/tmp/tmpmzbgpkqa.d(40): Error: slice `word` is not mutable\n/tmp/tmpmzbgpkqa.d(43): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(44): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmzbgpkqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (word.length() > 0) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0) {\n        words.push_back(word);\n    }\n    \n    if (words.length == 0) return words;\n    \n    int n_consonants = 0;\n    for (int i = 0; i < words.length; i++) {\n        n_consonants += words[i].length();\n    }\n    \n    if (n_consonants > n) {\n        return words;\n    }\n    \n    int start = 0;\n    int end = 0;\n    while (end < words.length) {\n        if (words[end].length() == n) {\n            string[] result = {};\n            for (int i = start; i <= end; i++) {\n                result.push_back(words[i]);\n            }\n            return result;\n        }\n        \n        if (words[end].length() < n) {\n            end++;\n            continue;\n        }\n        \n        start = end;\n        end++;\n        while (end < words.length && words[end].length() == n) {\n            end++;\n        }\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpqqh5u7y3.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpqqh5u7y3.d(25): Error: no property `empty` for type `string`\n/tmp/tmpqqh5u7y3.d(28): Error: no property `length` for type `string`\n/tmp/tmpqqh5u7y3.d(30): Error: no property `length` for type `string`\n/tmp/tmpqqh5u7y3.d(31): Error: no property `push_back` for type `string[]`\n/tmp/tmpqqh5u7y3.d(35): Error: slice `word` is not mutable\n/tmp/tmpqqh5u7y3.d(38): Error: no property `length` for type `string`\n/tmp/tmpqqh5u7y3.d(39): Error: no property `push_back` for type `string[]`\n/tmp/tmpqqh5u7y3.d(46): Error: no property `length` for type `string`\n/tmp/tmpqqh5u7y3.d(56): Error: no property `length` for type `string`\n/tmp/tmpqqh5u7y3.d(57): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpqqh5u7y3.d(59): Error: no property `push_back` for type `string[]`\n/tmp/tmpqqh5u7y3.d(64): Error: no property `length` for type `string`\n/tmp/tmpqqh5u7y3.d(71): Error: no property `length` for type `string`\nFailed: [\"dmd",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        while (i < s.length() && s[i] != ' ')\n        {\n            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\n            {\n                count++;\n                if (count == n)\n                {\n                    words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n                    words[words.length - 1] = s.substr(j, i - j);\n                    break;\n                }\n            }\n            i++;\n        }\n        j = i;\n        i++;\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpx4xxmd59.d(46): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4xxmd59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            if (count == n)\n            {\n                words[k] = s.substr(j, i - j);\n                k++;\n                count = 0;\n            }\n            j = i + 1;\n        }\n        else\n        {\n            count++;\n            i++;\n        }\n    }\n    if (count == n)\n    {\n        words[k] = s.substr(j, i - j);\n        k++;\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpol4a4wkn.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpol4a4wkn.d(25): Error: no property `length` for type `string`\n/tmp/tmpol4a4wkn.d(31): Error: no property `length` for type `string`\n/tmp/tmpol4a4wkn.d(37): Error: no property `substr` for type `string`\n/tmp/tmpol4a4wkn.d(51): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpol4a4wkn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return {};\n    string[] result = {};\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        if (n == 0) {\n            result = {s.substr(i)};\n            break;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ') {\n            result = {};\n            continue;\n        }\n        if (s[i] == ' ')\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmp5v65lk3e.d(29): Error: found `}` when expecting `;` following statement\n/tmp/tmp5v65lk3e.d(29): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmp5v65lk3e.d(32): Error: found `if` when expecting `;` following statement\n/tmp/tmp5v65lk3e.d(32): Error: found `==` when expecting `)`\n/tmp/tmp5v65lk3e.d(32): Error: missing `{ ... }` for function literal\n/tmp/tmp5v65lk3e.d(32): Error: found `32U` when expecting `;` following statement\n/tmp/tmp5v65lk3e.d(32): Error: found `)` instead of statement\n/tmp/tmp5v65lk3e.d(33): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmp5v65lk3e.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5v65lk3e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.size(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.size() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if (word.size() > 0)\n        words = append(words, word);\n    \n    if (words.size() == 0)\n        return words;\n    \n    string[] result = {\"\"};\n    for (int i = 0; i < words.size(); i++)\n    {\n        if (words[i].size() == n)\n        {\n            result = append(result, words[i]);\n        }\n        else\n        {\n            for (int j = 0; j < words[i].size(); j++)\n            {\n                string temp = words[i];\n                temp.erase(j, 1);\n                if (temp.size() == n)\n                {\n                    result = append(result, words[i]);\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpovsl9bow.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpovsl9bow.d(25): Error: no property `empty` for type `string`\n/tmp/tmpovsl9bow.d(29): Error: no property `size` for type `string`\n/tmp/tmpovsl9bow.d(33): Error: no property `size` for type `string`\n/tmp/tmpovsl9bow.d(35): Error: undefined identifier `append`\n/tmp/tmpovsl9bow.d(41): Error: slice `word` is not mutable\n/tmp/tmpovsl9bow.d(44): Error: no property `size` for type `string`\n/tmp/tmpovsl9bow.d(45): Error: undefined identifier `append`\n/tmp/tmpovsl9bow.d(47): Error: no property `size` for type `string[]`\n/tmp/tmpovsl9bow.d(50): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpovsl9bow.d(51): Error: no property `size` for type `string[]`\n/tmp/tmpovsl9bow.d(53): Error: no property `size` for type `string`\n/tmp/tmpovsl9bow.d(55): Error: undefined identifier `append`\n/tmp/tmpovsl9bow.d(59): Error: no property `size` for type `string`\n/tmp/tmpovsl9bow.d(62): Error: no property `erase` for type `stri",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0)\n        words = append(words, word);\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpmzbgpkqa.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpmzbgpkqa.d(25): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(28): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(32): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(34): Error: undefined identifier `append`\n/tmp/tmpmzbgpkqa.d(40): Error: slice `word` is not mutable\n/tmp/tmpmzbgpkqa.d(43): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(44): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmzbgpkqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (words.length == n)\n                return words;\n            \n            words = append(words, s.substr(i, s.length() - i));\n            i--;\n        }\n        else\n        {\n            if (words.length == n)\n                return words;\n            \n            words = append(words, s.substr(i, 1));\n        }\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpf2afumui.d(24): Error: no property `length` for type `string`\n/tmp/tmpf2afumui.d(29): Error: no property `length` for type `string`\n/tmp/tmpf2afumui.d(36): Error: undefined identifier `append`\n/tmp/tmpf2afumui.d(44): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2afumui.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.length() == 0)\n        return words;\n    \n    string word = \"\";\n    int i = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n        i++;\n    }\n    if (word.length() > 0)\n        words.push_back(word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmph91dem4d.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmph91dem4d.d(25): Error: no property `length` for type `string`\n/tmp/tmph91dem4d.d(30): Error: no property `length` for type `string`\n/tmp/tmph91dem4d.d(34): Error: no property `length` for type `string`\n/tmp/tmph91dem4d.d(36): Error: no property `push_back` for type `string[]`\n/tmp/tmph91dem4d.d(42): Error: slice `word` is not mutable\n/tmp/tmph91dem4d.d(46): Error: no property `length` for type `string`\n/tmp/tmph91dem4d.d(47): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph91dem4d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty())\n        return {};\n    string[] ans = {};\n    for(int i = 0; i < s.size(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        string word = \"\";\n        for(int j = i; j < s.size(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        if(word.size() == n)\n            ans.push_back(word);\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpe79idsbz.d(24): Error: no property `empty` for type `string`\n/tmp/tmpe79idsbz.d(26): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpe79idsbz.d(27): Error: no property `size` for type `string`\n/tmp/tmpe79idsbz.d(32): Error: no property `size` for type `string`\n/tmp/tmpe79idsbz.d(36): Error: slice `word` is not mutable\n/tmp/tmpe79idsbz.d(38): Error: no property `size` for type `string`\n/tmp/tmpe79idsbz.d(39): Error: no property `push_back` for type `string[]`\n/tmp/tmpe79idsbz.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe79idsbz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] words = {};\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.length() == n) words.push_back(word);\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpquzp20ed.d(24): Error: no property `empty` for type `string`\n/tmp/tmpquzp20ed.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpquzp20ed.d(26): Error: no property `length` for type `string`\n/tmp/tmpquzp20ed.d(29): Error: no property `length` for type `string`\n/tmp/tmpquzp20ed.d(31): Error: slice `word` is not mutable\n/tmp/tmpquzp20ed.d(33): Error: no property `length` for type `string`\n/tmp/tmpquzp20ed.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmpquzp20ed.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpquzp20ed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s.charAt(i) == ' ')\n            continue;\n        \n        string word = \"\";\n        for (int j = i; j < s.length(); j++)\n        {\n            if (s.charAt(j) == ' ')\n                break;\n            word += s.charAt(j);\n        }\n        \n        if (word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmph0xy8uzg.d(25): Error: no property `length` for type `string`\n/tmp/tmph0xy8uzg.d(28): Error: no property `length` for type `string`\n/tmp/tmph0xy8uzg.d(30): Error: no property `charAt` for type `string`\n/tmp/tmph0xy8uzg.d(34): Error: no property `length` for type `string`\n/tmp/tmph0xy8uzg.d(36): Error: no property `charAt` for type `string`\n/tmp/tmph0xy8uzg.d(38): Error: no property `charAt` for type `string`\n/tmp/tmph0xy8uzg.d(41): Error: no property `length` for type `string`\n/tmp/tmph0xy8uzg.d(42): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0xy8uzg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    int i = 0;\n    while (i < s.length())\n    {\n        int j = i;\n        while (j < s.length() && s[j] != ' ')\n            j++;\n        if (j - i == n)\n        {\n            words = append(words, s.substr(i, j - i));\n            i = j;\n        }\n        else\n            i = j;\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpg2sra4im.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpg2sra4im.d(25): Error: no property `length` for type `string`\n/tmp/tmpg2sra4im.d(28): Error: no property `length` for type `string`\n/tmp/tmpg2sra4im.d(31): Error: no property `length` for type `string`\n/tmp/tmpg2sra4im.d(35): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2sra4im.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return {};\n    string[] ans = {};\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.length() == n) ans.push_back(word);\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpeuasqtm7.d(24): Error: no property `length` for type `string`\n/tmp/tmpeuasqtm7.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpeuasqtm7.d(26): Error: no property `length` for type `string`\n/tmp/tmpeuasqtm7.d(29): Error: no property `length` for type `string`\n/tmp/tmpeuasqtm7.d(31): Error: slice `word` is not mutable\n/tmp/tmpeuasqtm7.d(33): Error: no property `length` for type `string`\n/tmp/tmpeuasqtm7.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmpeuasqtm7.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeuasqtm7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.empty()) return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n_consonants = 0;\n    \n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            if (n_consonants == n) {\n                words[k] = s.substr(j, i-j);\n                k++;\n                j = i+1;\n            }\n            i++;\n        } else {\n            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n                n_consonants++;\n            }\n            i++;\n        }\n    }\n    \n    if (n_consonants == n) {\n        words[k] = s.substr(j, i-j);\n        k++;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpmtpft8zy.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpmtpft8zy.d(25): Error: no property `empty` for type `string`\n/tmp/tmpmtpft8zy.d(34): Error: no property `size` for type `string`\n/tmp/tmpmtpft8zy.d(37): Error: no property `substr` for type `string`\n/tmp/tmpmtpft8zy.d(51): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmtpft8zy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return {};\n    if (n == 0) return {};\n    \n    string[] result = {};\n    \n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        \n        string word = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        \n        if (word.length() == n) {\n            result.push_back(word);\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpljleyh6y.d(24): Error: no property `length` for type `string`\n/tmp/tmpljleyh6y.d(27): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpljleyh6y.d(29): Error: no property `length` for type `string`\n/tmp/tmpljleyh6y.d(33): Error: no property `length` for type `string`\n/tmp/tmpljleyh6y.d(35): Error: slice `word` is not mutable\n/tmp/tmpljleyh6y.d(38): Error: no property `length` for type `string`\n/tmp/tmpljleyh6y.d(39): Error: no property `push_back` for type `string[]`\n/tmp/tmpljleyh6y.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\n/tmp/tmpljleyh6y.d(25): Error: cannot implicitly convert expression `__lambda4` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljleyh6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        \n        words[words.length] = word;\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpeztjtyhp.d(45): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeztjtyhp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    \n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (count == n)\n        {\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = s.substr(j, k - j);\n            return words;\n        }\n        \n        while (i < s.length() && s[i] != ' ')\n        {\n            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n            {\n                count++;\n            }\n            i++;\n        }\n        \n        j = i;\n        k = i;\n        i++;\n    }\n    \n    if (count == n)\n    {\n        words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        words[words.length - 1] = s.substr(j, k - j);\n        return words;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp_vuj4kxv.d(43): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\n/tmp/tmp_vuj4kxv.d(64): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vuj4kxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() == n)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if (word.length() == n)\n        words.push_back(word);\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpcp7_ozqc.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpcp7_ozqc.d(25): Error: no property `empty` for type `string`\n/tmp/tmpcp7_ozqc.d(29): Error: no property `length` for type `string`\n/tmp/tmpcp7_ozqc.d(33): Error: no property `length` for type `string`\n/tmp/tmpcp7_ozqc.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmpcp7_ozqc.d(41): Error: slice `word` is not mutable\n/tmp/tmpcp7_ozqc.d(44): Error: no property `length` for type `string`\n/tmp/tmpcp7_ozqc.d(45): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcp7_ozqc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        j = i;\n        while (j < s.length() && s[j] != ' ')\n        {\n            j++;\n        }\n        \n        if (j - i == n)\n        {\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = s.substr(i, j - i);\n        }\n        \n        i = j;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpxjloqq3m.d(46): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjloqq3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpt0d6_cq5.d(24): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(29): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(36): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(41): Error: slice `word` is not mutable\n/tmp/tmpt0d6_cq5.d(44): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0d6_cq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    int n_consonants = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ') continue;\n        n_consonants++;\n        if (n_consonants == n)\n        {\n            words.push_back(s.substr(i, s.length() - i));\n            n_consonants = 0;\n        }\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpnfo2wnfn.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpnfo2wnfn.d(25): Error: no property `empty` for type `string`\n/tmp/tmpnfo2wnfn.d(28): Error: no property `length` for type `string`\n/tmp/tmpnfo2wnfn.d(34): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnfo2wnfn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0)\n        words = append(words, word);\n    \n    string[] result = {\"\"};\n    for (int i = 0; i < words.length; i++)\n    {\n        if (words[i].length() == n)\n            result = append(result, words[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpq5mtqw5i.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpq5mtqw5i.d(25): Error: no property `length` for type `string`\n/tmp/tmpq5mtqw5i.d(28): Error: no property `length` for type `string`\n/tmp/tmpq5mtqw5i.d(32): Error: no property `length` for type `string`\n/tmp/tmpq5mtqw5i.d(34): Error: undefined identifier `append`\n/tmp/tmpq5mtqw5i.d(40): Error: slice `word` is not mutable\n/tmp/tmpq5mtqw5i.d(43): Error: no property `length` for type `string`\n/tmp/tmpq5mtqw5i.d(44): Error: undefined identifier `append`\n/tmp/tmpq5mtqw5i.d(46): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpq5mtqw5i.d(49): Error: no property `length` for type `string`\n/tmp/tmpq5mtqw5i.d(50): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5mtqw5i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty())\n        return {};\n    string[] res = {};\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (n == 0)\n                return res;\n            n--;\n        }\n        else {\n            if (n == 0)\n                res.push_back(s.substr(i, s.size() - i));\n            n--;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpbcvsy6pr.d(24): Error: no property `empty` for type `string`\n/tmp/tmpbcvsy6pr.d(26): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpbcvsy6pr.d(27): Error: no property `size` for type `string`\n/tmp/tmpbcvsy6pr.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmpbcvsy6pr.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcvsy6pr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] ret = {};\n    int i = 0;\n    int j = 0;\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        while (i < s.size() && s[i] != ' ') {\n            if (s[i] == ' ') {\n                i++;\n                continue;\n            }\n            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n                i++;\n                continue;\n            }\n            if (s[i] == 'l' && s[i + 1] == 'l') {\n                i += 2;\n                continue;\n            }\n            if (s[i] == 'n' && s[i + 1] == ' ') {\n                i += 2;\n                continue;\n            }\n            if (s[i] == 's' && s[i + 1] == ' ') {\n                i += 2;\n                continue;\n            }\n            if (s[i] == 'r' && s[i + 1] == ' ') {\n                i += 2;\n                continue;\n            }\n            if (s[i] == 't' && s[i + 1] == ' ') {\n                i += 2;\n                continue;\n            }\n            if (s[i] == 'm' && s[i + 1] == ' ') {\n                i += 2;\n                continue;\n            }\n            if (s[i] == 'h' && s[i + 1] == ' ') {\n                i += 2;\n                continue;\n            }\n            if (s[i] == 'h' && s[i + 1] == 'a' && s[i + 2] == 'd') {\n                i += 3;\n                continue;\n            }\n            if (s[i] == 'h' && s[i + 1] == 'a'\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpj2ov7w__.d(75): Error: found `unittest` when expecting `)`\n/tmp/tmpj2ov7w__.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj2ov7w__.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj2ov7w__.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2ov7w__.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpz5acts9k.d(24): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(29): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(36): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(41): Error: slice `word` is not mutable\n/tmp/tmpz5acts9k.d(44): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5acts9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        \n        words[words.length] = word;\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp2f7639t1.d(45): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2f7639t1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpt0d6_cq5.d(24): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(29): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(36): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(41): Error: slice `word` is not mutable\n/tmp/tmpt0d6_cq5.d(44): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0d6_cq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.length() == 0)\n        return words;\n    \n    string word = \"\";\n    int cnt = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (cnt == n)\n            {\n                words.push_back(word);\n                word = \"\";\n                cnt = 0;\n            }\n            else\n                cnt++;\n        }\n        else\n        {\n            word += s[i];\n            cnt++;\n        }\n    }\n    if (cnt == n)\n        words.push_back(word);\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmphe46xwra.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmphe46xwra.d(25): Error: no property `length` for type `string`\n/tmp/tmphe46xwra.d(30): Error: no property `length` for type `string`\n/tmp/tmphe46xwra.d(36): Error: no property `push_back` for type `string[]`\n/tmp/tmphe46xwra.d(45): Error: slice `word` is not mutable\n/tmp/tmphe46xwra.d(50): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphe46xwra.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.length() == 0)\n        return words;\n    \n    string word = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            if(word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    \n    if(word.length() > 0)\n        words = append(words, word);\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpz8gcmuho.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpz8gcmuho.d(25): Error: no property `length` for type `string`\n/tmp/tmpz8gcmuho.d(29): Error: no property `length` for type `string`\n/tmp/tmpz8gcmuho.d(33): Error: no property `length` for type `string`\n/tmp/tmpz8gcmuho.d(35): Error: undefined identifier `append`\n/tmp/tmpz8gcmuho.d(41): Error: slice `word` is not mutable\n/tmp/tmpz8gcmuho.d(45): Error: no property `length` for type `string`\n/tmp/tmpz8gcmuho.d(46): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8gcmuho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpt0d6_cq5.d(24): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(29): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(36): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(41): Error: slice `word` is not mutable\n/tmp/tmpt0d6_cq5.d(44): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0d6_cq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty())\n        return {};\n    string[] words = {};\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (word.length() > 0) {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0)\n        words.push_back(word);\n    \n    int cnt = 0;\n    for (int i = 0; i < words.length(); i++) {\n        if (words[i].length() == n)\n            cnt++;\n    }\n    \n    string[] result = {};\n    for (int i = 0; i < words.length(); i++) {\n        if (words[i].length() == n)\n            result.push_back(words[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp6r98158k.d(24): Error: no property `empty` for type `string`\n/tmp/tmp6r98158k.d(26): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp6r98158k.d(28): Error: no property `length` for type `string`\n/tmp/tmp6r98158k.d(30): Error: no property `length` for type `string`\n/tmp/tmp6r98158k.d(31): Error: no property `push_back` for type `string[]`\n/tmp/tmp6r98158k.d(36): Error: slice `word` is not mutable\n/tmp/tmp6r98158k.d(39): Error: no property `length` for type `string`\n/tmp/tmp6r98158k.d(40): Error: no property `push_back` for type `string[]`\n/tmp/tmp6r98158k.d(43): Error: no property `length` for type `string[]`\n/tmp/tmp6r98158k.d(44): Error: no property `length` for type `string`\n/tmp/tmp6r98158k.d(48): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp6r98158k.d(49): Error: no property `length` for type `string[]`\n/tmp/tmp6r98158k.d(50): Error: no property `length` for type `string`\n/tmp/tmp6r98158k.d(51): Error: no property `push_back` for type `string[]`\n/tmp/tmp6",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty()) return {};\n    string[] words = {};\n    for(int i = 0; i < s.size(); i++)\n    {\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == ' ') continue;\n        if(s[i] == '\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp632wrnov.d(61): Error: unterminated character constant\n/tmp/tmp632wrnov.d(62): Error: found `unittest` when expecting `)`\n/tmp/tmp632wrnov.d(74): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp632wrnov.d(74): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp632wrnov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    int i = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n        i++;\n    }\n    if (word.length() > 0)\n        words.push_back(word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmprriujto4.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmprriujto4.d(25): Error: no property `empty` for type `string`\n/tmp/tmprriujto4.d(30): Error: no property `length` for type `string`\n/tmp/tmprriujto4.d(34): Error: no property `length` for type `string`\n/tmp/tmprriujto4.d(36): Error: no property `push_back` for type `string[]`\n/tmp/tmprriujto4.d(42): Error: slice `word` is not mutable\n/tmp/tmprriujto4.d(46): Error: no property `length` for type `string`\n/tmp/tmprriujto4.d(47): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprriujto4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    int i = 0;\n    while (i < s.size())\n    {\n        if (s[i] == ' ')\n        {\n            if (word.size() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n            i++;\n        }\n        else\n        {\n            word += s[i];\n            i++;\n        }\n    }\n    if (word.size() > 0)\n        words.push_back(word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpsiw172zx.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpsiw172zx.d(25): Error: no property `empty` for type `string`\n/tmp/tmpsiw172zx.d(30): Error: no property `size` for type `string`\n/tmp/tmpsiw172zx.d(34): Error: no property `size` for type `string`\n/tmp/tmpsiw172zx.d(36): Error: no property `push_back` for type `string[]`\n/tmp/tmpsiw172zx.d(43): Error: slice `word` is not mutable\n/tmp/tmpsiw172zx.d(47): Error: no property `size` for type `string`\n/tmp/tmpsiw172zx.d(48): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsiw172zx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    string[] words = new string[0];\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            for(int j = 0; j < words.length; j++)\n            {\n                if(words[j].length() == n)\n                    return words;\n            }\n            words = new string[words.length + 1];\n            words[words.length - 1] = s.substr(i, n);\n        }\n        else\n        {\n            for(int j = 0; j < words.length; j++)\n            {\n                if(words[j].length() == n)\n                    return words;\n            }\n            words = new string[words.length + 1];\n            words[words.length - 1] = s.substr(i, n);\n        }\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp7pgrcwtw.d(24): Error: no property `length` for type `string`\n/tmp/tmp7pgrcwtw.d(27): Error: no property `length` for type `string`\n/tmp/tmp7pgrcwtw.d(33): Error: no property `length` for type `string`\n/tmp/tmp7pgrcwtw.d(37): Error: no property `substr` for type `string`\n/tmp/tmp7pgrcwtw.d(43): Error: no property `length` for type `string`\n/tmp/tmp7pgrcwtw.d(47): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pgrcwtw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return {};\n    string[] ans = {};\n    int i = 0;\n    while (i < s.length()) {\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        int j = i;\n        while (j < s.length() && s[j] != ' ') {\n            j++;\n        }\n        if (j - i == n) {\n            string temp = s.substr(i, j - i);\n            if (std::find(ans.begin(), ans.end(), temp) == ans.end()) {\n                ans.push_back(temp);\n            }\n        }\n        i = j;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpym5sm6q9.d(38): Error: found `:` when expecting `)`\n/tmp/tmpym5sm6q9.d(38): Error: found `:` instead of statement\n/tmp/tmpym5sm6q9.d(44): Error: declaration expected, not `return`\n/tmp/tmpym5sm6q9.d(45): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpym5sm6q9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] ans = {};\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') continue;\n        string word = s.substr(i, n);\n        if (word.size() == n) {\n            ans.push_back(word);\n        }\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmptzol7k74.d(24): Error: no property `empty` for type `string`\n/tmp/tmptzol7k74.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmptzol7k74.d(26): Error: no property `size` for type `string`\n/tmp/tmptzol7k74.d(28): Error: no property `substr` for type `string`\n/tmp/tmptzol7k74.d(29): Error: no property `size` for type `string`\n/tmp/tmptzol7k74.d(30): Error: no property `push_back` for type `string[]`\n/tmp/tmptzol7k74.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzol7k74.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty()) return {};\n    string res;\n    stringstream ss(s);\n    string word;\n    while(ss >> word)\n    {\n        if(word.size() == n)\n            res.push_back(word);\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpo1f3958m.d(24): Error: no property `empty` for type `string`\n/tmp/tmpo1f3958m.d(26): Error: undefined identifier `stringstream`\n/tmp/tmpo1f3958m.d(26): Error: `s` is used as a type\n/tmp/tmpo1f3958m.d(30): Error: no property `size` for type `string`\n/tmp/tmpo1f3958m.d(31): Error: no property `push_back` for type `string`\n/tmp/tmpo1f3958m.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\n/tmp/tmpo1f3958m.d(33): Error: cannot implicitly convert expression `res` of type `string` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1f3958m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    int i = 0, j = 0;\n    string[] result = new string[0];\n    while (i < s.length()) {\n        while (i < s.length() && j < n) {\n            if (s[i] == ' ') {\n                i++;\n            } else {\n                j++;\n                i++;\n            }\n        }\n        if (j == n) {\n            result = (string[]) (std.vector.append(result, s.substr(i - n, n)));\n        }\n        while (i < s.length() && s[i] != ' ') {\n            i++;\n        }\n        j = 0;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp30e9ouwu.d(36): Error: C style cast illegal, use `cast(string[])std.vector.append(result, s.substr(i - n, n))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30e9ouwu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    int i = 0, j = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp8tqu5yc0.d(119): Error: found `unittest` instead of statement\n/tmp/tmp8tqu5yc0.d(131): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8tqu5yc0.d(131): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8tqu5yc0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty()) return {};\n    string[] words = {};\n    int i = 0;\n    while(i < s.size()) {\n        int j = i;\n        while(j < s.size() && s[j] != ' ') j++;\n        if(j - i == n) {\n            words.push_back(s.substr(i, j - i));\n            i = j;\n        }\n        else {\n            i = j;\n        }\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp9x0ka78_.d(24): Error: no property `empty` for type `string`\n/tmp/tmp9x0ka78_.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp9x0ka78_.d(27): Error: no property `size` for type `string`\n/tmp/tmp9x0ka78_.d(29): Error: no property `size` for type `string`\n/tmp/tmp9x0ka78_.d(31): Error: no property `push_back` for type `string[]`\n/tmp/tmp9x0ka78_.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x0ka78_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty())\n        return {};\n    \n    string[] words = {};\n    \n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            continue;\n        }\n        \n        string word = \"\";\n        \n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') {\n                break;\n            }\n            \n            word += s[j];\n        }\n        \n        if (word.length() == n) {\n            words.push_back(word);\n        }\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp9i1gwkej.d(24): Error: no property `empty` for type `string`\n/tmp/tmp9i1gwkej.d(27): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp9i1gwkej.d(29): Error: no property `length` for type `string`\n/tmp/tmp9i1gwkej.d(36): Error: no property `length` for type `string`\n/tmp/tmp9i1gwkej.d(41): Error: slice `word` is not mutable\n/tmp/tmp9i1gwkej.d(44): Error: no property `length` for type `string`\n/tmp/tmp9i1gwkej.d(45): Error: no property `push_back` for type `string[]`\n/tmp/tmp9i1gwkej.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9i1gwkej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if(s.length() == 0)\n        return words;\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s.charAt(i) == ' ')\n            continue;\n        \n        int count = 0;\n        for(int j = i; j < s.length(); j++)\n        {\n            if(s.charAt(j) == ' ')\n                break;\n            \n            if(s.charAt(j) == s.charAt(i))\n                count++;\n            \n            if(count == n)\n            {\n                string word = \"\";\n                for(int k = i; k < j; k++)\n                    word += s.charAt(k);\n                \n                words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n                words[words.length - 1] = word;\n                \n                i = j - 1;\n                break;\n            }\n        }\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpqcmz5vbb.d(48): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcmz5vbb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n_consonants = 0;\n    int n_words = 0;\n    \n    while (i < s.length()) {\n        if (s[i] == ' ') {\n            if (n_consonants == n) {\n                words[n_words] = s.substr(j, k - j);\n                n_words++;\n            }\n            j = i + 1;\n            n_consonants = 0;\n        } else {\n            n_consonants++;\n        }\n        i++;\n    }\n    \n    if (n_consonants == n) {\n        words[n_words] = s.substr(j, k - j);\n        n_words++;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp43v8t9ol.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp43v8t9ol.d(25): Error: no property `empty` for type `string`\n/tmp/tmp43v8t9ol.d(33): Error: no property `length` for type `string`\n/tmp/tmp43v8t9ol.d(36): Error: no property `substr` for type `string`\n/tmp/tmp43v8t9ol.d(48): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43v8t9ol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0) return words;\n    \n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.length() == n) {\n            words.push_back(word);\n        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmph6bz4gsa.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmph6bz4gsa.d(25): Error: no property `length` for type `string`\n/tmp/tmph6bz4gsa.d(27): Error: no property `length` for type `string`\n/tmp/tmph6bz4gsa.d(30): Error: no property `length` for type `string`\n/tmp/tmph6bz4gsa.d(32): Error: slice `word` is not mutable\n/tmp/tmph6bz4gsa.d(34): Error: no property `length` for type `string`\n/tmp/tmph6bz4gsa.d(35): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6bz4gsa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    while (i < s.length())\n    {\n        int j = i;\n        while (j < s.length() && s[j] != ' ')\n            j++;\n        \n        if (j - i == n)\n        {\n            string word = s.substr(i, j - i);\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = word;\n        }\n        i = j;\n        while (i < s.length() && s[i] == ' ')\n            i++;\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpu688uj8p.d(38): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu688uj8p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = s.split(\" \");\n    \n    int[] count = new int[26];\n    \n    for(int i = 0; i < words.length; i++)\n    {\n        for(int j = 0; j < words[i].length(); j++)\n        {\n            count[words[i].charAt(j) - 'a']++;\n        }\n    }\n    \n    int[] result = new int[words.length];\n    \n    for(int i = 0; i < words.length; i++)\n    {\n        if(count[words[i].charAt(0) - 'a'] == n)\n            result[i] = 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpiaykaup2.d(24): Error: no property `length` for type `string`\n/tmp/tmpiaykaup2.d(27): Error: no property `split` for type `string`\n/tmp/tmpiaykaup2.d(33): Error: no property `length` for type `string`\n/tmp/tmpiaykaup2.d(35): Error: no property `charAt` for type `string`\n/tmp/tmpiaykaup2.d(43): Error: no property `charAt` for type `string`\n/tmp/tmpiaykaup2.d(47): Error: cannot implicitly convert expression `result` of type `int[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaykaup2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] words = {};\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.size(); ++j) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.size() == n) {\n            words.push_back(word);\n        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpd2zj88tx.d(24): Error: no property `empty` for type `string`\n/tmp/tmpd2zj88tx.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpd2zj88tx.d(26): Error: no property `size` for type `string`\n/tmp/tmpd2zj88tx.d(29): Error: no property `size` for type `string`\n/tmp/tmpd2zj88tx.d(31): Error: slice `word` is not mutable\n/tmp/tmpd2zj88tx.d(33): Error: no property `size` for type `string`\n/tmp/tmpd2zj88tx.d(34): Error: no property `push_back` for type `string[]`\n/tmp/tmpd2zj88tx.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd2zj88tx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    \n    if (word.length() > 0)\n        words.push_back(word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpf7xzfgcz.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpf7xzfgcz.d(25): Error: no property `empty` for type `string`\n/tmp/tmpf7xzfgcz.d(29): Error: no property `length` for type `string`\n/tmp/tmpf7xzfgcz.d(33): Error: no property `length` for type `string`\n/tmp/tmpf7xzfgcz.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmpf7xzfgcz.d(41): Error: slice `word` is not mutable\n/tmp/tmpf7xzfgcz.d(45): Error: no property `length` for type `string`\n/tmp/tmpf7xzfgcz.d(46): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf7xzfgcz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty()) return {};\n    string[] words = {};\n    string word = {};\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            if(word.length() == n)\n            {\n                words.push_back(word);\n                word = {};\n            }\n            else if(word.length() > 0)\n            {\n                word += s[i];\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if(word.length() == n)\n    {\n        words.push_back(word);\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpvhd2zhs7.d(24): Error: no property `empty` for type `string`\n/tmp/tmpvhd2zhs7.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpvhd2zhs7.d(26): Error: a struct is not a valid initializer for a `string`\n/tmp/tmpvhd2zhs7.d(27): Error: no property `length` for type `string`\n/tmp/tmpvhd2zhs7.d(31): Error: no property `length` for type `string`\n/tmp/tmpvhd2zhs7.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmpvhd2zhs7.d(34): Error: cannot implicitly convert expression `__lambda4` of type `void function() pure nothrow @nogc @safe` to `string`\n/tmp/tmpvhd2zhs7.d(36): Error: no property `length` for type `string`\n/tmp/tmpvhd2zhs7.d(38): Error: slice `word` is not mutable\n/tmp/tmpvhd2zhs7.d(43): Error: slice `word` is not mutable\n/tmp/tmpvhd2zhs7.d(46): Error: no property `length` for type `string`\n/tmp/tmpvhd2zhs7.d(48): Error: no property `push_back` for type `string[]`\n/tmp/tmpvhd2zhs7.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void func",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return {};\n    string[] words = {};\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.length() == n) words.push_back(word);\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpfd42mzpr.d(24): Error: no property `length` for type `string`\n/tmp/tmpfd42mzpr.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpfd42mzpr.d(26): Error: no property `length` for type `string`\n/tmp/tmpfd42mzpr.d(29): Error: no property `length` for type `string`\n/tmp/tmpfd42mzpr.d(31): Error: slice `word` is not mutable\n/tmp/tmpfd42mzpr.d(33): Error: no property `length` for type `string`\n/tmp/tmpfd42mzpr.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmpfd42mzpr.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfd42mzpr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] result = {};\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < s.length()) {\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (count == n) {\n            result.push_back(s.substr(j, i - j));\n            count = 0;\n            j = i + 1;\n            continue;\n        }\n        count++;\n        i++;\n    }\n    if (count == n) {\n        result.push_back(s.substr(j, i - j));\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmphptm11i2.d(24): Error: no property `empty` for type `string`\n/tmp/tmphptm11i2.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmphptm11i2.d(29): Error: no property `length` for type `string`\n/tmp/tmphptm11i2.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmphptm11i2.d(44): Error: no property `push_back` for type `string[]`\n/tmp/tmphptm11i2.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphptm11i2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpt0d6_cq5.d(24): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(29): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(36): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(41): Error: slice `word` is not mutable\n/tmp/tmpt0d6_cq5.d(44): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0d6_cq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpl55pgflc.d(24): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(29): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(36): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(41): Error: slice `word` is not mutable\n/tmp/tmpl55pgflc.d(44): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl55pgflc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty())\n        return {};\n    string[] ans = {};\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        string word = \"\";\n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        if (word.length() == n)\n            ans.push_back(word);\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp3oavbasn.d(24): Error: no property `empty` for type `string`\n/tmp/tmp3oavbasn.d(26): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp3oavbasn.d(27): Error: no property `length` for type `string`\n/tmp/tmp3oavbasn.d(32): Error: no property `length` for type `string`\n/tmp/tmp3oavbasn.d(36): Error: slice `word` is not mutable\n/tmp/tmp3oavbasn.d(38): Error: no property `length` for type `string`\n/tmp/tmp3oavbasn.d(39): Error: no property `push_back` for type `string[]`\n/tmp/tmp3oavbasn.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3oavbasn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        \n        words[words.length] = word;\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp2f7639t1.d(45): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2f7639t1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if(s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int nn = 0;\n    int count = 0;\n    \n    while(i < s.length())\n    {\n        if(s.charAt(i) == ' ')\n        {\n            if(count == n)\n            {\n                words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n                words[words.length - 1] = s.substr(j, k - j);\n                count = 0;\n                j = k + 1;\n            }\n            else\n                count++;\n        }\n        else\n        {\n            if(count == n)\n            {\n                words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n                words[words.length - 1] = s.substr(j, k - j);\n                count = 0;\n                j = k + 1;\n            }\n            else\n                count++;\n        }\n        i++;\n    }\n    \n    if(count == n)\n    {\n        words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        words[words.length - 1] = s.substr(j, k - j);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpte85kst5.d(42): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\n/tmp/tmpte85kst5.d(54): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\n/tmp/tmpte85kst5.d(67): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpte85kst5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpz5acts9k.d(24): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(29): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(36): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(41): Error: slice `word` is not mutable\n/tmp/tmpz5acts9k.d(44): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5acts9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return new string[0];\n    string[] words = new string[0];\n    int i = 0;\n    while (i < s.length()) {\n        int j = i;\n        while (j < s.length() && s[j] != ' ') j++;\n        if (j - i == n) {\n            string word = s.substr(i, j - i);\n            words = (string[]) std.list.append(words, word);\n        }\n        i = j + 1;\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpb4swjg89.d(32): Error: C style cast illegal, use `cast(string[])std.list.append(words, word)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4swjg89.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0)\n        words = append(words, word);\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpmzbgpkqa.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpmzbgpkqa.d(25): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(28): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(32): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(34): Error: undefined identifier `append`\n/tmp/tmpmzbgpkqa.d(40): Error: slice `word` is not mutable\n/tmp/tmpmzbgpkqa.d(43): Error: no property `length` for type `string`\n/tmp/tmpmzbgpkqa.d(44): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmzbgpkqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpt0d6_cq5.d(24): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(29): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(36): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(41): Error: slice `word` is not mutable\n/tmp/tmpt0d6_cq5.d(44): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0d6_cq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.length() == 0)\n        return words;\n    \n    int i = 0;\n    while(i < s.length())\n    {\n        int j = i;\n        while(j < s.length() && s[j] != ' ')\n            j++;\n        \n        string word = s.substr(i, j-i);\n        if(word.length() > 0 && word.length() == n)\n            words = append(words, word);\n        \n        i = j;\n        while(i < s.length() && s[i] == ' ')\n            i++;\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp9h4od0h8.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp9h4od0h8.d(25): Error: no property `length` for type `string`\n/tmp/tmp9h4od0h8.d(29): Error: no property `length` for type `string`\n/tmp/tmp9h4od0h8.d(32): Error: no property `length` for type `string`\n/tmp/tmp9h4od0h8.d(35): Error: no property `substr` for type `string`\n/tmp/tmp9h4od0h8.d(36): Error: no property `length` for type `string`\n/tmp/tmp9h4od0h8.d(36): Error: no property `length` for type `string`\n/tmp/tmp9h4od0h8.d(37): Error: undefined identifier `append`\n/tmp/tmp9h4od0h8.d(40): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9h4od0h8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    int i = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() == n)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n            else\n                word += \" \";\n        }\n        else\n        {\n            word += s[i];\n        }\n        i++;\n    }\n    if (word.length() == n)\n        words.push_back(word);\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp9c30i_x8.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp9c30i_x8.d(25): Error: no property `empty` for type `string`\n/tmp/tmp9c30i_x8.d(30): Error: no property `length` for type `string`\n/tmp/tmp9c30i_x8.d(34): Error: no property `length` for type `string`\n/tmp/tmp9c30i_x8.d(36): Error: no property `push_back` for type `string[]`\n/tmp/tmp9c30i_x8.d(40): Error: slice `word` is not mutable\n/tmp/tmp9c30i_x8.d(44): Error: slice `word` is not mutable\n/tmp/tmp9c30i_x8.d(48): Error: no property `length` for type `string`\n/tmp/tmp9c30i_x8.d(49): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9c30i_x8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0) return new string[0];\n    string[] res = new string[0];\n    int i = 0;\n    while(i < s.length())\n    {\n        int j = i;\n        while(j < s.length() && s[j] != ' ') j++;\n        string word = s.substr(i, j-i);\n        if(word.length() == n)\n        {\n            res = (string[])realloc(res, (res.length+1) * sizeof(string));\n            res[res.length-1] = word;\n        }\n        i = j+1;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpfo_8td4c.d(34): Error: C style cast illegal, use `cast(string[])realloc(res, (res.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfo_8td4c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return {};\n    \n    string[] words = {};\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ') continue;\n        \n        int cnt = 0;\n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ') break;\n            if (s[j] == s[i]) cnt++;\n        }\n        \n        if (cnt == n) words.push_back(s.substr(i, j - i));\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpi36zrw3a.d(24): Error: no property `length` for type `string`\n/tmp/tmpi36zrw3a.d(26): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpi36zrw3a.d(28): Error: no property `length` for type `string`\n/tmp/tmpi36zrw3a.d(33): Error: no property `length` for type `string`\n/tmp/tmpi36zrw3a.d(39): Error: no property `push_back` for type `string[]`\n/tmp/tmpi36zrw3a.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi36zrw3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] ans = {};\n    int nc = 0;\n    for (auto c : s) {\n        if (c == ' ') continue;\n        nc++;\n        if (nc == n) {\n            ans.push_back(s.substr(0, c - 'a'));\n            s = s.substr(c - 'a' + 1);\n            nc = 0;\n        }\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmplzdvlj1p.d(27): Error: no identifier for declarator `c`\n/tmp/tmplzdvlj1p.d(27): Error: expression expected, not `:`\n/tmp/tmplzdvlj1p.d(27): Error: found `s` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzdvlj1p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if(s.length() == 0)\n        return words;\n    int i = 0;\n    while(i < s.length())\n    {\n        int j = i;\n        while(j < s.length() && s.charAt(j) != ' ')\n            j++;\n        if(j - i >= n)\n        {\n            string word = s.substr(i, j - i);\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = word;\n        }\n        i = j;\n        while(i < s.length() && s.charAt(i) == ' ')\n            i++;\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpj8l4zzas.d(36): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj8l4zzas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return {};\n    if (n < 0) return {};\n    if (n > s.length()) return {};\n    string[] ret = {};\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        string word = s.substr(i, n);\n        if (word.length() == n) ret.push_back(word);\n        for (int j = i + 1; j < s.length(); j++) {\n            if (s[j] == ' ') continue;\n            word = s.substr(i, n);\n            if (word.length() == n) ret.push_back(word);\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp10xbl2tf.d(24): Error: no property `length` for type `string`\n/tmp/tmp10xbl2tf.d(26): Error: no property `length` for type `string`\n/tmp/tmp10xbl2tf.d(27): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp10xbl2tf.d(28): Error: no property `length` for type `string`\n/tmp/tmp10xbl2tf.d(30): Error: no property `substr` for type `string`\n/tmp/tmp10xbl2tf.d(31): Error: no property `length` for type `string`\n/tmp/tmp10xbl2tf.d(31): Error: no property `push_back` for type `string[]`\n/tmp/tmp10xbl2tf.d(32): Error: no property `length` for type `string`\n/tmp/tmp10xbl2tf.d(34): Error: no property `substr` for type `string`\n/tmp/tmp10xbl2tf.d(35): Error: no property `length` for type `string`\n/tmp/tmp10xbl2tf.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmp10xbl2tf.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\n/tmp/tmp10xbl2tf.d(25): Error: cannot implicitly convert expression `__lambda4` of ty",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0) return new string[0];\n    \n    string[] result = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ') continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ') break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n        {\n            result = (string[])realloc(result, (result.length + 1) * sizeof(string));\n            result[result.length - 1] = word;\n        }\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpzbk_p56s.d(43): Error: C style cast illegal, use `cast(string[])realloc(result, (result.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzbk_p56s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            if (count == n)\n            {\n                words.push_back(s.substr(j, k - j));\n                count = 0;\n                j = k + 1;\n            }\n            else\n            {\n                count++;\n            }\n        }\n        else\n        {\n            if (count == n)\n            {\n                words.push_back(s.substr(j, k - j));\n                count = 0;\n                j = k + 1;\n            }\n            else\n            {\n                count++;\n            }\n        }\n        k++;\n        i++;\n    }\n    if (count == n)\n    {\n        words.push_back(s.substr(j, k - j));\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp4y286h_o.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp4y286h_o.d(25): Error: no property `length` for type `string`\n/tmp/tmp4y286h_o.d(32): Error: no property `length` for type `string`\n/tmp/tmp4y286h_o.d(38): Error: no property `push_back` for type `string[]`\n/tmp/tmp4y286h_o.d(51): Error: no property `push_back` for type `string[]`\n/tmp/tmp4y286h_o.d(65): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4y286h_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty()) return {};\n    string[] words = {};\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            if(word.length() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if(word.length() > 0)\n    {\n        words.push_back(word);\n    }\n    \n    for(int i = 0; i < words.length(); i++)\n    {\n        for(int j = 0; j < words[i].length(); j++)\n        {\n            if(words[i][j] == ' ')\n            {\n                words[i] = words[i].substr(j);\n                break;\n            }\n        }\n    }\n    \n    for(int i = 0; i < words.length(); i++)\n    {\n        for(int j = 0; j < words[i].length(); j++)\n        {\n            if(words[i][j] == ' ')\n            {\n                words[i] = words[i].substr(j);\n                break;\n            }\n        }\n    }\n    \n    for(int i = 0; i < words.length(); i++)\n    {\n        for(int j = 0; j < words[i].length(); j++)\n        {\n            if(words[i][j] == ' ')\n            {\n                words[i] = words[i].substr(j);\n                break;\n            }\n        }\n    }\n    \n    for(int i = 0; i < words.length(); i++)\n    {\n        for(int j = 0; j < words[i].length(); j++)\n        {\n            if(words[i][j] == ' ')\n            {\n                words[i] = words[i].substr(j);\n                break;\n            }\n        }\n    }\n    \n    for(int\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp328wvljc.d(96): Error: no identifier for declarator `int`\n/tmp/tmp328wvljc.d(96): Error: expression expected, not `unittest`\n/tmp/tmp328wvljc.d(97): Error: found `{` when expecting `;` following `for` condition\n/tmp/tmp328wvljc.d(98): Error: expression expected, not `alias`\n/tmp/tmp328wvljc.d(98): Error: found `candidate` when expecting `)`\n/tmp/tmp328wvljc.d(98): Error: found `=` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp328wvljc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    string[] words = new string[0];\n    int i = 0;\n    while(i < s.length())\n    {\n        int j = i;\n        while(j < s.length() && s[j] != ' ')\n            j++;\n        if(j - i == n)\n        {\n            string word = s.substr(i, j - i);\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = word;\n        }\n        i = j;\n        while(i < s.length() && s[i] == ' ')\n            i++;\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpuid4ve12.d(36): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuid4ve12.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty()) return {};\n    string[] res = {};\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ') continue;\n        string word = \"\";\n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ') break;\n            word += s[j];\n        }\n        if(word.length() == n) res.push_back(word);\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp5xt91djq.d(24): Error: no property `empty` for type `string`\n/tmp/tmp5xt91djq.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp5xt91djq.d(26): Error: no property `length` for type `string`\n/tmp/tmp5xt91djq.d(30): Error: no property `length` for type `string`\n/tmp/tmp5xt91djq.d(33): Error: slice `word` is not mutable\n/tmp/tmp5xt91djq.d(35): Error: no property `length` for type `string`\n/tmp/tmp5xt91djq.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmp5xt91djq.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xt91djq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty())\n        return {};\n    string[] res = {};\n    int i = 0;\n    while(i < s.size())\n    {\n        int j = i;\n        while(j < s.size() && s[j] != ' ')\n            j++;\n        if(j - i == n)\n            res.push_back(s.substr(i, j - i));\n        i = j + 1;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmptpgn143f.d(24): Error: no property `empty` for type `string`\n/tmp/tmptpgn143f.d(26): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmptpgn143f.d(28): Error: no property `size` for type `string`\n/tmp/tmptpgn143f.d(31): Error: no property `size` for type `string`\n/tmp/tmptpgn143f.d(34): Error: no property `push_back` for type `string[]`\n/tmp/tmptpgn143f.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptpgn143f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        while (i < s.length() && count < n)\n        {\n            if (s[i] == ' ')\n            {\n                i++;\n                continue;\n            }\n            count++;\n            i++;\n        }\n        \n        if (count == n)\n        {\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = s.substr(j, i - j);\n            j = i;\n            count = 0;\n        }\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpzdipj_ya.d(52): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdipj_ya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    \n    while (i < s.size()) {\n        if (count == n) {\n            words.push_back(s.substr(j, i - j));\n            count = 0;\n            j = i + 1;\n        }\n        \n        if (s[i] == ' ') {\n            i++;\n        } else {\n            count++;\n            i++;\n        }\n    }\n    \n    if (count == n) {\n        words.push_back(s.substr(j, i - j));\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpw5b8qiwd.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpw5b8qiwd.d(25): Error: no property `empty` for type `string`\n/tmp/tmpw5b8qiwd.d(31): Error: no property `size` for type `string`\n/tmp/tmpw5b8qiwd.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmpw5b8qiwd.d(47): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5b8qiwd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        int j = i;\n        while (j < s.length() && s[j] != ' ')\n            j++;\n        \n        if (j - i == n)\n            words = append(words, s.substr(i, j - i));\n        \n        i = j;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpsg4fav0_.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpsg4fav0_.d(25): Error: no property `length` for type `string`\n/tmp/tmpsg4fav0_.d(28): Error: no property `length` for type `string`\n/tmp/tmpsg4fav0_.d(34): Error: no property `length` for type `string`\n/tmp/tmpsg4fav0_.d(38): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsg4fav0_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] res = {};\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < s.size())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (k == n)\n        {\n            res.push_back(s.substr(j, i - j));\n            i++;\n            j = i;\n            k = 0;\n            continue;\n        }\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            k++;\n        }\n        i++;\n    }\n    if (k == n)\n    {\n        res.push_back(s.substr(j, i - j));\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpwal5e25f.d(24): Error: no property `empty` for type `string`\n/tmp/tmpwal5e25f.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpwal5e25f.d(29): Error: no property `size` for type `string`\n/tmp/tmpwal5e25f.d(38): Error: no property `push_back` for type `string[]`\n/tmp/tmpwal5e25f.d(52): Error: no property `push_back` for type `string[]`\n/tmp/tmpwal5e25f.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwal5e25f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] ans = {};\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.size(); ++j) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.size() == n) {\n            ans.push_back(word);\n        }\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpikj3liec.d(24): Error: no property `empty` for type `string`\n/tmp/tmpikj3liec.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpikj3liec.d(26): Error: no property `size` for type `string`\n/tmp/tmpikj3liec.d(29): Error: no property `size` for type `string`\n/tmp/tmpikj3liec.d(31): Error: slice `word` is not mutable\n/tmp/tmpikj3liec.d(33): Error: no property `size` for type `string`\n/tmp/tmpikj3liec.d(34): Error: no property `push_back` for type `string[]`\n/tmp/tmpikj3liec.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikj3liec.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpt0d6_cq5.d(24): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(29): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(36): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(41): Error: slice `word` is not mutable\n/tmp/tmpt0d6_cq5.d(44): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0d6_cq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.size(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.size() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    \n    if (word.size() > 0)\n        words.push_back(word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpdzv2o_4p.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpdzv2o_4p.d(25): Error: no property `empty` for type `string`\n/tmp/tmpdzv2o_4p.d(29): Error: no property `size` for type `string`\n/tmp/tmpdzv2o_4p.d(33): Error: no property `size` for type `string`\n/tmp/tmpdzv2o_4p.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmpdzv2o_4p.d(41): Error: slice `word` is not mutable\n/tmp/tmpdzv2o_4p.d(45): Error: no property `size` for type `string`\n/tmp/tmpdzv2o_4p.d(46): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzv2o_4p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (word.length() == n) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.length() == n) {\n        words.push_back(word);\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp6u161m6i.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp6u161m6i.d(25): Error: no property `empty` for type `string`\n/tmp/tmp6u161m6i.d(28): Error: no property `length` for type `string`\n/tmp/tmp6u161m6i.d(30): Error: no property `length` for type `string`\n/tmp/tmp6u161m6i.d(31): Error: no property `push_back` for type `string[]`\n/tmp/tmp6u161m6i.d(35): Error: slice `word` is not mutable\n/tmp/tmp6u161m6i.d(38): Error: no property `length` for type `string`\n/tmp/tmp6u161m6i.d(39): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6u161m6i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    \n    if (word.length() > 0)\n        words = append(words, word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp_5cdjo7w.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp_5cdjo7w.d(25): Error: no property `empty` for type `string`\n/tmp/tmp_5cdjo7w.d(29): Error: no property `length` for type `string`\n/tmp/tmp_5cdjo7w.d(33): Error: no property `length` for type `string`\n/tmp/tmp_5cdjo7w.d(35): Error: undefined identifier `append`\n/tmp/tmp_5cdjo7w.d(41): Error: slice `word` is not mutable\n/tmp/tmp_5cdjo7w.d(45): Error: no property `length` for type `string`\n/tmp/tmp_5cdjo7w.d(46): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_5cdjo7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0) return words;\n    int i = 0;\n    while (i < s.length())\n    {\n        int j = i;\n        while (j < s.length() && s[j] != ' ')\n            j++;\n        if (j - i < n)\n        {\n            string word = s.substr(i, j - i);\n            if (word.length() > 0)\n                words = append(words, word);\n        }\n        i = j + 1;\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpsktmn_4s.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpsktmn_4s.d(25): Error: no property `length` for type `string`\n/tmp/tmpsktmn_4s.d(27): Error: no property `length` for type `string`\n/tmp/tmpsktmn_4s.d(30): Error: no property `length` for type `string`\n/tmp/tmpsktmn_4s.d(34): Error: no property `substr` for type `string`\n/tmp/tmpsktmn_4s.d(35): Error: no property `length` for type `string`\n/tmp/tmpsktmn_4s.d(36): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsktmn_4s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmptmi051nd.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmptmi051nd.d(25): Error: no property `length` for type `string`\n/tmp/tmptmi051nd.d(28): Error: no property `length` for type `string`\n/tmp/tmptmi051nd.d(34): Error: no property `length` for type `string`\n/tmp/tmptmi051nd.d(38): Error: slice `word` is not mutable\n/tmp/tmptmi051nd.d(41): Error: no property `length` for type `string`\n/tmp/tmptmi051nd.d(42): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmi051nd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() == n)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if (word.length() == n)\n    {\n        words.push_back(word);\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp2v_qgd6s.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp2v_qgd6s.d(25): Error: no property `empty` for type `string`\n/tmp/tmp2v_qgd6s.d(28): Error: no property `length` for type `string`\n/tmp/tmp2v_qgd6s.d(32): Error: no property `length` for type `string`\n/tmp/tmp2v_qgd6s.d(34): Error: no property `push_back` for type `string[]`\n/tmp/tmp2v_qgd6s.d(40): Error: slice `word` is not mutable\n/tmp/tmp2v_qgd6s.d(43): Error: no property `length` for type `string`\n/tmp/tmp2v_qgd6s.d(45): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2v_qgd6s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int nn = 0;\n    int count = 0;\n    \n    while (i < s.length())\n    {\n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s.charAt(i) == ' '\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpaubvk095.d(117): Error: found `unittest` when expecting `)`\n/tmp/tmpaubvk095.d(129): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpaubvk095.d(129): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaubvk095.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    while (i < s.length()) {\n        int j = i;\n        while (j < s.length() && s[j] != ' ')\n            j++;\n        if (j - i == n) {\n            string word = s.substr(i, j - i);\n            words = append(words, word);\n            i = j;\n        } else {\n            i = j;\n        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpxuvonm7d.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpxuvonm7d.d(25): Error: no property `length` for type `string`\n/tmp/tmpxuvonm7d.d(29): Error: no property `length` for type `string`\n/tmp/tmpxuvonm7d.d(31): Error: no property `length` for type `string`\n/tmp/tmpxuvonm7d.d(34): Error: no property `substr` for type `string`\n/tmp/tmpxuvonm7d.d(35): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxuvonm7d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        \n        words[words.length] = word;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpo1u83y0f.d(45): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1u83y0f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty())\n        return {};\n    \n    string[] words = {};\n    \n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words.push_back(word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp43c7z5pc.d(24): Error: no property `empty` for type `string`\n/tmp/tmp43c7z5pc.d(27): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp43c7z5pc.d(29): Error: no property `length` for type `string`\n/tmp/tmp43c7z5pc.d(35): Error: no property `length` for type `string`\n/tmp/tmp43c7z5pc.d(39): Error: slice `word` is not mutable\n/tmp/tmp43c7z5pc.d(42): Error: no property `length` for type `string`\n/tmp/tmp43c7z5pc.d(43): Error: no property `push_back` for type `string[]`\n/tmp/tmp43c7z5pc.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43c7z5pc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        \n        words[words.length] = word;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpo1u83y0f.d(45): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1u83y0f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    \n    if (word.length() > 0)\n        words = append(words, word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpmem14cic.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpmem14cic.d(25): Error: no property `length` for type `string`\n/tmp/tmpmem14cic.d(29): Error: no property `length` for type `string`\n/tmp/tmpmem14cic.d(33): Error: no property `length` for type `string`\n/tmp/tmpmem14cic.d(35): Error: undefined identifier `append`\n/tmp/tmpmem14cic.d(41): Error: slice `word` is not mutable\n/tmp/tmpmem14cic.d(45): Error: no property `length` for type `string`\n/tmp/tmpmem14cic.d(46): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmem14cic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    string word = \"\";\n    int i = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            if (word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n            i++;\n        }\n        else\n        {\n            word += s[i];\n            i++;\n        }\n    }\n    if (word.length() > 0)\n        words = append(words, word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmppo93u3_8.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmppo93u3_8.d(25): Error: no property `length` for type `string`\n/tmp/tmppo93u3_8.d(30): Error: no property `length` for type `string`\n/tmp/tmppo93u3_8.d(34): Error: no property `length` for type `string`\n/tmp/tmppo93u3_8.d(36): Error: undefined identifier `append`\n/tmp/tmppo93u3_8.d(43): Error: slice `word` is not mutable\n/tmp/tmppo93u3_8.d(47): Error: no property `length` for type `string`\n/tmp/tmppo93u3_8.d(48): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppo93u3_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if(s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < s.length())\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpblt7arnw.d(129): Error: found `unittest` instead of statement\n/tmp/tmpblt7arnw.d(141): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpblt7arnw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.length() == 0)\n        return words;\n    \n    string word = \"\";\n    int count = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            if(count == n)\n            {\n                words = append(words, word);\n                word = \"\";\n                count = 0;\n            }\n            else\n                count++;\n        }\n        else\n        {\n            word += s[i];\n            count++;\n        }\n    }\n    if(count == n)\n        words = append(words, word);\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpygaybto6.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpygaybto6.d(25): Error: no property `length` for type `string`\n/tmp/tmpygaybto6.d(30): Error: no property `length` for type `string`\n/tmp/tmpygaybto6.d(36): Error: undefined identifier `append`\n/tmp/tmpygaybto6.d(45): Error: slice `word` is not mutable\n/tmp/tmpygaybto6.d(50): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygaybto6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0) return new string[0];\n    string[] words = new string[0];\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ') continue;\n        string word = \"\";\n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ') break;\n            word += s[j];\n        }\n        if(word.length() == n)\n        {\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = word;\n        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp2c585ubo.d(37): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2c585ubo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return {};\n    string[] words = {};\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.length() == n) words.push_back(word);\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp3_gabnvk.d(24): Error: no property `length` for type `string`\n/tmp/tmp3_gabnvk.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp3_gabnvk.d(26): Error: no property `length` for type `string`\n/tmp/tmp3_gabnvk.d(29): Error: no property `length` for type `string`\n/tmp/tmp3_gabnvk.d(31): Error: slice `word` is not mutable\n/tmp/tmp3_gabnvk.d(33): Error: no property `length` for type `string`\n/tmp/tmp3_gabnvk.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmp3_gabnvk.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_gabnvk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0) return words;\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < s.length()) {\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (count == n) {\n            words[j] = s.substr(i, j - i);\n            j++;\n            i++;\n            count = 0;\n            continue;\n        }\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        count++;\n        i++;\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmph56h5yc4.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmph56h5yc4.d(25): Error: no property `length` for type `string`\n/tmp/tmph56h5yc4.d(29): Error: no property `length` for type `string`\n/tmp/tmph56h5yc4.d(35): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph56h5yc4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    long count = 0;\n    for (int i = 0; i < s.size(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (count == n)\n            {\n                words.push_back(word);\n                word = \"\";\n                count = 0;\n            }\n            else\n                count++;\n        }\n        else\n        {\n            word += s[i];\n            count++;\n        }\n    }\n    if (count == n)\n        words.push_back(word);\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpbjvmm3ln.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpbjvmm3ln.d(25): Error: no property `empty` for type `string`\n/tmp/tmpbjvmm3ln.d(30): Error: no property `size` for type `string`\n/tmp/tmpbjvmm3ln.d(36): Error: no property `push_back` for type `string[]`\n/tmp/tmpbjvmm3ln.d(45): Error: slice `word` is not mutable\n/tmp/tmpbjvmm3ln.d(50): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjvmm3ln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty())\n        return {};\n    string[] words = {};\n    int i = 0;\n    while(i < s.size())\n    {\n        int j = i;\n        while(j < s.size() && s[j] != ' ')\n            j++;\n        if(j - i == n)\n            words.push_back(s.substr(i, j - i));\n        i = j + 1;\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp3iakpvgn.d(24): Error: no property `empty` for type `string`\n/tmp/tmp3iakpvgn.d(26): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp3iakpvgn.d(28): Error: no property `size` for type `string`\n/tmp/tmp3iakpvgn.d(31): Error: no property `size` for type `string`\n/tmp/tmp3iakpvgn.d(34): Error: no property `push_back` for type `string[]`\n/tmp/tmp3iakpvgn.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3iakpvgn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int nn = 0;\n    int count = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\n')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\t')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\r')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\b')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\f')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\v')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == '\\0')\n        \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpib7c3cog.d(114): Error: found `unittest` instead of statement\n/tmp/tmpib7c3cog.d(126): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpib7c3cog.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    string word = \"\";\n    string[] words = new string[0];\n    \n    while(i < s.length())\n    {\n        if(s[i] == ' ')\n        {\n            if(count == n)\n            {\n                words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n                words[words.length - 1] = word;\n                count = 0;\n                word = \"\";\n            }\n            \n            i++;\n        }\n        else\n        {\n            count++;\n            word += s[i];\n            i++;\n        }\n    }\n    \n    if(count == n)\n    {\n        words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        words[words.length - 1] = word;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmptigfom9k.d(39): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\n/tmp/tmptigfom9k.d(57): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptigfom9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] res = {};\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.size(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.size() == n) res.push_back(word);\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpqcmltcnm.d(24): Error: no property `empty` for type `string`\n/tmp/tmpqcmltcnm.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpqcmltcnm.d(26): Error: no property `size` for type `string`\n/tmp/tmpqcmltcnm.d(29): Error: no property `size` for type `string`\n/tmp/tmpqcmltcnm.d(31): Error: slice `word` is not mutable\n/tmp/tmpqcmltcnm.d(33): Error: no property `size` for type `string`\n/tmp/tmpqcmltcnm.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmpqcmltcnm.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcmltcnm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0)\n        return new string[0];\n    string[] words = s.split(\" \");\n    int[] cnt = new int[26];\n    for (int i = 0; i < words.length; i++)\n        for (int j = 0; j < words[i].length(); j++)\n            cnt[words[i].charAt(j) - 'a']++;\n    int[] cnt2 = new int[26];\n    for (int i = 0; i < 26; i++)\n        cnt2[i] = cnt[i];\n    for (int i = 0; i < words.length; i++)\n        for (int j = 0; j < words[i].length(); j++)\n            cnt2[words[i].charAt(j) - 'a']--;\n    int[] res = new int[words.length];\n    for (int i = 0; i < words.length; i++)\n        if (cnt2[words[i].charAt(0) - 'a'] == n)\n            res[i] = 1;\n    return res;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp1xzl8r7t.d(24): Error: no property `length` for type `string`\n/tmp/tmp1xzl8r7t.d(26): Error: no property `split` for type `string`\n/tmp/tmp1xzl8r7t.d(29): Error: no property `length` for type `string`\n/tmp/tmp1xzl8r7t.d(30): Error: no property `charAt` for type `string`\n/tmp/tmp1xzl8r7t.d(35): Error: no property `length` for type `string`\n/tmp/tmp1xzl8r7t.d(36): Error: no property `charAt` for type `string`\n/tmp/tmp1xzl8r7t.d(39): Error: no property `charAt` for type `string`\n/tmp/tmp1xzl8r7t.d(41): Error: cannot implicitly convert expression `res` of type `int[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xzl8r7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0) return words;\n    \n    int i = 0, j = 0, k = 0;\n    while (i < s.length()) {\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (k == n) {\n            words[j] = s.substr(k, i - k);\n            j++;\n            k = i;\n        }\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            k++;\n        }\n        i++;\n    }\n    words[j] = s.substr(k, i - k);\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp8jfedtb3.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp8jfedtb3.d(25): Error: no property `length` for type `string`\n/tmp/tmp8jfedtb3.d(28): Error: no property `length` for type `string`\n/tmp/tmp8jfedtb3.d(34): Error: no property `substr` for type `string`\n/tmp/tmp8jfedtb3.d(47): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jfedtb3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpt0d6_cq5.d(24): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(29): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(36): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(41): Error: slice `word` is not mutable\n/tmp/tmpt0d6_cq5.d(44): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0d6_cq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] res = {};\n    int i = 0;\n    while (i < s.length()) {\n        int j = i;\n        while (j < s.length() && s[j] != ' ') {\n            j++;\n        }\n        if (j - i == n) {\n            string word = s.substr(i, j - i);\n            if (std::find(res.begin(), res.end(), word) == res.end()) {\n                res.push_back(word);\n            }\n        }\n        i = j + 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpubtwc_ir.d(34): Error: found `:` when expecting `)`\n/tmp/tmpubtwc_ir.d(34): Error: found `:` instead of statement\n/tmp/tmpubtwc_ir.d(40): Error: declaration expected, not `return`\n/tmp/tmpubtwc_ir.d(41): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpubtwc_ir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpl55pgflc.d(24): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(29): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(36): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(41): Error: slice `word` is not mutable\n/tmp/tmpl55pgflc.d(44): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl55pgflc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpz5acts9k.d(24): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(29): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(36): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(41): Error: slice `word` is not mutable\n/tmp/tmpz5acts9k.d(44): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5acts9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return new string[0];\n    string[] words = new string[0];\n    int i = 0;\n    while (i < s.length()) {\n        int j = i;\n        while (j < s.length() && s[j] != ' ') j++;\n        if (j - i == n) {\n            string word = s.substr(i, j - i);\n            words = (string[]) std.concat(words, new string[] { word });\n        }\n        i = j + 1;\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpkzcoo11w.d(32): Error: found `{` when expecting `,`\n/tmp/tmpkzcoo11w.d(32): Error: found `}` when expecting `,`\n/tmp/tmpkzcoo11w.d(32): Error: C style cast illegal, use `cast(string[])std.concat(words, new string[], word)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzcoo11w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty())\n        return {};\n    \n    string[] words = {};\n    \n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for (int j = i; j < s.size(); ++j)\n        {\n            if (s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if (word.size() == n)\n            words.push_back(word);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmphv94m1w5.d(24): Error: no property `empty` for type `string`\n/tmp/tmphv94m1w5.d(27): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmphv94m1w5.d(29): Error: no property `size` for type `string`\n/tmp/tmphv94m1w5.d(36): Error: no property `size` for type `string`\n/tmp/tmphv94m1w5.d(41): Error: slice `word` is not mutable\n/tmp/tmphv94m1w5.d(44): Error: no property `size` for type `string`\n/tmp/tmphv94m1w5.d(45): Error: no property `push_back` for type `string[]`\n/tmp/tmphv94m1w5.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphv94m1w5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmptmi051nd.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmptmi051nd.d(25): Error: no property `length` for type `string`\n/tmp/tmptmi051nd.d(28): Error: no property `length` for type `string`\n/tmp/tmptmi051nd.d(34): Error: no property `length` for type `string`\n/tmp/tmptmi051nd.d(38): Error: slice `word` is not mutable\n/tmp/tmptmi051nd.d(41): Error: no property `length` for type `string`\n/tmp/tmptmi051nd.d(42): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmi051nd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpz5acts9k.d(24): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(29): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(36): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(41): Error: slice `word` is not mutable\n/tmp/tmpz5acts9k.d(44): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5acts9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = s.split(\" \");\n    \n    int[] cnt = new int[26];\n    for(int i = 0; i < words.length; i++)\n    {\n        for(int j = 0; j < words[i].length(); j++)\n            cnt[words[i].charAt(j) - 'a']++;\n    }\n    \n    int[] cnt_sorted = new int[26];\n    for(int i = 0; i < 26; i++)\n        cnt_sorted[i] = cnt[i];\n    \n    int[] result = new int[words.length];\n    \n    for(int i = 0; i < words.length; i++)\n    {\n        int count = 0;\n        for(int j = 0; j < words[i].length(); j++)\n            count += cnt_sorted[words[i].charAt(j) - 'a'];\n        \n        if(count == n)\n            result[i] = 1;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpbk99dvjh.d(24): Error: no property `length` for type `string`\n/tmp/tmpbk99dvjh.d(27): Error: no property `split` for type `string`\n/tmp/tmpbk99dvjh.d(32): Error: no property `length` for type `string`\n/tmp/tmpbk99dvjh.d(33): Error: no property `charAt` for type `string`\n/tmp/tmpbk99dvjh.d(45): Error: no property `length` for type `string`\n/tmp/tmpbk99dvjh.d(46): Error: no property `charAt` for type `string`\n/tmp/tmpbk99dvjh.d(52): Error: cannot implicitly convert expression `result` of type `int[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbk99dvjh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if(s.empty())\n        return words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            if(word.length() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if(word.length() > 0)\n        words.push_back(word);\n    \n    int n_consonants = 0;\n    for(int i = 0; i < words.length(); i++)\n    {\n        n_consonants += count_consonants(words[i]);\n        if(n_consonants == n)\n            return words;\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmph0rt1cy0.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmph0rt1cy0.d(25): Error: no property `empty` for type `string`\n/tmp/tmph0rt1cy0.d(28): Error: no property `length` for type `string`\n/tmp/tmph0rt1cy0.d(32): Error: no property `length` for type `string`\n/tmp/tmph0rt1cy0.d(34): Error: no property `push_back` for type `string[]`\n/tmp/tmph0rt1cy0.d(40): Error: slice `word` is not mutable\n/tmp/tmph0rt1cy0.d(43): Error: no property `length` for type `string`\n/tmp/tmph0rt1cy0.d(44): Error: no property `push_back` for type `string[]`\n/tmp/tmph0rt1cy0.d(47): Error: no property `length` for type `string[]`\n/tmp/tmph0rt1cy0.d(49): Error: undefined identifier `count_consonants`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0rt1cy0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] words = {};\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.length() == n) words.push_back(word);\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpquzp20ed.d(24): Error: no property `empty` for type `string`\n/tmp/tmpquzp20ed.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpquzp20ed.d(26): Error: no property `length` for type `string`\n/tmp/tmpquzp20ed.d(29): Error: no property `length` for type `string`\n/tmp/tmpquzp20ed.d(31): Error: slice `word` is not mutable\n/tmp/tmpquzp20ed.d(33): Error: no property `length` for type `string`\n/tmp/tmpquzp20ed.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmpquzp20ed.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpquzp20ed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    string[] words_in_s = s.split(\" \");\n    for (int i = 0; i < words_in_s.length; i++)\n    {\n        string word = words_in_s[i];\n        if (word.length() == 0)\n            continue;\n        int count = 0;\n        for (int j = 0; j < word.length(); j++)\n        {\n            if (word.charAt(j) == ' ')\n                continue;\n            count++;\n            if (count == n)\n            {\n                words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n                words[words.length - 1] = word;\n                break;\n            }\n        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpzzupsbp0.d(41): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzupsbp0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0)\n        return {};\n    \n    string[] words = {};\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        if (n == 0)\n            break;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n        \n        if (s[i] == ' ')\n            continue;\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpqrnz4nz4.d(109): Error: found `unittest` instead of statement\n/tmp/tmpqrnz4nz4.d(121): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqrnz4nz4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (word.size() > 0) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.size() > 0) {\n        words.push_back(word);\n    }\n    \n    if (words.size() == 0) return words;\n    \n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        count += words[i].size();\n    }\n    \n    if (count < n) return words;\n    \n    vector<string> result = {};\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i].size() == n) {\n            result.push_back(words[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpd9tdn8uj.d(51): Error: found `>` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9tdn8uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty())\n        return {};\n    \n    string[] words = {};\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpyat6nqgf.d(108): Error: found `unittest` instead of statement\n/tmp/tmpyat6nqgf.d(120): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyat6nqgf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (word.length() > 0) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0) {\n        words.push_back(word);\n    }\n    \n    if (words.length == 0) return words;\n    \n    long count = 0;\n    for (int i = 0; i < words.length; i++) {\n        count += words[i].length();\n    }\n    \n    if (count < n) return words;\n    \n    vector<string> result = {};\n    for (int i = 0; i < words.length; i++) {\n        if (words[i].length() == n) {\n            result.push_back(words[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpgkorvk4q.d(50): Error: found `>` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkorvk4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < s.length())\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(count == n)\n        {\n            words[j] = s.substr(i, i-j);\n            j++;\n            count = 0;\n            i++;\n            continue;\n        }\n        \n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        count++;\n        i++;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmprrk0f6z_.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmprrk0f6z_.d(25): Error: no property `length` for type `string`\n/tmp/tmprrk0f6z_.d(31): Error: no property `length` for type `string`\n/tmp/tmprrk0f6z_.d(41): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrk0f6z_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            if(words.length == n)\n                return words;\n            words = append(words, s.substr(i+1, s.length()-i-1));\n        }\n        else\n        {\n            if(words.length == n)\n                return words;\n            words = append(words, s.substr(i, 1));\n        }\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpeoqmyh09.d(24): Error: no property `length` for type `string`\n/tmp/tmpeoqmyh09.d(29): Error: no property `length` for type `string`\n/tmp/tmpeoqmyh09.d(35): Error: undefined identifier `append`\n/tmp/tmpeoqmyh09.d(41): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeoqmyh09.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.length() == 0)\n        return words;\n    \n    string[] words_in_s = s.split(\" \");\n    \n    for (int i = 0; i < words_in_s.length; i++)\n    {\n        string word = words_in_s[i];\n        \n        if (word.length() == 0)\n            continue;\n        \n        int count = 0;\n        for (int j = 0; j < word.length(); j++)\n        {\n            if (word[j] == ' ')\n                continue;\n            \n            count++;\n            if (count == n)\n                words.push_back(word);\n        }\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp98xhwg6g.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp98xhwg6g.d(25): Error: no property `length` for type `string`\n/tmp/tmp98xhwg6g.d(28): Error: no property `split` for type `string`\n/tmp/tmp98xhwg6g.d(34): Error: no property `length` for type `string`\n/tmp/tmp98xhwg6g.d(38): Error: no property `length` for type `string`\n/tmp/tmp98xhwg6g.d(45): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp98xhwg6g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty())\n        return {};\n    \n    string[] result = {};\n    \n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] == ' ')\n        {\n            if (result.empty())\n                continue;\n            \n            string word = s.substr(0, i);\n            \n            if (count_consonants(word) == n)\n                result.push_back(word);\n            \n            s = s.substr(i + 1);\n            i = 0;\n        }\n    }\n    \n    if (s.empty())\n        return result;\n    \n    string word = s.substr(0, s.size() - 1);\n    \n    if (count_consonants(word) == n)\n        result.push_back(word);\n    \n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpafjf9hdj.d(24): Error: no property `empty` for type `string`\n/tmp/tmpafjf9hdj.d(27): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpafjf9hdj.d(29): Error: no property `size` for type `string`\n/tmp/tmpafjf9hdj.d(33): Error: no property `empty` for type `string[]`\n/tmp/tmpafjf9hdj.d(36): Error: no property `substr` for type `string`\n/tmp/tmpafjf9hdj.d(38): Error: undefined identifier `count_consonants`\n/tmp/tmpafjf9hdj.d(39): Error: no property `push_back` for type `string[]`\n/tmp/tmpafjf9hdj.d(41): Error: no property `substr` for type `string`\n/tmp/tmpafjf9hdj.d(46): Error: no property `empty` for type `string`\n/tmp/tmpafjf9hdj.d(49): Error: no property `substr` for type `string`\n/tmp/tmpafjf9hdj.d(51): Error: undefined identifier `count_consonants`\n/tmp/tmpafjf9hdj.d(52): Error: no property `push_back` for type `string[]`\n/tmp/tmpafjf9hdj.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.length() == 0)\n        return words;\n    \n    string word = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            if(word.length() == n)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n            else if(word.length() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if(word.length() == n)\n        words.push_back(word);\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpmas0561z.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpmas0561z.d(25): Error: no property `length` for type `string`\n/tmp/tmpmas0561z.d(29): Error: no property `length` for type `string`\n/tmp/tmpmas0561z.d(33): Error: no property `length` for type `string`\n/tmp/tmpmas0561z.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmpmas0561z.d(38): Error: no property `length` for type `string`\n/tmp/tmpmas0561z.d(40): Error: no property `push_back` for type `string[]`\n/tmp/tmpmas0561z.d(46): Error: slice `word` is not mutable\n/tmp/tmpmas0561z.d(49): Error: no property `length` for type `string`\n/tmp/tmpmas0561z.d(50): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmas0561z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.size(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (word.size() > 0)\n            {\n                words.push_back(word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if (word.size() > 0)\n        words.push_back(word);\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpruas1_ff.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpruas1_ff.d(25): Error: no property `empty` for type `string`\n/tmp/tmpruas1_ff.d(29): Error: no property `size` for type `string`\n/tmp/tmpruas1_ff.d(33): Error: no property `size` for type `string`\n/tmp/tmpruas1_ff.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmpruas1_ff.d(41): Error: slice `word` is not mutable\n/tmp/tmpruas1_ff.d(44): Error: no property `size` for type `string`\n/tmp/tmpruas1_ff.d(45): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpruas1_ff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] result = {};\n    string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (word.length() == n) {\n                result.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.length() == n) {\n        result.push_back(word);\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp1qqc25cw.d(24): Error: no property `empty` for type `string`\n/tmp/tmp1qqc25cw.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp1qqc25cw.d(27): Error: no property `length` for type `string`\n/tmp/tmp1qqc25cw.d(29): Error: no property `length` for type `string`\n/tmp/tmp1qqc25cw.d(30): Error: no property `push_back` for type `string[]`\n/tmp/tmp1qqc25cw.d(34): Error: slice `word` is not mutable\n/tmp/tmp1qqc25cw.d(37): Error: no property `length` for type `string`\n/tmp/tmp1qqc25cw.d(38): Error: no property `push_back` for type `string[]`\n/tmp/tmp1qqc25cw.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1qqc25cw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpz5acts9k.d(24): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(29): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(36): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(41): Error: slice `word` is not mutable\n/tmp/tmpz5acts9k.d(44): Error: no property `length` for type `string`\n/tmp/tmpz5acts9k.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5acts9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.empty()) return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < s.length()) {\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        \n        if (count == n) {\n            words = append(words, s.substr(j, i-j));\n            count = 0;\n            j = i;\n        }\n        \n        count++;\n        i++;\n    }\n    \n    if (count == n) {\n        words = append(words, s.substr(j, i-j));\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmptp3s3vgl.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmptp3s3vgl.d(25): Error: no property `empty` for type `string`\n/tmp/tmptp3s3vgl.d(30): Error: no property `length` for type `string`\n/tmp/tmptp3s3vgl.d(37): Error: undefined identifier `append`\n/tmp/tmptp3s3vgl.d(47): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptp3s3vgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return {};\n    string[] words = {};\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.length() == n) {\n            words.push_back(word);\n        }\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp6lou8bl0.d(24): Error: no property `length` for type `string`\n/tmp/tmp6lou8bl0.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp6lou8bl0.d(26): Error: no property `length` for type `string`\n/tmp/tmp6lou8bl0.d(29): Error: no property `length` for type `string`\n/tmp/tmp6lou8bl0.d(31): Error: slice `word` is not mutable\n/tmp/tmp6lou8bl0.d(33): Error: no property `length` for type `string`\n/tmp/tmp6lou8bl0.d(34): Error: no property `push_back` for type `string[]`\n/tmp/tmp6lou8bl0.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lou8bl0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.length() == 0)\n        return words;\n    string[] w = s.split(\" \");\n    int i = 0;\n    while(i < w.length)\n    {\n        if(w[i].length() == 0)\n            i++;\n        else\n        {\n            int j = i;\n            while(j < w.length && w[j].length() > 0)\n            {\n                if(count_consonants(w[j]) == n)\n                    words = append(words, w[j]);\n                j++;\n            }\n            i = j;\n        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp8yhg2x51.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp8yhg2x51.d(25): Error: no property `length` for type `string`\n/tmp/tmp8yhg2x51.d(27): Error: no property `split` for type `string`\n/tmp/tmp8yhg2x51.d(31): Error: no property `length` for type `string`\n/tmp/tmp8yhg2x51.d(36): Error: no property `length` for type `string`\n/tmp/tmp8yhg2x51.d(38): Error: undefined identifier `count_consonants`\n/tmp/tmp8yhg2x51.d(39): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yhg2x51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0) return words;\n    \n    int n_consonants = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        n_consonants++;\n        if (n_consonants == n) {\n            words.push_back(s.substr(i, s.length() - i));\n            i = s.length();\n        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp6_cts8zh.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp6_cts8zh.d(25): Error: no property `length` for type `string`\n/tmp/tmp6_cts8zh.d(28): Error: no property `length` for type `string`\n/tmp/tmp6_cts8zh.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmp6_cts8zh.d(34): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_cts8zh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpt0d6_cq5.d(24): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(29): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(36): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(41): Error: slice `word` is not mutable\n/tmp/tmpt0d6_cq5.d(44): Error: no property `length` for type `string`\n/tmp/tmpt0d6_cq5.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0d6_cq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words.push_back(word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp1kp7kwg5.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp1kp7kwg5.d(25): Error: no property `length` for type `string`\n/tmp/tmp1kp7kwg5.d(28): Error: no property `length` for type `string`\n/tmp/tmp1kp7kwg5.d(33): Error: no property `length` for type `string`\n/tmp/tmp1kp7kwg5.d(36): Error: slice `word` is not mutable\n/tmp/tmp1kp7kwg5.d(39): Error: no property `length` for type `string`\n/tmp/tmp1kp7kwg5.d(40): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1kp7kwg5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return new string[0];\n    if (n == 0) return new string[0];\n    if (n > s.length()) return new string[0];\n    \n    string[] result = new string[0];\n    \n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        \n        string word = \"\";\n        \n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        \n        if (word.length() == n) {\n            result = (string[]) (std.concat(result, new string[] {word}));\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp4w6non4u.d(41): Error: found `{` when expecting `,`\n/tmp/tmp4w6non4u.d(41): Error: found `}` when expecting `,`\n/tmp/tmp4w6non4u.d(41): Error: C style cast illegal, use `cast(string[])std.concat(result, new string[], word)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w6non4u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] ans = {};\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') continue;\n        string word = s.substr(i, n);\n        if (word.size() == n) {\n            ans.push_back(word);\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmprztosgzl.d(24): Error: no property `empty` for type `string`\n/tmp/tmprztosgzl.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmprztosgzl.d(26): Error: no property `size` for type `string`\n/tmp/tmprztosgzl.d(28): Error: no property `substr` for type `string`\n/tmp/tmprztosgzl.d(29): Error: no property `size` for type `string`\n/tmp/tmprztosgzl.d(30): Error: no property `push_back` for type `string[]`\n/tmp/tmprztosgzl.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprztosgzl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpoa_h7drs.d(129): Error: found `unittest` instead of statement\n/tmp/tmpoa_h7drs.d(141): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoa_h7drs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.empty())\n        return words;\n    string word = \"\";\n    int i = 0;\n    while(i < s.size())\n    {\n        if(s[i] == ' ')\n        {\n            if(word.size() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n        i++;\n    }\n    if(word.size() > 0)\n        words = append(words, word);\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp146yc7hj.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp146yc7hj.d(25): Error: no property `empty` for type `string`\n/tmp/tmp146yc7hj.d(29): Error: no property `size` for type `string`\n/tmp/tmp146yc7hj.d(33): Error: no property `size` for type `string`\n/tmp/tmp146yc7hj.d(35): Error: undefined identifier `append`\n/tmp/tmp146yc7hj.d(41): Error: slice `word` is not mutable\n/tmp/tmp146yc7hj.d(45): Error: no property `size` for type `string`\n/tmp/tmp146yc7hj.d(46): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp146yc7hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.length() == 0)\n        return new string[0];\n    string[] words = new string[0];\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        string word = \"\";\n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        if(word.length() == n)\n            words = append(words, word);\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmprl1f7jdu.d(24): Error: no property `length` for type `string`\n/tmp/tmprl1f7jdu.d(27): Error: no property `length` for type `string`\n/tmp/tmprl1f7jdu.d(32): Error: no property `length` for type `string`\n/tmp/tmprl1f7jdu.d(36): Error: slice `word` is not mutable\n/tmp/tmprl1f7jdu.d(38): Error: no property `length` for type `string`\n/tmp/tmprl1f7jdu.d(39): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprl1f7jdu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    \n    int i = 0, j = 0;\n    while (i < s.length()) {\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        \n        if (j < n) {\n            j++;\n            i++;\n            continue;\n        }\n        \n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        \n        while (i < s.length() && s[i] != ' ') {\n            i++;\n        }\n        \n        if (i < s.length()) {\n            i++;\n        }\n        \n        if (j == n) {\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = s.substr(j, i - j);\n        }\n        \n        j = 0;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpj6ltiald.d(55): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6ltiald.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty())\n        return {};\n    \n    string[] words = {};\n    \n    for(int i = 0; i < s.size(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\n        \n        if(s[i] == ' ')\n            continue;\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpsu8d9pdc.d(108): Error: found `unittest` instead of statement\n/tmp/tmpsu8d9pdc.d(120): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsu8d9pdc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    int i = 0, j = 0;\n    while (i < s.size())\n    {\n        while (i < s.size() && j < n)\n        {\n            if (s[i] == ' ')\n            {\n                i++;\n                continue;\n            }\n            if (s[i] == ' ')\n            {\n                i++;\n                continue;\n            }\n            j++;\n            i++;\n        }\n        if (j == n)\n        {\n            words.push_back(s.substr(j, i - j));\n            j = 0;\n        }\n        i++;\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp0i_trrq0.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp0i_trrq0.d(25): Error: no property `empty` for type `string`\n/tmp/tmp0i_trrq0.d(28): Error: no property `size` for type `string`\n/tmp/tmp0i_trrq0.d(30): Error: no property `size` for type `string`\n/tmp/tmp0i_trrq0.d(47): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0i_trrq0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if(s.length() == 0)\n        return words;\n    string[] words_in_s = s.split(\" \");\n    for(int i = 0; i < words_in_s.length; i++)\n    {\n        string word = words_in_s[i];\n        int count = 0;\n        for(int j = 0; j < word.length(); j++)\n        {\n            if(is_consonant(word[j]))\n                count++;\n        }\n        if(count == n)\n            words.push_back(word);\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp1qast4fy.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp1qast4fy.d(25): Error: no property `length` for type `string`\n/tmp/tmp1qast4fy.d(27): Error: no property `split` for type `string`\n/tmp/tmp1qast4fy.d(32): Error: no property `length` for type `string`\n/tmp/tmp1qast4fy.d(34): Error: undefined identifier `is_consonant`\n/tmp/tmp1qast4fy.d(38): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1qast4fy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if(s.length() == 0)\n        return words;\n    \n    int i = 0;\n    while(i < s.length())\n    {\n        int j = i;\n        while(j < s.length() && s[j] != ' ')\n            j++;\n        \n        string word = s.substr(i, j-i);\n        if(word.length() == n)\n            words.push_back(word);\n        \n        i = j;\n        while(i < s.length() && s[i] == ' ')\n            i++;\n    }\n    \n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpd87prz53.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpd87prz53.d(25): Error: no property `length` for type `string`\n/tmp/tmpd87prz53.d(29): Error: no property `length` for type `string`\n/tmp/tmpd87prz53.d(32): Error: no property `length` for type `string`\n/tmp/tmpd87prz53.d(35): Error: no property `substr` for type `string`\n/tmp/tmpd87prz53.d(36): Error: no property `length` for type `string`\n/tmp/tmpd87prz53.d(37): Error: no property `push_back` for type `string[]`\n/tmp/tmpd87prz53.d(40): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd87prz53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < s.length())\n    {\n        if(s[i] == ' ')\n        {\n            if(count == n)\n            {\n                words = append(words, s.substr(j, i-j));\n                count = 0;\n                j = i+1;\n            }\n            else\n                count++;\n        }\n        else\n        {\n            if(count == n)\n            {\n                words = append(words, s.substr(j, i-j));\n                count = 0;\n                j = i;\n            }\n            else\n                count++;\n        }\n        i++;\n    }\n    if(count == n)\n        words = append(words, s.substr(j, i-j));\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpeebg8ma8.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpeebg8ma8.d(25): Error: no property `length` for type `string`\n/tmp/tmpeebg8ma8.d(31): Error: no property `length` for type `string`\n/tmp/tmpeebg8ma8.d(37): Error: undefined identifier `append`\n/tmp/tmpeebg8ma8.d(48): Error: undefined identifier `append`\n/tmp/tmpeebg8ma8.d(58): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeebg8ma8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if(s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < s.length())\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(count == n)\n        {\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = s.substr(j, i - j);\n            return words;\n        }\n        \n        while(i < s.length() && s[i] != ' ')\n        {\n            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n                count++;\n            i++;\n        }\n        j = i;\n        i++;\n    }\n    \n    if(count == n)\n    {\n        words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n        words[words.length - 1] = s.substr(j, i - j);\n        return words;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpqvdmpmc3.d(41): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\n/tmp/tmpqvdmpmc3.d(58): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvdmpmc3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty()) return {};\n    string[] words = {};\n    for(int i = 0; i < s.size(); i++)\n    {\n        if(s[i] == ' ') continue;\n        string word = \"\";\n        for(int j = i; j < s.size(); j++)\n        {\n            if(s[j] == ' ') break;\n            word += s[j];\n        }\n        if(word.size() == n) words.push_back(word);\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpp6v13_d8.d(24): Error: no property `empty` for type `string`\n/tmp/tmpp6v13_d8.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpp6v13_d8.d(26): Error: no property `size` for type `string`\n/tmp/tmpp6v13_d8.d(30): Error: no property `size` for type `string`\n/tmp/tmpp6v13_d8.d(33): Error: slice `word` is not mutable\n/tmp/tmpp6v13_d8.d(35): Error: no property `size` for type `string`\n/tmp/tmpp6v13_d8.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmpp6v13_d8.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6v13_d8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty())\n        return {};\n    \n    string[] words = {};\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if(word.length() == n)\n            words.push_back(word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292934,
      "stdout": "",
      "stderr": "/tmp/tmpua6r93sb.d(24): Error: no property `empty` for type `string`\n/tmp/tmpua6r93sb.d(27): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpua6r93sb.d(29): Error: no property `length` for type `string`\n/tmp/tmpua6r93sb.d(36): Error: no property `length` for type `string`\n/tmp/tmpua6r93sb.d(41): Error: slice `word` is not mutable\n/tmp/tmpua6r93sb.d(44): Error: no property `length` for type `string`\n/tmp/tmpua6r93sb.d(45): Error: no property `push_back` for type `string[]`\n/tmp/tmpua6r93sb.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpua6r93sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if(s.length() == 0)\n        return words;\n    \n    int start = 0, end = 0;\n    while(end < s.length())\n    {\n        while(end < s.length() && s[end] != ' ')\n            end++;\n        \n        if(end - start >= n)\n        {\n            string word = s.substr(start, end - start);\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = word;\n        }\n        \n        while(end < s.length() && s[end] == ' ')\n            end++;\n        start = end;\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp5mg6p6pv.d(37): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5mg6p6pv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words.push_back(word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpl0aauey7.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpl0aauey7.d(25): Error: no property `length` for type `string`\n/tmp/tmpl0aauey7.d(28): Error: no property `length` for type `string`\n/tmp/tmpl0aauey7.d(34): Error: no property `length` for type `string`\n/tmp/tmpl0aauey7.d(38): Error: slice `word` is not mutable\n/tmp/tmpl0aauey7.d(41): Error: no property `length` for type `string`\n/tmp/tmpl0aauey7.d(42): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0aauey7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] ans = {};\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        string word = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s[j] == ' ') break;\n            word += s[j];\n        }\n        if (word.length() == n) ans.push_back(word);\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpm44tdrya.d(24): Error: no property `empty` for type `string`\n/tmp/tmpm44tdrya.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpm44tdrya.d(26): Error: no property `length` for type `string`\n/tmp/tmpm44tdrya.d(29): Error: no property `length` for type `string`\n/tmp/tmpm44tdrya.d(31): Error: slice `word` is not mutable\n/tmp/tmpm44tdrya.d(33): Error: no property `length` for type `string`\n/tmp/tmpm44tdrya.d(33): Error: no property `push_back` for type `string[]`\n/tmp/tmpm44tdrya.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm44tdrya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.length() == 0)\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int nn = 0;\n    int count = 0;\n    while(i < s.length())\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp32v9ct40.d(118): Error: found `unittest` when expecting `)`\n/tmp/tmp32v9ct40.d(130): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp32v9ct40.d(130): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32v9ct40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.length() == 0)\n        return words;\n    \n    string[] word = {};\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        word = {};\n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            \n            if (s[j] == ' ')\n                continue;\n            \n            word.push_back(s[j]);\n            if (word.length() == n)\n                words.push_back(word);\n            \n            word = {};\n        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpg73w3kly.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpg73w3kly.d(25): Error: no property `length` for type `string`\n/tmp/tmpg73w3kly.d(28): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpg73w3kly.d(29): Error: no property `length` for type `string`\n/tmp/tmpg73w3kly.d(34): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\n/tmp/tmpg73w3kly.d(35): Error: no property `length` for type `string`\n/tmp/tmpg73w3kly.d(43): Error: no property `push_back` for type `string[]`\n/tmp/tmpg73w3kly.d(44): Error: no property `length` for type `string[]`\n/tmp/tmpg73w3kly.d(45): Error: no property `push_back` for type `string[]`\n/tmp/tmpg73w3kly.d(47): Error: cannot implicitly convert expression `__lambda4` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg73w3kly.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.length() == 0) return words;\n    \n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < s.length()) {\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (count == n) {\n            words.push_back(s.substr(j, i - j));\n            count = 0;\n            j = i + 1;\n        }\n        count++;\n        i++;\n    }\n    if (count == n) {\n        words.push_back(s.substr(j, i - j));\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpv5xed2xb.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpv5xed2xb.d(25): Error: no property `length` for type `string`\n/tmp/tmpv5xed2xb.d(30): Error: no property `length` for type `string`\n/tmp/tmpv5xed2xb.d(36): Error: no property `push_back` for type `string[]`\n/tmp/tmpv5xed2xb.d(44): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5xed2xb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty()) return {};\n    string res;\n    for(auto c: s)\n    {\n        if(c == ' ') continue;\n        if(n == 0) break;\n        if(n > 0)\n        {\n            n--;\n            res.push_back(c);\n        }\n        else\n        {\n            n++;\n            res.push_back(c);\n        }\n    }\n    return {res};\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpwxods9zd.d(26): Error: no identifier for declarator `c`\n/tmp/tmpwxods9zd.d(26): Error: expression expected, not `:`\n/tmp/tmpwxods9zd.d(26): Error: found `s` when expecting `;` following `for` condition\n/tmp/tmpwxods9zd.d(41): Error: found `}` when expecting `;` following statement\n/tmp/tmpwxods9zd.d(41): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpwxods9zd.d(44): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpwxods9zd.d(56): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxods9zd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.empty())\n        return words;\n    int i = 0;\n    while (i < s.length()) {\n        if (s[i] == ' ') {\n            i++;\n            continue;\n        }\n        int j = i;\n        while (j < s.length() && s[j] != ' ')\n            j++;\n        if (j - i == n) {\n            words = append(words, s.substr(i, j - i));\n            i = j;\n        }\n        else\n            i = j;\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpdsdq0qiv.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpdsdq0qiv.d(25): Error: no property `empty` for type `string`\n/tmp/tmpdsdq0qiv.d(28): Error: no property `length` for type `string`\n/tmp/tmpdsdq0qiv.d(34): Error: no property `length` for type `string`\n/tmp/tmpdsdq0qiv.d(37): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdsdq0qiv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n_consonants = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            if (n_consonants == n)\n            {\n                words.push_back(s.substr(j, k - j));\n                j = k + 1;\n                n_consonants = 0;\n            }\n            k++;\n        }\n        else\n        {\n            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n                n_consonants++;\n            else\n                n_consonants = 0;\n            k++;\n        }\n        i++;\n    }\n    if (n_consonants == n)\n        words.push_back(s.substr(j, k - j));\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpjlvqszvc.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpjlvqszvc.d(25): Error: no property `empty` for type `string`\n/tmp/tmpjlvqszvc.d(32): Error: no property `length` for type `string`\n/tmp/tmpjlvqszvc.d(38): Error: no property `push_back` for type `string[]`\n/tmp/tmpjlvqszvc.d(55): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjlvqszvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0)\n        return new string[0];\n    \n    string[] words = new string[0];\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        \n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            \n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words = append(words, word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpl55pgflc.d(24): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(29): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(36): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(41): Error: slice `word` is not mutable\n/tmp/tmpl55pgflc.d(44): Error: no property `length` for type `string`\n/tmp/tmpl55pgflc.d(45): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl55pgflc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.length() == 0) return {};\n    string[] result = {};\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] ==\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpf6gf3kyo.d(61): Error: expression expected, not `unittest`\n/tmp/tmpf6gf3kyo.d(62): Error: found `{` when expecting `)`\n/tmp/tmpf6gf3kyo.d(73): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf6gf3kyo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty()) return words;\n    \n    string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (word.length() > 0) {\n                words.push_back(word);\n                word = \"\";\n            }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.length() > 0) {\n        words.push_back(word);\n    }\n    \n    int n_consonants = 0;\n    for (int i = 0; i < words.length(); i++) {\n        n_consonants += count_consonants(words[i]);\n    }\n    \n    if (n_consonants == n) {\n        return words;\n    } else if (n_consonants < n) {\n        return {};\n    } else {\n        int start = 0;\n        int end = words.length() - 1;\n        while (start < end) {\n            int mid = (start + end) / 2;\n            if (count_consonants(words[mid]) == n) {\n                return words[start:mid+1];\n            } else if (count_consonants(words[mid]) < n) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return {};\n    }\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmp3hy8ynb5.d(57): Error: found `:` when expecting `,`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hy8ynb5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.empty())\n        return words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            if(word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if(word.length() > 0)\n        words = append(words, word);\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpmpstn_zd.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpmpstn_zd.d(25): Error: no property `empty` for type `string`\n/tmp/tmpmpstn_zd.d(28): Error: no property `length` for type `string`\n/tmp/tmpmpstn_zd.d(32): Error: no property `length` for type `string`\n/tmp/tmpmpstn_zd.d(34): Error: undefined identifier `append`\n/tmp/tmpmpstn_zd.d(40): Error: slice `word` is not mutable\n/tmp/tmpmpstn_zd.d(43): Error: no property `length` for type `string`\n/tmp/tmpmpstn_zd.d(44): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmpstn_zd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    \n    string[] words = {};\n    \n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') continue;\n        \n        string word = {};\n        \n        for (int j = i; j < s.size(); j++) {\n            if (s[j] == ' ') break;\n            \n            word += s[j];\n        }\n        \n        if (word.size() == n) words.push_back(word);\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmp59lje9p7.d(24): Error: no property `empty` for type `string`\n/tmp/tmp59lje9p7.d(26): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp59lje9p7.d(28): Error: no property `size` for type `string`\n/tmp/tmp59lje9p7.d(31): Error: a struct is not a valid initializer for a `string`\n/tmp/tmp59lje9p7.d(33): Error: no property `size` for type `string`\n/tmp/tmp59lje9p7.d(36): Error: slice `word` is not mutable\n/tmp/tmp59lje9p7.d(39): Error: no property `size` for type `string`\n/tmp/tmp59lje9p7.d(39): Error: no property `push_back` for type `string[]`\n/tmp/tmp59lje9p7.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp59lje9p7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if (s.length() == 0)\n        return words;\n    \n    string word = \"\";\n    int count = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n        {\n            if (count == n)\n            {\n                words = append(words, word);\n                word = \"\";\n                count = 0;\n            }\n            else\n            {\n                count++;\n            }\n        }\n        else\n        {\n            word += s[i];\n            count++;\n        }\n    }\n    if (count == n)\n        words = append(words, word);\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmp8hvhnn56.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp8hvhnn56.d(25): Error: no property `length` for type `string`\n/tmp/tmp8hvhnn56.d(30): Error: no property `length` for type `string`\n/tmp/tmp8hvhnn56.d(36): Error: undefined identifier `append`\n/tmp/tmp8hvhnn56.d(47): Error: slice `word` is not mutable\n/tmp/tmp8hvhnn56.d(52): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hvhnn56.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if (s.empty()) return {};\n    string[] result = {};\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' '\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292935,
      "stdout": "",
      "stderr": "/tmp/tmpidrdoekp.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpidrdoekp.d(73): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpidrdoekp.d(73): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidrdoekp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty())\n        return {};\n    string[] words = {};\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        string word = \"\";\n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        if(word.length() == n)\n            words.push_back(word);\n    }\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmp0zx2xsoj.d(24): Error: no property `empty` for type `string`\n/tmp/tmp0zx2xsoj.d(26): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp0zx2xsoj.d(27): Error: no property `length` for type `string`\n/tmp/tmp0zx2xsoj.d(32): Error: no property `length` for type `string`\n/tmp/tmp0zx2xsoj.d(36): Error: slice `word` is not mutable\n/tmp/tmp0zx2xsoj.d(38): Error: no property `length` for type `string`\n/tmp/tmp0zx2xsoj.d(39): Error: no property `push_back` for type `string[]`\n/tmp/tmp0zx2xsoj.d(25): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0zx2xsoj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.length() == 0)\n        return words;\n    \n    string[] words_ = {};\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        \n        string word = \"\";\n        for (int j = i; j < s.length(); j++)\n        {\n            if (s[j] == ' ')\n                break;\n            word += s[j];\n        }\n        \n        if (word.length() == n)\n            words_ = append(words_, word);\n    }\n    \n    words = words_;\n    return words;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpx5nd9fz6.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpx5nd9fz6.d(25): Error: no property `length` for type `string`\n/tmp/tmpx5nd9fz6.d(28): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpx5nd9fz6.d(29): Error: no property `length` for type `string`\n/tmp/tmpx5nd9fz6.d(35): Error: no property `length` for type `string`\n/tmp/tmpx5nd9fz6.d(39): Error: slice `word` is not mutable\n/tmp/tmpx5nd9fz6.d(42): Error: no property `length` for type `string`\n/tmp/tmpx5nd9fz6.d(43): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx5nd9fz6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {};\n    if (s.empty())\n        return words;\n    \n    int i = 0;\n    while (i < s.size())\n    {\n        int j = i;\n        while (j < s.size() && s[j] != ' ')\n            j++;\n        \n        string word = s.substr(i, j - i);\n        if (word.size() == n)\n            words.push_back(word);\n        \n        i = j + 1;\n    }\n    \n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpken5l4lu.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpken5l4lu.d(25): Error: no property `empty` for type `string`\n/tmp/tmpken5l4lu.d(29): Error: no property `size` for type `string`\n/tmp/tmpken5l4lu.d(32): Error: no property `size` for type `string`\n/tmp/tmpken5l4lu.d(35): Error: no property `substr` for type `string`\n/tmp/tmpken5l4lu.d(36): Error: no property `size` for type `string`\n/tmp/tmpken5l4lu.d(37): Error: no property `push_back` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpken5l4lu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    if(s.empty()) return {};\n    string[] result = {};\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ') continue;\n        string word = \"\";\n        for(int j = i; j < s.length(); j++)\n        {\n            if(s[j] == ' ') break;\n            word += s[j];\n        }\n        if(word.length() == n) result.push_back(word);\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmp2t2_yy5c.d(24): Error: no property `empty` for type `string`\n/tmp/tmp2t2_yy5c.d(25): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmp2t2_yy5c.d(26): Error: no property `length` for type `string`\n/tmp/tmp2t2_yy5c.d(30): Error: no property `length` for type `string`\n/tmp/tmp2t2_yy5c.d(33): Error: slice `word` is not mutable\n/tmp/tmp2t2_yy5c.d(35): Error: no property `length` for type `string`\n/tmp/tmp2t2_yy5c.d(35): Error: no property `push_back` for type `string[]`\n/tmp/tmp2t2_yy5c.d(24): Error: cannot implicitly convert expression `__lambda3` of type `void function() pure nothrow @nogc @safe` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2t2_yy5c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n    if (s.length() == 0)\n        return words;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < s.length())\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (k == n)\n        {\n            words = (string[])realloc(words, (words.length + 1) * sizeof(string));\n            words[words.length - 1] = s.substr(j, i - j);\n            i++;\n            j = i;\n            k = 0;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            k++;\n            i++;\n            continue;\n        }\n        if (s[i] == 'y')\n        {\n            if (i + 1 < s.length() && s[i + 1] == 'a' || s[i + 1] == 'e' || s[i + 1] == 'i' || s[i + 1] == 'o' || s[i + 1] == 'u')\n            {\n                k++;\n                i++;\n                continue;\n            }\n            else\n            {\n                i++;\n                continue;\n            }\n        }\n        if (s[i] == 'n' || s[i] == 'l' || s[i] == 'r' || s[i] == 'm' || s[i] == 's' || s[i] == 't')\n        {\n            k++;\n            i++;\n            continue;\n        }\n        if (s[i] == 'h')\n        {\n            if (i + 1 < s.length() && s[i + 1] == 'a' || s[i + 1] == 'e' || s[i + 1]\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpgsjmbig7.d(39): Error: C style cast illegal, use `cast(string[])realloc(words, (words.length + 1) * sizeof(string))`\n/tmp/tmpgsjmbig7.d(80): Error: found `unittest` when expecting `)`\n/tmp/tmpgsjmbig7.d(92): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgsjmbig7.d(92): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgsjmbig7.d(92): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgsjmbig7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns an array of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty array.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[] words = {\"\"};\n    if(s.length() == 0)\n        return words;\n    string word = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            if(word.length() > 0)\n            {\n                words = append(words, word);\n                word = \"\";\n            }\n        }\n        else\n        {\n            word += s[i];\n        }\n    }\n    if(word.length() > 0)\n        words = append(words, word);\n    \n    string[] result = {\"\"};\n    for(int i = 0; i < words.length; i++)\n    {\n        if(words[i].length() == n)\n            result = append(result, words[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}",
      "timestamp": 1664292936,
      "stdout": "",
      "stderr": "/tmp/tmpa50vsg5y.d(24): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpa50vsg5y.d(25): Error: no property `length` for type `string`\n/tmp/tmpa50vsg5y.d(28): Error: no property `length` for type `string`\n/tmp/tmpa50vsg5y.d(32): Error: no property `length` for type `string`\n/tmp/tmpa50vsg5y.d(34): Error: undefined identifier `append`\n/tmp/tmpa50vsg5y.d(40): Error: slice `word` is not mutable\n/tmp/tmpa50vsg5y.d(43): Error: no property `length` for type `string`\n/tmp/tmpa50vsg5y.d(44): Error: undefined identifier `append`\n/tmp/tmpa50vsg5y.d(46): Error: a struct is not a valid initializer for a `string[]`\n/tmp/tmpa50vsg5y.d(49): Error: no property `length` for type `string`\n/tmp/tmpa50vsg5y.d(50): Error: undefined identifier `append`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa50vsg5y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}