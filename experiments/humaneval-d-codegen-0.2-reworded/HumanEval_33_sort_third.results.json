{
  "name": "HumanEval_33_sort_third",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n",
  "tests": "unittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    for (i = 0; i < l.length; i++)\n    {\n        if (i % 3 == 0)\n        {\n            for (j = 0; j < l.length; j++)\n            {\n                if (l[i] == l_prime[j])\n                {\n                    l_prime[j] = l_prime[l.length - 1];\n                    l_prime[l.length - 1] = l_prime[l.length - 2];\n                    l_prime[l.length - 2] = l_prime[l.length - 3];\n                    l_prime[l.length - 3] = l_prime[l.length - 4];\n                    l_prime[l.length - 4] = l_prime[l.length - 5];\n                    l_prime[l.length - 5] = l_prime[l.length - 6];\n                    l_prime[l.length - 6] = l_prime[l.length - 7];\n                    l_prime[l.length - 7] = l_prime[l.length - 8];\n                    l_prime[l.length - 8] = l_prime[l.length - 9];\n                    l_prime[l.length - 9] = l_prime[l.length - 10];\n                    l_prime[l.length - 10] = l_prime[l.length - 11];\n                    l_prime[l.length - 11] = l_prime[l.length - 12];\n                    l_prime[l.length - 12] = l_prime[l.length - 13];\n                    l_prime[l.length - 13] = l_prime[l.length - 14];\n                    l_prime[l.length - 14] = l_prime[l.length - 15];\n                    l_prime[l.length - 15] = l_prime[l.\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmpdx6us3dg.d(51): Error: identifier expected following `.`, not `unittest`\n/tmp/tmpdx6us3dg.d(52): Error: found `{` when expecting `,`\n/tmp/tmpdx6us3dg.d(53): Error: expression expected, not `alias`\n/tmp/tmpdx6us3dg.d(53): Error: found `candidate` when expecting `,`\n/tmp/tmpdx6us3dg.d(53): Error: expression expected, not `=`\n/tmp/tmpdx6us3dg.d(53): Error: found `sort_third` when expecting `,`\n/tmp/tmpdx6us3dg.d(53): Error: expression expected, not `;`\n/tmp/tmpdx6us3dg.d(55): Error: found `assert` when expecting `,`\n/tmp/tmpdx6us3dg.d(55): Error: found `;` when expecting `,`\n/tmp/tmpdx6us3dg.d(56): Error: found `;` when expecting `,`\n/tmp/tmpdx6us3dg.d(57): Error: found `;` when expecting `,`\n/tmp/tmpdx6us3dg.d(58): Error: found `;` when expecting `,`\n/tmp/tmpdx6us3dg.d(59): Error: expression expected, not `}`\n/tmp/tmpdx6us3dg.d(60): Error: found `void` when expecting `,`\n/tmp/tmpdx6us3dg.d(60): Error: found `{` when expecting `,`\n/tmp/tmpdx6us3dg.d(60): Error: expression expected, not `}`\n/tmp/tmpdx6us3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l_i;\n        }\n        else\n        {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmptrp1x7fi.d(17): Error: semicolon expected, not `:`\n/tmp/tmptrp1x7fi.d(17): Error: expression expected, not `:`\n/tmp/tmptrp1x7fi.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptrp1x7fi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        else\n        {\n            while (k < j)\n            {\n                if (l[i] < l_prime[k])\n                {\n                    l_prime[k] = l[i];\n                }\n                k++;\n            }\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8vv2pbgx.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp8vv2pbgx.__unittest_L41_C1() [0x428055]\n??:? void tmp8vv2pbgx.__modtest() [0x428390]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430771]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b531]\n??:? runModuleUnitTests [0x42c49d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l.length;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < len)\n    {\n        if (i % 3 != 0)\n        {\n            l_copy[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    for (i = 0; i < len; i++)\n    {\n        if (i % 3 == 0)\n        {\n            for (j = 0; j < len; j++)\n            {\n                if (l[j] > l_copy[i])\n                {\n                    l_copy[i] = l[j];\n                    l_copy[j] = l[i];\n                }\n            }\n        }\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmpbs12iwh5.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpbs12iwh5.d(16): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbs12iwh5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpou0ir63v.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpou0ir63v.__unittest_L25_C1() [0x427ff5]\n??:? void tmpou0ir63v.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long l_i : l)\n    {\n        if(i % 3 != 0)\n            l_prime[i] = l_i;\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmpst2klyc0.d(17): Error: semicolon expected, not `:`\n/tmp/tmpst2klyc0.d(17): Error: expression expected, not `:`\n/tmp/tmpst2klyc0.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpst2klyc0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < l.length)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        else\n        {\n            while(k < j)\n            {\n                if(l_prime[k] > l[i])\n                {\n                    l_prime[k] = l_prime[k] - l[i];\n                    break;\n                }\n                k++;\n            }\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplzla3h6e.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmplzla3h6e.__unittest_L42_C1() [0x428091]\n??:? void tmplzla3h6e.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c707]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c4dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        else\n        {\n            while (k < j)\n            {\n                if (l[i] < l_prime[k])\n                {\n                    l_prime[k] = l[i];\n                }\n                k++;\n            }\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8vv2pbgx.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp8vv2pbgx.__unittest_L41_C1() [0x428055]\n??:? void tmp8vv2pbgx.__modtest() [0x428390]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430771]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b531]\n??:? runModuleUnitTests [0x42c49d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (i % 3 != 0) {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    for (int i_prime = 0; i_prime < l_prime.length; i_prime++) {\n        if (i_prime % 3 == 0) {\n            l_prime[i_prime] = l[i_prime / 3];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmpqkwcqmcs.d(17): Error: semicolon expected, not `:`\n/tmp/tmpqkwcqmcs.d(17): Error: expression expected, not `:`\n/tmp/tmpqkwcqmcs.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqkwcqmcs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (l_i % 3 != 0) {\n            l_prime[i] = l_i;\n            i++;\n        }\n    }\n    for (int j = 0; j < i; j++) {\n        l_prime[j] = l[j];\n    }\n    for (int k = 0; k < i; k++) {\n        l_prime[k] = l_prime[k] * 3;\n    }\n    for (int m = 0; m < i; m++) {\n        l_prime[m] = l_prime[m] - l_prime[m] % 3;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmph0hhsljb.d(17): Error: semicolon expected, not `:`\n/tmp/tmph0hhsljb.d(17): Error: expression expected, not `:`\n/tmp/tmph0hhsljb.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0hhsljb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe4wzcaeb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428545]\n??:? void tmpe4wzcaeb.__unittest_L30_C1() [0x427f8d]\n??:? void tmpe4wzcaeb.__modtest() [0x4282c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43071d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bcc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a08]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmre6jwvt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpmre6jwvt.__unittest_L30_C1() [0x427ff5]\n??:? void tmpmre6jwvt.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyac1t2xe.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpyac1t2xe.__unittest_L30_C1() [0x427ff5]\n??:? void tmpyac1t2xe.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l2[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < l2.length)\n    {\n        if (i % 3 == 0)\n        {\n            l2[k] = l2[i];\n            k++;\n        }\n        i++;\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd3wq6q_q.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4285bd]\n??:? void tmpd3wq6q_q.__unittest_L40_C1() [0x428001]\n??:? void tmpd3wq6q_q.__modtest() [0x42833c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c677]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430795]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430721]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e1]\n??:? runModuleUnitTests [0x42c44d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a80]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long x : l) \n    {\n        if (x % 3 == 0) \n        {\n            l_prime[i] = x;\n            i++;\n        }\n        else \n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmp4hth2miq.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4hth2miq.d(17): Error: expression expected, not `:`\n/tmp/tmp4hth2miq.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hth2miq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m54v6bc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp3m54v6bc.__unittest_L26_C1() [0x427ff5]\n??:? void tmp3m54v6bc.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    while (i < l.length)\n    {\n        if (i % 3 == 0)\n        {\n            l_prime[k] = l[i];\n            k++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr8y30gcy.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x4285bd]\n??:? void tmpr8y30gcy.__unittest_L39_C1() [0x428001]\n??:? void tmpr8y30gcy.__modtest() [0x42833c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c677]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430795]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430721]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e1]\n??:? runModuleUnitTests [0x42c44d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a80]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (l_i % 3 == 0) {\n            l_prime[i] = l_i;\n            i++;\n        }\n    }\n    for (long l_i : l) {\n        if (l_i % 3 != 0) {\n            l_prime[i] = l_i;\n            i++;\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmpa07mmqkx.d(17): Error: semicolon expected, not `:`\n/tmp/tmpa07mmqkx.d(17): Error: expression expected, not `:`\n/tmp/tmpa07mmqkx.d(17): Error: found `l` when expecting `;` following `for` condition\n/tmp/tmpa07mmqkx.d(23): Error: semicolon expected, not `:`\n/tmp/tmpa07mmqkx.d(23): Error: expression expected, not `:`\n/tmp/tmpa07mmqkx.d(23): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa07mmqkx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m54v6bc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp3m54v6bc.__unittest_L26_C1() [0x427ff5]\n??:? void tmp3m54v6bc.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 == 0) {\n            l2[i] = l[i];\n        } else {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpilcqimf8.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpilcqimf8.__unittest_L25_C1() [0x427ff5]\n??:? void tmpilcqimf8.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmre6jwvt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpmre6jwvt.__unittest_L30_C1() [0x427ff5]\n??:? void tmpmre6jwvt.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l2[i] = l[i];\n        }\n        else {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpujw2rj8e.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpujw2rj8e.__unittest_L26_C1() [0x427ff5]\n??:? void tmpujw2rj8e.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    while (i < l.length)\n    {\n        if (i % 3 == 0)\n        {\n            l_prime[k] = l[i];\n            k++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr8y30gcy.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x4285bd]\n??:? void tmpr8y30gcy.__unittest_L39_C1() [0x428001]\n??:? void tmpr8y30gcy.__modtest() [0x42833c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c677]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430795]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430721]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e1]\n??:? runModuleUnitTests [0x42c44d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a80]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (l_i % 3 != 0) {\n            l_prime[i] = l_i;\n            i++;\n        }\n    }\n    for (int j = 0; j < i; j++) {\n        l_prime[j] = l[j];\n    }\n    for (int k = 0; k < i; k++) {\n        for (int j = 0; j < i - 1; j++) {\n            if (l_prime[j] > l_prime[j + 1]) {\n                long temp = l_prime[j];\n                l_prime[j] = l_prime[j + 1];\n                l_prime[j + 1] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmpzj4lom9s.d(17): Error: semicolon expected, not `:`\n/tmp/tmpzj4lom9s.d(17): Error: expression expected, not `:`\n/tmp/tmpzj4lom9s.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzj4lom9s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    int len = l.length;\n    long[] l2 = new long[len];\n    int i = 0;\n    for (i = 0; i < len; i++) {\n        if (i % 3 != 0) {\n            l2[i] = l[i];\n        }\n    }\n    for (i = 0; i < len; i++) {\n        if (i % 3 == 0) {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmpcbyfw0b3.d(15): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbyfw0b3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long l_i : l)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l_i;\n        }\n        else\n        {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmp6w6pygwz.d(17): Error: semicolon expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: expression expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6w6pygwz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l2[i] = l[i];\n        }\n        else {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpujw2rj8e.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpujw2rj8e.__unittest_L26_C1() [0x427ff5]\n??:? void tmpujw2rj8e.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyac1t2xe.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpyac1t2xe.__unittest_L30_C1() [0x427ff5]\n??:? void tmpyac1t2xe.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgdr4hg33.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgdr4hg33.__unittest_L27_C1() [0x427ff5]\n??:? void tmpgdr4hg33.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) \n    {\n        if (i % 3 != 0) \n        {\n            l_prime[i] = l_i;\n        }\n        else \n        {\n            l_prime[i] = Math.min(l_i, l_prime[i - 1]);\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmpflpnz7sy.d(17): Error: semicolon expected, not `:`\n/tmp/tmpflpnz7sy.d(17): Error: expression expected, not `:`\n/tmp/tmpflpnz7sy.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpflpnz7sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmre6jwvt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpmre6jwvt.__unittest_L30_C1() [0x427ff5]\n??:? void tmpmre6jwvt.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    while (k < l.length)\n    {\n        if (k % 3 == 0)\n        {\n            l_prime[k] = l[k];\n            k++;\n        }\n        k++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa1r1urqe.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x4285c5]\n??:? void tmpa1r1urqe.__unittest_L39_C1() [0x428009]\n??:? void tmpa1r1urqe.__modtest() [0x428344]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b512]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43079d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430729]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e9]\n??:? runModuleUnitTests [0x42c455]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a88]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l2[i] = l[i];\n        }\n        else\n        {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2krveeut.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp2krveeut.__unittest_L29_C1() [0x427ff5]\n??:? void tmp2krveeut.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe4wzcaeb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428545]\n??:? void tmpe4wzcaeb.__unittest_L30_C1() [0x427f8d]\n??:? void tmpe4wzcaeb.__modtest() [0x4282c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43071d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bcc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a08]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l2[i] = l[i];\n        }\n        else\n        {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2krveeut.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp2krveeut.__unittest_L29_C1() [0x427ff5]\n??:? void tmp2krveeut.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpou0ir63v.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpou0ir63v.__unittest_L25_C1() [0x427ff5]\n??:? void tmpou0ir63v.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmre6jwvt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpmre6jwvt.__unittest_L30_C1() [0x427ff5]\n??:? void tmpmre6jwvt.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l.length;\n    int third = len % 3;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < len) {\n        if (i + third < len) {\n            if (l_copy[i] > l_copy[i + third]) {\n                l_copy[i] = l_copy[i] + l_copy[i + third];\n                l_copy[i + third] = l_copy[i] - l_copy[i + third];\n                l_copy[i] = l_copy[i] - l_copy[i + third];\n            }\n        }\n        i = i + third;\n        third = len % 3;\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmp7h5uzh85.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmp7h5uzh85.d(16): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7h5uzh85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmre6jwvt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpmre6jwvt.__unittest_L30_C1() [0x427ff5]\n??:? void tmpmre6jwvt.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (i = 0; i < l.length; i++) \n    {\n        if (i % 3 != 0) \n        {\n            l_prime[i] = l[i];\n        } \n        else \n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6d_f2age.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp6d_f2age.__unittest_L30_C1() [0x427ff5]\n??:? void tmp6d_f2age.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l2[i] = l[i];\n        }\n        else\n        {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2krveeut.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp2krveeut.__unittest_L29_C1() [0x427ff5]\n??:? void tmp2krveeut.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l_copy.length;\n    int third = len / 3;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < len) {\n        if (i % 3 != 0) {\n            l_copy[j] = l_copy[i];\n            j++;\n        }\n        i++;\n    }\n    while (k < len) {\n        if (k % 3 == 0) {\n            l_copy[k] = l_copy[third];\n            k++;\n        }\n        third++;\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpb6vefdd7.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpb6vefdd7.d(16): Error: cannot implicitly convert expression `l_copy.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6vefdd7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpou0ir63v.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpou0ir63v.__unittest_L25_C1() [0x427ff5]\n??:? void tmpou0ir63v.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    int len = l.length;\n    int third = len % 3;\n    long[] l2 = new long[len];\n    for (int i = 0; i < len; i++) {\n        if (i % 3 != 0) {\n            l2[i] = l[i];\n        }\n    }\n    for (int i = 0; i < len; i++) {\n        if (i % 3 == 0) {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmph4_qjy55.d(15): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4_qjy55.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long l_i : l)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l_i;\n        }\n        else\n        {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmp6w6pygwz.d(17): Error: semicolon expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: expression expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6w6pygwz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    int i, j, k;\n    long temp;\n    long[] l_prime = new long[l.length];\n    for (i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n            for (j = i + 1; j < l.length; j++)\n            {\n                if (j % 3 != 0)\n                {\n                    if (l[i] > l[j])\n                    {\n                        temp = l[i];\n                        l[i] = l[j];\n                        l[j] = temp;\n                    }\n                }\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjyln0goc.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x4286cd]\n??:? void tmpjyln0goc.__unittest_L43_C1() [0x428115]\n??:? void tmpjyln0goc.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l.length;\n    for (int i = 0; i < len; i++) {\n        if (i % 3 == 0) {\n            l_copy[i] = l[i];\n        }\n    }\n    for (int i = 0; i < len; i++) {\n        if (i % 3 != 0) {\n            for (int j = 0; j < len - 1; j++) {\n                if (l_copy[j] > l_copy[j + 1]) {\n                    long temp = l_copy[j];\n                    l_copy[j] = l_copy[j + 1];\n                    l_copy[j + 1] = temp;\n                }\n            }\n        }\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpsho3hj_r.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpsho3hj_r.d(16): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsho3hj_r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpou0ir63v.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpou0ir63v.__unittest_L25_C1() [0x427ff5]\n??:? void tmpou0ir63v.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m54v6bc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp3m54v6bc.__unittest_L26_C1() [0x427ff5]\n??:? void tmp3m54v6bc.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i % 3 != 0)\n        {\n            l2[i] = x;\n        }\n        i++;\n    }\n    for(int j = 0; j < l2.length; j++)\n    {\n        for(int k = 0; k < l2.length; k++)\n        {\n            if(l2[j] > l2[k])\n            {\n                long temp = l2[j];\n                l2[j] = l2[k];\n                l2[k] = temp;\n            }\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpytloxec8.d(17): Error: semicolon expected, not `:`\n/tmp/tmpytloxec8.d(17): Error: expression expected, not `:`\n/tmp/tmpytloxec8.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpytloxec8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m54v6bc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp3m54v6bc.__unittest_L26_C1() [0x427ff5]\n??:? void tmp3m54v6bc.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    int len = l.length;\n    int third = len / 3;\n    long[] l2 = new long[len];\n    int i = 0;\n    for (int j = 0; j < third; j++)\n    {\n        l2[i] = l[j];\n        i++;\n    }\n    for (int j = third; j < len; j++)\n    {\n        l2[i] = l[j];\n        i++;\n    }\n    for (int j = 0; j < third; j++)\n    {\n        l2[i] = l[j];\n        i++;\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmp29jm8qyq.d(15): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29jm8qyq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpou0ir63v.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpou0ir63v.__unittest_L25_C1() [0x427ff5]\n??:? void tmpou0ir63v.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l2[i] = l[i];\n        }\n        else\n        {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0_9a_yuw.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0_9a_yuw.__unittest_L30_C1() [0x427ff5]\n??:? void tmp0_9a_yuw.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < l.length)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt976ybj3.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428545]\n??:? void tmpt976ybj3.__unittest_L30_C1() [0x427f8d]\n??:? void tmpt976ybj3.__modtest() [0x4282c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43071d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bcc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a08]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpou0ir63v.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpou0ir63v.__unittest_L25_C1() [0x427ff5]\n??:? void tmpou0ir63v.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long l_i : l)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    for(int i_prime = 0; i_prime < l_prime.length; i_prime++)\n    {\n        for(int i_prime_prime = i_prime + 1; i_prime_prime < l_prime.length; i_prime_prime++)\n        {\n            if(l_prime[i_prime] > l_prime[i_prime_prime])\n            {\n                long temp = l_prime[i_prime];\n                l_prime[i_prime] = l_prime[i_prime_prime];\n                l_prime[i_prime_prime] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmp4ubz9yvs.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4ubz9yvs.d(17): Error: expression expected, not `:`\n/tmp/tmp4ubz9yvs.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ubz9yvs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe4wzcaeb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428545]\n??:? void tmpe4wzcaeb.__unittest_L30_C1() [0x427f8d]\n??:? void tmpe4wzcaeb.__modtest() [0x4282c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43071d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bcc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a08]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmre6jwvt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpmre6jwvt.__unittest_L30_C1() [0x427ff5]\n??:? void tmpmre6jwvt.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (i % 3 != 0) \n        {\n            l_prime[i] = l[i];\n        } \n        else \n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsfwimk_x.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpsfwimk_x.__unittest_L29_C1() [0x427ff5]\n??:? void tmpsfwimk_x.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l2[i] = l[i];\n        }\n        else\n        {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2krveeut.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp2krveeut.__unittest_L29_C1() [0x427ff5]\n??:? void tmp2krveeut.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l.length;\n    for (int i = 0; i < len; i++) {\n        if (i % 3 != 0) {\n            l_copy[i] = l[i];\n        }\n    }\n    for (int i = 0; i < len; i++) {\n        if (i % 3 == 0) {\n            l_copy[i] = l[i];\n        }\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpuhohlqd_.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpuhohlqd_.d(16): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhohlqd_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpou0ir63v.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpou0ir63v.__unittest_L25_C1() [0x427ff5]\n??:? void tmpou0ir63v.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l_copy[i] = l[i];\n    \n    int third = l.length / 3;\n    int[] third_indices = new int[third];\n    for (int i = 0; i < third; i++)\n        third_indices[i] = i;\n    \n    for (int i = 0; i < l.length; i++)\n        if (i % 3 != 0)\n            third_indices[i / 3] = l_copy[i];\n    \n    for (int i = 0; i < l.length; i++)\n        l[i] = l_copy[third_indices[i / 3]];\n    \n    return l;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpmsm_9e93.d(19): Error: cannot implicitly convert expression `l.length / 3LU` of type `ulong` to `int`\n/tmp/tmpmsm_9e93.d(26): Error: cannot implicitly convert expression `l_copy[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsm_9e93.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (i % 3 != 0) \n        {\n            l_prime[i] = l[i];\n        } \n        else \n        {\n            l_prime[i] = Math.min(l[i], Math.min(l[i - 1], Math.min(l[i - 2], l[i - 3])));\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpewbeltji.d(24): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewbeltji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long l_i : l)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l_i;\n        }\n        else\n        {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmp6w6pygwz.d(17): Error: semicolon expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: expression expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6w6pygwz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (i % 3 != 0) \n        {\n            l_prime[i] = l[i];\n        } \n        else \n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsfwimk_x.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpsfwimk_x.__unittest_L29_C1() [0x427ff5]\n??:? void tmpsfwimk_x.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (int j = 0; j < l.length; j++)\n    {\n        if (j % 3 != 0)\n        {\n            l_prime[i] = l[j];\n            i++;\n        }\n    }\n    for (int j = 0; j < l.length; j++)\n    {\n        if (j % 3 == 0)\n        {\n            l_prime[i] = l[j];\n            i++;\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph7yrajga.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4285bd]\n??:? void tmph7yrajga.__unittest_L35_C1() [0x428005]\n??:? void tmph7yrajga.__modtest() [0x428340]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c677]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430795]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430721]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e1]\n??:? runModuleUnitTests [0x42c44d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a80]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps4n55h0f.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmps4n55h0f.__unittest_L26_C1() [0x427ff5]\n??:? void tmps4n55h0f.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    int i = 0;\n    for (long l1 : l) {\n        if (l1 % 3 != 0) {\n            l2[i] = l1;\n            i++;\n        }\n    }\n    for (int j = 0; j < i; j++) {\n        for (int k = 0; k < i - 1; k++) {\n            if (l2[k] > l2[k + 1]) {\n                long temp = l2[k];\n                l2[k] = l2[k + 1];\n                l2[k + 1] = temp;\n            }\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmp9x6vu1wm.d(17): Error: semicolon expected, not `:`\n/tmp/tmp9x6vu1wm.d(17): Error: expression expected, not `:`\n/tmp/tmp9x6vu1wm.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x6vu1wm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmre6jwvt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpmre6jwvt.__unittest_L30_C1() [0x427ff5]\n??:? void tmpmre6jwvt.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l_i;\n        }\n        else\n        {\n            l_prime[i] = Math.min(l_i, l_prime[i - 1]);\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpa5ihg_h_.d(17): Error: semicolon expected, not `:`\n/tmp/tmpa5ihg_h_.d(17): Error: expression expected, not `:`\n/tmp/tmpa5ihg_h_.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5ihg_h_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (i % 3 != 0) \n        {\n            l_prime[i] = l[i];\n        } \n        else \n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsfwimk_x.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpsfwimk_x.__unittest_L29_C1() [0x427ff5]\n??:? void tmpsfwimk_x.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l2[i] = l[i];\n        } else {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo35nauj2.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpo35nauj2.__unittest_L25_C1() [0x427ff5]\n??:? void tmpo35nauj2.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 == 0)\n        {\n            l_prime[k] = l[j];\n            k++;\n            j++;\n        }\n        else\n        {\n            l_prime[k] = l[i];\n            k++;\n            i++;\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp91dvjytb.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42865e]\n??:? long[] tmp91dvjytb.sort_third(long[]) [0x427e5d]\n??:? void tmp91dvjytb.__unittest_L36_C1() [0x427f72]\n??:? void tmp91dvjytb.__modtest() [0x42832c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n        l_copy[i] = l[i];\n    \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 == 0)\n        {\n            l_copy[j] = l[i];\n            j++;\n        }\n        else if (i % 3 == 1)\n        {\n            l_copy[k] = l[i];\n            k++;\n        }\n        else\n        {\n            l_copy[k] = l[i];\n            k++;\n        }\n        i++;\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp88bfuy3c.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x42867d]\n??:? void tmp88bfuy3c.__unittest_L43_C1() [0x4280c5]\n??:? void tmp88bfuy3c.__modtest() [0x428400]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c737]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430855]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a1]\n??:? runModuleUnitTests [0x42c50d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b40]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (i % 3 != 0) {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    for (int i_prime = 0; i_prime < l_prime.length; i_prime++) {\n        for (int i_prime_prime = i_prime + 1; i_prime_prime < l_prime.length; i_prime_prime++) {\n            if (l_prime[i_prime] > l_prime[i_prime_prime]) {\n                long temp = l_prime[i_prime];\n                l_prime[i_prime] = l_prime[i_prime_prime];\n                l_prime[i_prime_prime] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmp4qffk0lk.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4qffk0lk.d(17): Error: expression expected, not `:`\n/tmp/tmp4qffk0lk.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4qffk0lk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(i % 3 != 0)\n            l_prime[i] = x;\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpgb4xf5t1.d(17): Error: semicolon expected, not `:`\n/tmp/tmpgb4xf5t1.d(17): Error: expression expected, not `:`\n/tmp/tmpgb4xf5t1.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgb4xf5t1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l2[i] = l[i];\n        } else {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo35nauj2.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpo35nauj2.__unittest_L25_C1() [0x427ff5]\n??:? void tmpo35nauj2.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < l.length)\n    {\n        if (i % 3 == 0)\n        {\n            l_prime[k] = l[i];\n            k++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgo_tqib9.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4285c5]\n??:? void tmpgo_tqib9.__unittest_L40_C1() [0x428009]\n??:? void tmpgo_tqib9.__modtest() [0x428344]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b512]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43079d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430729]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e9]\n??:? runModuleUnitTests [0x42c455]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a88]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (i % 3 != 0) \n        {\n            l_prime[i] = l[i];\n        } \n        else \n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsfwimk_x.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpsfwimk_x.__unittest_L29_C1() [0x427ff5]\n??:? void tmpsfwimk_x.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (l_i % 3 != 0) {\n            l_prime[i] = l_i;\n            i++;\n        }\n    }\n    for (int j = 0; j < i; j++) {\n        l_prime[j] = l[j];\n    }\n    for (int k = 0; k < i; k++) {\n        l_prime[k] = l_prime[k] * 3;\n    }\n    for (int m = 0; m < i; m++) {\n        l_prime[m] = l_prime[m] / 3;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmp2xn8p5lm.d(17): Error: semicolon expected, not `:`\n/tmp/tmp2xn8p5lm.d(17): Error: expression expected, not `:`\n/tmp/tmp2xn8p5lm.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2xn8p5lm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long l_i : l)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l_i;\n        }\n        else\n        {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmp6w6pygwz.d(17): Error: semicolon expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: expression expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6w6pygwz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    int i;\n    long[] l_new = new long[l.length];\n    for (i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_new[i] = l[i];\n        }\n        else {\n            l_new[i] = l[i];\n        }\n    }\n    return l_new;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo29dpq70.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4285b5]\n??:? void tmpo29dpq70.__unittest_L27_C1() [0x427ff9]\n??:? void tmpo29dpq70.__modtest() [0x428334]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c66f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b502]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43078d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430719]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d9]\n??:? runModuleUnitTests [0x42c445]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a78]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m54v6bc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp3m54v6bc.__unittest_L26_C1() [0x427ff5]\n??:? void tmp3m54v6bc.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m54v6bc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp3m54v6bc.__unittest_L26_C1() [0x427ff5]\n??:? void tmp3m54v6bc.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmre6jwvt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpmre6jwvt.__unittest_L30_C1() [0x427ff5]\n??:? void tmpmre6jwvt.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 == 0)\n        {\n            l_copy[i] = l_copy[i];\n        }\n        else\n        {\n            l_copy[i] = l_copy[i];\n        }\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpkj4hlole.d(15): Error: no property `clone` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj4hlole.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l.length;\n    int third = len / 3;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < len)\n    {\n        if (i % 3 == 0)\n        {\n            l_copy[k] = l[i];\n            k++;\n        }\n        else\n        {\n            while (j < third)\n            {\n                if (l[i] < l[j])\n                {\n                    long temp = l[i];\n                    l[i] = l[j];\n                    l[j] = temp;\n                }\n                j++;\n            }\n        }\n        i++;\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpv9eru2x5.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpv9eru2x5.d(16): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9eru2x5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int l_size = l.length;\n    for (int i = 0; i < l_size; i++) {\n        if (i % 3 == 0) {\n            continue;\n        }\n        int j = i;\n        while (j < l_size && l[j] % 3 == 0) {\n            j++;\n        }\n        if (j != i) {\n            l_copy[i] = l[j];\n            l_copy[j] = l[i];\n        }\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpuv1tg9s2.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpuv1tg9s2.d(16): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuv1tg9s2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m54v6bc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp3m54v6bc.__unittest_L26_C1() [0x427ff5]\n??:? void tmp3m54v6bc.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        else\n        {\n            while (k < j)\n            {\n                if (l[i] > l_prime[k])\n                {\n                    l_prime[k] = l[i];\n                }\n                k++;\n            }\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmppz7pxs.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmpmppz7pxs.__unittest_L41_C1() [0x428055]\n??:? void tmpmppz7pxs.__modtest() [0x428390]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430771]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b531]\n??:? runModuleUnitTests [0x42c49d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m54v6bc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp3m54v6bc.__unittest_L26_C1() [0x427ff5]\n??:? void tmp3m54v6bc.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < l.length)\n    {\n        if (i % 3 == 0)\n        {\n            l_prime[k] = l[i];\n            k++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgo_tqib9.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4285c5]\n??:? void tmpgo_tqib9.__unittest_L40_C1() [0x428009]\n??:? void tmpgo_tqib9.__modtest() [0x428344]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b512]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43079d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430729]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e9]\n??:? runModuleUnitTests [0x42c455]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a88]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        l_copy[i] = l[i];\n    }\n    \n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            for (int j = 0; j < l.length; j++)\n            {\n                if (l[j] > l_copy[i])\n                {\n                    l_copy[i] = l[j];\n                }\n            }\n        }\n    }\n    \n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyzy7q2r5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42862d]\n??:? void tmpyzy7q2r5.__unittest_L37_C1() [0x428075]\n??:? void tmpyzy7q2r5.__modtest() [0x4283b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430805]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430791]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b551]\n??:? runModuleUnitTests [0x42c4bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428af0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 == 0)\n        {\n            l_prime[k] = l[i];\n            k++;\n        }\n        else\n        {\n            while (j < l.length && l[j] < l[i])\n            {\n                j++;\n            }\n            if (j < l.length && l[j] == l[i])\n            {\n                j++;\n            }\n            l_prime[k] = l[j];\n            k++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn2bbk_mn.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpn2bbk_mn.__unittest_L43_C1() [0x428099]\n??:? void tmpn2bbk_mn.__modtest() [0x4283d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < l.length)\n    {\n        if(i % 3 != 0)\n        {\n            l2[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    for(i = 0; i < l2.length; i++)\n    {\n        for(j = 0; j < l2.length; j++)\n        {\n            if(l2[i] == l2[j])\n            {\n                for(k = 0; k < l2.length; k++)\n                {\n                    if(l2[k] == l2[j])\n                    {\n                        l2[k] = l2[i];\n                    }\n                }\n            }\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjgs95utj.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428685]\n??:? void tmpjgs95utj.__unittest_L46_C1() [0x4280c9]\n??:? void tmpjgs95utj.__modtest() [0x428404]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43085d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b48]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgdr4hg33.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgdr4hg33.__unittest_L27_C1() [0x427ff5]\n??:? void tmpgdr4hg33.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        } else {\n            l_prime[i] = Math.min(Math.max(l[i], l[i - 1]), l[i - 2]);\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpck0_g8bd.d(20): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpck0_g8bd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l.length;\n    for (int i = 0; i < len; i++) {\n        if (i % 3 != 0) {\n            l_copy[i] = l[i];\n        }\n    }\n    l_copy = sort_third_helper(l_copy);\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpothy88ym.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpothy88ym.d(16): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpothy88ym.d(22): Error: undefined identifier `sort_third_helper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpothy88ym.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (l_i % 3 == 0) {\n            l_prime[i] = l_i;\n            i++;\n        }\n    }\n    for (int j = i; j < l_prime.length; j++) {\n        l_prime[j] = l[j - i];\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmplmnrfikk.d(17): Error: semicolon expected, not `:`\n/tmp/tmplmnrfikk.d(17): Error: expression expected, not `:`\n/tmp/tmplmnrfikk.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplmnrfikk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m54v6bc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp3m54v6bc.__unittest_L26_C1() [0x427ff5]\n??:? void tmp3m54v6bc.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (i % 3 != 0) {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    for (int i_prime = 0; i_prime < l_prime.length; i_prime++) {\n        if (i_prime % 3 == 0) {\n            l_prime[i_prime] = l[i_prime / 3];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmpqkwcqmcs.d(17): Error: semicolon expected, not `:`\n/tmp/tmpqkwcqmcs.d(17): Error: expression expected, not `:`\n/tmp/tmpqkwcqmcs.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqkwcqmcs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 == 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        else\n        {\n            while (k < j)\n            {\n                if (l[i] > l_prime[k])\n                {\n                    l_prime[k] = l[i];\n                }\n                k++;\n            }\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcz1suma3.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmpcz1suma3.__unittest_L41_C1() [0x428055]\n??:? void tmpcz1suma3.__modtest() [0x428390]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430771]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b531]\n??:? runModuleUnitTests [0x42c49d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgdr4hg33.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgdr4hg33.__unittest_L27_C1() [0x427ff5]\n??:? void tmpgdr4hg33.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length) {\n        if (i % 3 != 0) {\n            l_prime[j] = l[i];\n            j++;\n        } else {\n            while (k < j) {\n                if (l[i] > l_prime[k]) {\n                    l_prime[k] = l[i];\n                }\n                k++;\n            }\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprhyjvtwg.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmprhyjvtwg.__unittest_L35_C1() [0x428055]\n??:? void tmprhyjvtwg.__modtest() [0x428390]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430771]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b531]\n??:? runModuleUnitTests [0x42c49d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) \n    {\n        if (l_i % 3 != 0) \n        {\n            l_prime[i] = l_i;\n            i++;\n        }\n    }\n    for (int j = 0; j < i; j++) \n    {\n        l_prime[j] = l[j];\n    }\n    for (int k = 0; k < i; k++) \n    {\n        for (int l = 0; l < i - 1; l++) \n        {\n            if (l_prime[l] > l_prime[l + 1]) \n            {\n                long temp = l_prime[l];\n                l_prime[l] = l_prime[l + 1];\n                l_prime[l + 1] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpq017fsiv.d(17): Error: semicolon expected, not `:`\n/tmp/tmpq017fsiv.d(17): Error: expression expected, not `:`\n/tmp/tmpq017fsiv.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq017fsiv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long l_i : l)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l_i;\n        }\n        else\n        {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmp6w6pygwz.d(17): Error: semicolon expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: expression expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6w6pygwz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    while(i < l.length)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5hn2lcv6.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428545]\n??:? void tmp5hn2lcv6.__unittest_L29_C1() [0x427f8d]\n??:? void tmp5hn2lcv6.__modtest() [0x4282c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43071d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bcc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a08]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l2[i] = l[i];\n        }\n        else {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpujw2rj8e.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpujw2rj8e.__unittest_L26_C1() [0x427ff5]\n??:? void tmpujw2rj8e.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (l_i % 3 != 0) {\n            l_prime[i] = l_i;\n            i++;\n        }\n    }\n    for (int j = 0; j < i; j++) {\n        for (int k = 0; k < i - 1; k++) {\n            if (l_prime[k] > l_prime[k + 1]) {\n                long temp = l_prime[k];\n                l_prime[k] = l_prime[k + 1];\n                l_prime[k + 1] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpb88jgf50.d(17): Error: semicolon expected, not `:`\n/tmp/tmpb88jgf50.d(17): Error: expression expected, not `:`\n/tmp/tmpb88jgf50.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb88jgf50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l_copy.length;\n    int third = len / 3;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < len) {\n        if (i % 3 != 0) {\n            l_copy[j] = l_copy[i];\n            j++;\n        }\n        i++;\n    }\n    while (k < len) {\n        if (k % 3 == 0) {\n            l_copy[k] = l_copy[third];\n            k++;\n        }\n        third++;\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpb6vefdd7.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpb6vefdd7.d(16): Error: cannot implicitly convert expression `l_copy.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6vefdd7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (l_i % 3 != 0) {\n            l_prime[i] = l_i;\n            i++;\n        }\n    }\n    for (int j = 0; j < i; j++) {\n        for (int k = 0; k < i - 1; k++) {\n            if (l_prime[k] > l_prime[k + 1]) {\n                long temp = l_prime[k];\n                l_prime[k] = l_prime[k + 1];\n                l_prime[k + 1] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpb88jgf50.d(17): Error: semicolon expected, not `:`\n/tmp/tmpb88jgf50.d(17): Error: expression expected, not `:`\n/tmp/tmpb88jgf50.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb88jgf50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmre6jwvt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpmre6jwvt.__unittest_L30_C1() [0x427ff5]\n??:? void tmpmre6jwvt.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp94pupxmb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428545]\n??:? void tmp94pupxmb.__unittest_L29_C1() [0x427f8d]\n??:? void tmp94pupxmb.__modtest() [0x4282c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43071d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bcc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a08]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l_copy.length;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < len) {\n        if (i % 3 != 0) {\n            l_copy[j] = l_copy[i];\n            j++;\n        }\n        i++;\n    }\n    for (i = 0; i < len; i++) {\n        if (i % 3 == 0) {\n            for (j = 0; j < len; j++) {\n                if (l_copy[j] == l_copy[i]) {\n                    l_copy[k] = l_copy[j];\n                    k++;\n                }\n            }\n        }\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpdrft59jl.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpdrft59jl.d(16): Error: cannot implicitly convert expression `l_copy.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdrft59jl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l2[i] = l[i];\n        }\n        else\n        {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2krveeut.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp2krveeut.__unittest_L29_C1() [0x427ff5]\n??:? void tmp2krveeut.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(int j = 0; j < l.length; j++)\n    {\n        if(j % 3 != 0)\n        {\n            l_prime[i] = l[j];\n            i++;\n        }\n    }\n    for(int j = 0; j < l.length; j++)\n    {\n        if(j % 3 == 0)\n        {\n            l_prime[i] = l[j];\n            i++;\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzx14qkb1.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4285bd]\n??:? void tmpzx14qkb1.__unittest_L35_C1() [0x428005]\n??:? void tmpzx14qkb1.__modtest() [0x428340]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c677]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430795]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430721]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e1]\n??:? runModuleUnitTests [0x42c44d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a80]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long x : l) {\n        if (x % 3 != 0) {\n            l_prime[i] = x;\n            i++;\n        }\n    }\n    for (int j = 0; j < i; j++) {\n        l_prime[j] = l[j];\n    }\n    for (int k = 0; k < i; k++) {\n        l_prime[k] = l_prime[k] * 3;\n    }\n    for (int m = 0; m < i; m++) {\n        l_prime[m] = l_prime[m] / 3;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpem6kn3ck.d(17): Error: semicolon expected, not `:`\n/tmp/tmpem6kn3ck.d(17): Error: expression expected, not `:`\n/tmp/tmpem6kn3ck.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpem6kn3ck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        else\n        {\n            while (k < j)\n            {\n                if (l[i] < l_prime[k])\n                {\n                    l_prime[k] = l[i];\n                }\n                k++;\n            }\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8vv2pbgx.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp8vv2pbgx.__unittest_L41_C1() [0x428055]\n??:? void tmp8vv2pbgx.__modtest() [0x428390]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430771]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b531]\n??:? runModuleUnitTests [0x42c49d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    for (i = 0; i < l.length; i++)\n    {\n        if (i % 3 == 0)\n        {\n            for (k = 0; k < l.length; k++)\n            {\n                if (l[k] > l_prime[i])\n                {\n                    l_prime[i] = l[k];\n                    break;\n                }\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpehblw8ss.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x42863d]\n??:? void tmpehblw8ss.__unittest_L44_C1() [0x428085]\n??:? void tmpehblw8ss.__modtest() [0x4283c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430815]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b561]\n??:? runModuleUnitTests [0x42c4cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b00]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    int i = 0;\n    for(long l1 : l)\n    {\n        if(l1 % 3 != 0)\n        {\n            l2[i] = l1;\n            i++;\n        }\n    }\n    for(int j = 0; j < i; j++)\n    {\n        for(int k = j + 1; k < i; k++)\n        {\n            if(l2[j] > l2[k])\n            {\n                long temp = l2[j];\n                l2[j] = l2[k];\n                l2[k] = temp;\n            }\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmp9wkjphse.d(17): Error: semicolon expected, not `:`\n/tmp/tmp9wkjphse.d(17): Error: expression expected, not `:`\n/tmp/tmp9wkjphse.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wkjphse.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        if (i % 3 != 0) \n        {\n            l_prime[i] = l[i];\n        } \n        else \n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsfwimk_x.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpsfwimk_x.__unittest_L29_C1() [0x427ff5]\n??:? void tmpsfwimk_x.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp94pupxmb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428545]\n??:? void tmp94pupxmb.__unittest_L29_C1() [0x427f8d]\n??:? void tmp94pupxmb.__modtest() [0x4282c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b492]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43071d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bcc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b469]\n??:? runModuleUnitTests [0x42c3d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a08]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (l_i % 3 != 0) {\n            l_prime[i] = l_i;\n            i++;\n        }\n    }\n    for (int j = 0; j < i; j++) {\n        l_prime[j] = l[j];\n    }\n    for (int k = 0; k < i; k++) {\n        for (int l = 0; l < i - 1; l++) {\n            if (l_prime[l] > l_prime[l + 1]) {\n                long temp = l_prime[l];\n                l_prime[l] = l_prime[l + 1];\n                l_prime[l + 1] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpv1wu1n4w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpv1wu1n4w.d(17): Error: expression expected, not `:`\n/tmp/tmpv1wu1n4w.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv1wu1n4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l2 = new long[l.length];\n    int i = 0;\n    for (long x : l)\n    {\n        if (x % 3 != 0)\n        {\n            l2[i] = x;\n            i++;\n        }\n    }\n    for (int j = 0; j < l2.length; j++)\n    {\n        l2[j] = l2[j] * 3;\n    }\n    for (int k = 0; k < l2.length; k++)\n    {\n        l2[k] = l2[k] / 3;\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpk7u9aotr.d(17): Error: semicolon expected, not `:`\n/tmp/tmpk7u9aotr.d(17): Error: expression expected, not `:`\n/tmp/tmpk7u9aotr.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk7u9aotr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 == 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp11ufon7x.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp11ufon7x.__unittest_L29_C1() [0x427ff5]\n??:? void tmp11ufon7x.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 == 0)\n        {\n            l_copy[i] = l[i];\n        }\n    }\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            for (int j = 0; j < l.length; j++)\n            {\n                if (l[i] > l[j])\n                {\n                    long temp = l[i];\n                    l[i] = l[j];\n                    l[j] = temp;\n                }\n            }\n        }\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpfpkhcndk.d(15): Error: no property `clone` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpkhcndk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        } else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps4n55h0f.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmps4n55h0f.__unittest_L26_C1() [0x427ff5]\n??:? void tmps4n55h0f.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 == 0)\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ofeyb6b.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428625]\n??:? void tmp3ofeyb6b.__unittest_L37_C1() [0x42806d]\n??:? void tmp3ofeyb6b.__modtest() [0x4283a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b572]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430789]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b549]\n??:? runModuleUnitTests [0x42c4b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ae8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l_copy.length;\n    int i = 0;\n    while (i < len)\n    {\n        if (i % 3 != 0)\n        {\n            l_copy[i] = l_copy[i];\n            i++;\n        }\n        else\n        {\n            long temp = l_copy[i];\n            l_copy[i] = l_copy[i + 1];\n            l_copy[i + 1] = l_copy[i + 2];\n            l_copy[i + 2] = temp;\n            i += 3;\n        }\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmp9pa56mwa.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmp9pa56mwa.d(16): Error: cannot implicitly convert expression `l_copy.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9pa56mwa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long x : l)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = x;\n        }\n        i++;\n    }\n    for (int j = 0; j < l_prime.length; j++)\n    {\n        for (int k = 0; k < l_prime.length - 1; k++)\n        {\n            if (l_prime[k] > l_prime[k + 1])\n            {\n                long temp = l_prime[k];\n                l_prime[k] = l_prime[k + 1];\n                l_prime[k + 1] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmp1xh5e5z7.d(17): Error: semicolon expected, not `:`\n/tmp/tmp1xh5e5z7.d(17): Error: expression expected, not `:`\n/tmp/tmp1xh5e5z7.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xh5e5z7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length) \n    {\n        if (i % 3 != 0) \n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    for (i = 0; i < l.length; i++) \n    {\n        if (i % 3 == 0) \n        {\n            l_prime[k] = l[i];\n            k++;\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpunkeckw9.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4285c5]\n??:? void tmpunkeckw9.__unittest_L38_C1() [0x428009]\n??:? void tmpunkeckw9.__modtest() [0x428344]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b512]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43079d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430729]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e9]\n??:? runModuleUnitTests [0x42c455]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a88]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    int len = l.length;\n    long[] l2 = new long[len];\n    int i = 0;\n    for (i = 0; i < len; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l2[i] = l[i];\n        }\n        else\n        {\n            l2[i] = l[i];\n        }\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "/tmp/tmp8dw9m7mg.d(15): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dw9m7mg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (long l_i : l) {\n        if (l_i % 3 == 0) {\n            l_prime[i] = l_i;\n        } else {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpgiahjbq2.d(17): Error: semicolon expected, not `:`\n/tmp/tmpgiahjbq2.d(17): Error: expression expected, not `:`\n/tmp/tmpgiahjbq2.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgiahjbq2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        else\n        {\n            while (k < j)\n            {\n                if (l[i] < l_prime[k])\n                {\n                    l_prime[k] = l[i];\n                }\n                k++;\n            }\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8vv2pbgx.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp8vv2pbgx.__unittest_L41_C1() [0x428055]\n??:? void tmp8vv2pbgx.__modtest() [0x428390]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430771]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b531]\n??:? runModuleUnitTests [0x42c49d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgg_m6vjb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpgg_m6vjb.__unittest_L29_C1() [0x427ff5]\n??:? void tmpgg_m6vjb.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long l_i : l)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l_i;\n        }\n        else\n        {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "/tmp/tmp6w6pygwz.d(17): Error: semicolon expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: expression expected, not `:`\n/tmp/tmp6w6pygwz.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6w6pygwz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long l_i : l)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l_i;\n        }\n        i++;\n    }\n    for(int i_prime = 0; i_prime < l_prime.length; i_prime++)\n    {\n        for(int i_prime_prime = i_prime + 1; i_prime_prime < l_prime.length; i_prime_prime++)\n        {\n            if(l_prime[i_prime] > l_prime[i_prime_prime])\n            {\n                long temp = l_prime[i_prime];\n                l_prime[i_prime] = l_prime[i_prime_prime];\n                l_prime[i_prime_prime] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmp4ubz9yvs.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4ubz9yvs.d(17): Error: expression expected, not `:`\n/tmp/tmp4ubz9yvs.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ubz9yvs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(x % 3 != 0)\n        {\n            l_prime[i] = x;\n            i++;\n        }\n    }\n    for(int j = 0; j < l_prime.length; j++)\n    {\n        for(int k = 0; k < l_prime.length; k++)\n        {\n            if(l_prime[j] > l_prime[k])\n            {\n                long temp = l_prime[j];\n                l_prime[j] = l_prime[k];\n                l_prime[k] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpc2jsb5bl.d(17): Error: semicolon expected, not `:`\n/tmp/tmpc2jsb5bl.d(17): Error: expression expected, not `:`\n/tmp/tmpc2jsb5bl.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2jsb5bl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0bh8_xe_.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp0bh8_xe_.__unittest_L29_C1() [0x427ff5]\n??:? void tmp0bh8_xe_.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < l.length)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    i = 0;\n    while(i < l.length)\n    {\n        if(i % 3 == 0)\n        {\n            l_prime[k] = l[i];\n            k++;\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw53gxlo0.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4285c5]\n??:? void tmpw53gxlo0.__unittest_L40_C1() [0x428009]\n??:? void tmpw53gxlo0.__modtest() [0x428344]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b512]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43079d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430729]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e9]\n??:? runModuleUnitTests [0x42c455]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a88]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l.length)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[j] = l[i];\n            j++;\n        }\n        else\n        {\n            while (k < j)\n            {\n                if (l[i] < l_prime[k])\n                {\n                    l_prime[k] = l[i];\n                }\n                k++;\n            }\n        }\n        i++;\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8vv2pbgx.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp8vv2pbgx.__unittest_L41_C1() [0x428055]\n??:? void tmp8vv2pbgx.__modtest() [0x428390]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430771]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b531]\n??:? runModuleUnitTests [0x42c49d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n            for (int j = i + 1; j < l.length; j++)\n            {\n                if (l[i] > l[j])\n                {\n                    l_prime[i] = l[j];\n                    l_prime[j] = l[i];\n                }\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp86yn9xwu.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x4286d5]\n??:? void tmp86yn9xwu.__unittest_L37_C1() [0x42811d]\n??:? void tmp86yn9xwu.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430839]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c565]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b98]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_copy = l.clone();\n    int len = l_copy.length;\n    for (int i = 0; i < len; i++) {\n        if (i % 3 == 0) {\n            l_copy[i] = l_copy[i];\n        }\n    }\n    for (int i = 0; i < len; i++) {\n        if (i % 3 != 0) {\n            for (int j = i; j < len; j++) {\n                if (l_copy[j] < l_copy[i]) {\n                    long temp = l_copy[j];\n                    l_copy[j] = l_copy[i];\n                    l_copy[i] = temp;\n                }\n            }\n        }\n    }\n    return l_copy;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "/tmp/tmpmbqpvw9j.d(15): Error: no property `clone` for type `long[]`\n/tmp/tmpmbqpvw9j.d(16): Error: cannot implicitly convert expression `l_copy.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbqpvw9j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(long x : l)\n    {\n        if(x % 3 != 0)\n        {\n            l_prime[i] = x;\n            i++;\n        }\n    }\n    for(int j = 0; j < l_prime.length; j++)\n    {\n        for(int k = 0; k < l_prime.length; k++)\n        {\n            if(l_prime[j] < l_prime[k])\n            {\n                long temp = l_prime[j];\n                l_prime[j] = l_prime[k];\n                l_prime[k] = temp;\n            }\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "/tmp/tmpounuysh7.d(17): Error: semicolon expected, not `:`\n/tmp/tmpounuysh7.d(17): Error: expression expected, not `:`\n/tmp/tmpounuysh7.d(17): Error: found `l` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpounuysh7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n        if(i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmre6jwvt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpmre6jwvt.__unittest_L30_C1() [0x427ff5]\n??:? void tmpmre6jwvt.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    int n = l.length;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    long[] l2 = new long[n];\n    while (i < n) {\n        if (i % 3 != 0) {\n            l2[j] = l[i];\n            j++;\n        }\n        i++;\n    }\n    while (j < n) {\n        if (j % 3 == 0) {\n            l2[k] = l[j];\n            k++;\n        }\n        j++;\n    }\n    return l2;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293039,
      "stdout": "",
      "stderr": "/tmp/tmp88ie3fz9.d(15): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88ie3fz9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 3 != 0) {\n            l_prime[i] = l[i];\n        }\n        else {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3m54v6bc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp3m54v6bc.__unittest_L26_C1() [0x427ff5]\n??:? void tmp3m54v6bc.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nThis function takes an array l and returns an array l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1L, 2L, 3L])\n    [1L, 2L, 3L]\n    >>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n    [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    \n*/\nlong[] sort_third(long[] l) \n{\n    long[] l_prime = new long[l.length];\n    int i = 0;\n    for (i = 0; i < l.length; i++)\n    {\n        if (i % 3 != 0)\n        {\n            l_prime[i] = l[i];\n        }\n        else\n        {\n            l_prime[i] = l[i];\n        }\n    }\n    return l_prime;\n}\nunittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyac1t2xe.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmpyac1t2xe.__unittest_L30_C1() [0x427ff5]\n??:? void tmpyac1t2xe.__modtest() [0x428330]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}