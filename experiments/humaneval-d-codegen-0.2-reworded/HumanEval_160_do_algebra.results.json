{
  "name": "HumanEval_160_do_algebra",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n",
  "tests": "unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpad_tqzqr.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42920d]\n??:? void tmpad_tqzqr.__unittest_L53_C1() [0x4281db]\n??:? void tmpad_tqzqr.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a995]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f3d]\n??:? runModuleUnitTests [0x42db39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpelxjonu6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42920d]\n??:? void tmpelxjonu6.__unittest_L53_C1() [0x4281db]\n??:? void tmpelxjonu6.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a995]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f3d]\n??:? runModuleUnitTests [0x42db39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpw8glm83m.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8glm83m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(operand[i], result);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_h70lm28.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmp_h70lm28.__unittest_L53_C1() [0x4281ab]\n??:? void tmp_h70lm28.__modtest() [0x428444]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5g4jktxc.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291e5]\n??:? void tmp5g4jktxc.__unittest_L49_C1() [0x4281b3]\n??:? void tmp5g4jktxc.__modtest() [0x42844c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a96d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f15]\n??:? runModuleUnitTests [0x42db11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            } else if(operator[j] == \"-\") {\n                result -= operand[i];\n            } else if(operator[j] == \"*\") {\n                result *= operand[i];\n            } else if(operator[j] == \"/\") {\n                result /= operand[i];\n            } else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp2z724uli.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2z724uli.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwaasuz4v.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpwaasuz4v.__unittest_L53_C1() [0x4281af]\n??:? void tmpwaasuz4v.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpgbgqgx52.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbgqgx52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) \n    {\n        for(int j = 0; j < operator.length; j++) \n        {\n            if(operator[j] == \"+\") \n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") \n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") \n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") \n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") \n            {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpf2se13qn.d(54): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2se13qn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpcbuyn2as.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbuyn2as.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpit_z9gx0.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpit_z9gx0.__unittest_L53_C1() [0x4281af]\n??:? void tmpit_z9gx0.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpgbgqgx52.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbgqgx52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpad_tqzqr.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42920d]\n??:? void tmpad_tqzqr.__unittest_L53_C1() [0x4281db]\n??:? void tmpad_tqzqr.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a995]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f3d]\n??:? runModuleUnitTests [0x42db39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n                result += operand[i];\n            else if(operator[j] == \"-\")\n                result -= operand[i];\n            else if(operator[j] == \"*\")\n                result *= operand[i];\n            else if(operator[j] == \"/\")\n                result /= operand[i];\n            else if(operator[j] == \"**\")\n                result = pow(result, operand[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_or1ef5_.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmp_or1ef5_.__unittest_L50_C1() [0x4281af]\n??:? void tmp_or1ef5_.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\")\n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\")\n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\")\n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\")\n            {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprwskl1xm.d(64): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmprwskl1xm.__unittest_L60_C1() [0x4281af]\n??:? void tmprwskl1xm.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) \n    {\n        for(int j = 0; j < operator.length; j++) \n        {\n            if(operator[j] == \"+\") \n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") \n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") \n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") \n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") \n            {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5v10qty6.d(64): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmp5v10qty6.__unittest_L60_C1() [0x4281af]\n??:? void tmp5v10qty6.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i];\n        } else if (operator[i] == \"/\") {\n            result /= operand[i];\n        } else if (operator[i] == \"**\") {\n            result = math.pow(result, operand[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp7_alqxu1.d(42): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_alqxu1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0oagmqhv.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmp0oagmqhv.__unittest_L53_C1() [0x4281af]\n??:? void tmp0oagmqhv.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            } else if(operator[j] == \"-\") {\n                result -= operand[i];\n            } else if(operator[j] == \"*\") {\n                result *= operand[i];\n            } else if(operator[j] == \"/\") {\n                result /= operand[i];\n            } else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp2z724uli.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2z724uli.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\")\n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\")\n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\")\n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\")\n            {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpw4414ws6.d(54): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4414ws6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], result);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqaorz6a3.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291d5]\n??:? void tmpqaorz6a3.__unittest_L49_C1() [0x4281a7]\n??:? void tmpqaorz6a3.__modtest() [0x428440]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a95d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f05]\n??:? runModuleUnitTests [0x42db01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429698]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr7pig51n.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpr7pig51n.__unittest_L49_C1() [0x4281af]\n??:? void tmpr7pig51n.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmphuy4bfyi.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuy4bfyi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr7pig51n.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpr7pig51n.__unittest_L49_C1() [0x4281af]\n??:? void tmpr7pig51n.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) \n    {\n        for(int j = 0; j < operator.length; j++) \n        {\n            if(operator[j] == \"+\") \n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") \n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") \n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") \n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") \n            {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpf2se13qn.d(54): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2se13qn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            } else if(operator[j] == \"-\") {\n                result -= operand[i];\n            } else if(operator[j] == \"*\") {\n                result *= operand[i];\n            } else if(operator[j] == \"/\") {\n                result /= operand[i];\n            } else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp2z724uli.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2z724uli.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        if(operator[i] == \"+\") {\n            result += operand[i];\n        }\n        else if(operator[i] == \"-\") {\n            result -= operand[i];\n        }\n        else if(operator[i] == \"*\") {\n            result *= operand[i];\n        }\n        else if(operator[i] == \"/\") {\n            result /= operand[i];\n        }\n        else if(operator[i] == \"**\") {\n            result = pow(result, operand[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplijxhfuo.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4291c5]\n??:? void tmplijxhfuo.__unittest_L51_C1() [0x428197]\n??:? void tmplijxhfuo.__modtest() [0x428430]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a94d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ef5]\n??:? runModuleUnitTests [0x42daf1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429688]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptow7u7nz.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmptow7u7nz.__unittest_L53_C1() [0x4281af]\n??:? void tmptow7u7nz.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9l09iodw.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291cd]\n??:? void tmp9l09iodw.__unittest_L53_C1() [0x42819b]\n??:? void tmp9l09iodw.__modtest() [0x428434]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd23]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a955]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428efd]\n??:? runModuleUnitTests [0x42daf9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429690]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpcbuyn2as.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbuyn2as.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmph1_5o6cp.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1_5o6cp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwaasuz4v.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpwaasuz4v.__unittest_L53_C1() [0x4281af]\n??:? void tmpwaasuz4v.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], result);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4jjq75oq.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291d5]\n??:? void tmp4jjq75oq.__unittest_L49_C1() [0x4281a7]\n??:? void tmp4jjq75oq.__modtest() [0x428440]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a95d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f05]\n??:? runModuleUnitTests [0x42db01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429698]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpla2ggzr6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmpla2ggzr6.__unittest_L53_C1() [0x4281e3]\n??:? void tmpla2ggzr6.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            } else if(operator[j] == \"-\") {\n                result -= operand[i];\n            } else if(operator[j] == \"*\") {\n                result *= operand[i];\n            } else if(operator[j] == \"/\") {\n                result /= operand[i];\n            } else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp2z724uli.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2z724uli.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5g4jktxc.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291e5]\n??:? void tmp5g4jktxc.__unittest_L49_C1() [0x4281b3]\n??:? void tmp5g4jktxc.__modtest() [0x42844c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a96d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f15]\n??:? runModuleUnitTests [0x42db11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i];\n        } else if (operator[i] == \"/\") {\n            result /= operand[i];\n        } else if (operator[i] == \"**\") {\n            result = pow(result, operand[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx6xymz0y.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x4291c5]\n??:? void tmpx6xymz0y.__unittest_L47_C1() [0x428197]\n??:? void tmpx6xymz0y.__modtest() [0x428430]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a94d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ef5]\n??:? runModuleUnitTests [0x42daf1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429688]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr7pig51n.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpr7pig51n.__unittest_L49_C1() [0x4281af]\n??:? void tmpr7pig51n.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9yk0wa9m.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmp9yk0wa9m.__unittest_L49_C1() [0x4281e3]\n??:? void tmp9yk0wa9m.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9yk0wa9m.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmp9yk0wa9m.__unittest_L49_C1() [0x4281e3]\n??:? void tmp9yk0wa9m.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n                result += operand[i];\n            else if(operator[j] == \"-\")\n                result -= operand[i];\n            else if(operator[j] == \"*\")\n                result *= operand[i];\n            else if(operator[j] == \"/\")\n                result /= operand[i];\n            else if(operator[j] == \"**\")\n                result = pow(operand[i], result);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6hgr3s10.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4291d5]\n??:? void tmp6hgr3s10.__unittest_L50_C1() [0x4281a7]\n??:? void tmp6hgr3s10.__modtest() [0x428440]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a95d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f05]\n??:? runModuleUnitTests [0x42db01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429698]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpgbgqgx52.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbgqgx52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) \n    {\n        for(int j = 0; j < operator.length; j++) \n        {\n            if(operator[j] == \"+\") \n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") \n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") \n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") \n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") \n            {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpf2se13qn.d(54): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2se13qn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operator.length; i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i];\n        } else if (operator[i] == \"/\") {\n            result /= operand[i];\n        } else if (operator[i] == \"**\") {\n            result = math.pow(result, operand[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp_8ki_hth.d(42): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8ki_hth.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n                result += operand[i];\n            else if(operator[j] == \"-\")\n                result -= operand[i];\n            else if(operator[j] == \"*\")\n                result *= operand[i];\n            else if(operator[j] == \"//\")\n                result /= operand[i];\n            else if(operator[j] == \"**\")\n                result = pow(result, operand[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc2gx2j8v.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpc2gx2j8v.__unittest_L50_C1() [0x4281af]\n??:? void tmpc2gx2j8v.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i];\n        } else if (operator[i] == \"/\") {\n            result /= operand[i];\n        } else if (operator[i] == \"**\") {\n            result = math.pow(result, operand[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp7_alqxu1.d(42): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_alqxu1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr7pig51n.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpr7pig51n.__unittest_L49_C1() [0x4281af]\n??:? void tmpr7pig51n.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9yk0wa9m.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmp9yk0wa9m.__unittest_L49_C1() [0x4281e3]\n??:? void tmp9yk0wa9m.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq5m_ieak.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291e5]\n??:? void tmpq5m_ieak.__unittest_L49_C1() [0x4281b3]\n??:? void tmpq5m_ieak.__modtest() [0x42844c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a96d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f15]\n??:? runModuleUnitTests [0x42db11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9yk0wa9m.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmp9yk0wa9m.__unittest_L49_C1() [0x4281e3]\n??:? void tmp9yk0wa9m.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppq8a3pa1.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42920d]\n??:? void tmppq8a3pa1.__unittest_L49_C1() [0x4281db]\n??:? void tmppq8a3pa1.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a995]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f3d]\n??:? runModuleUnitTests [0x42db39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n                result += operand[i];\n            else if(operator[j] == \"-\")\n                result -= operand[i];\n            else if(operator[j] == \"*\")\n                result *= operand[i];\n            else if(operator[j] == \"/\")\n                result /= operand[i];\n            else if(operator[j] == \"**\")\n                result = pow(operand[i], result);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6hgr3s10.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x4291d5]\n??:? void tmp6hgr3s10.__unittest_L50_C1() [0x4281a7]\n??:? void tmp6hgr3s10.__modtest() [0x428440]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a95d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f05]\n??:? runModuleUnitTests [0x42db01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429698]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9yk0wa9m.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmp9yk0wa9m.__unittest_L49_C1() [0x4281e3]\n??:? void tmp9yk0wa9m.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptow7u7nz.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmptow7u7nz.__unittest_L53_C1() [0x4281af]\n??:? void tmptow7u7nz.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpit_z9gx0.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpit_z9gx0.__unittest_L53_C1() [0x4281af]\n??:? void tmpit_z9gx0.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpgbgqgx52.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbgqgx52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9yk0wa9m.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmp9yk0wa9m.__unittest_L49_C1() [0x4281e3]\n??:? void tmp9yk0wa9m.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmph1_5o6cp.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1_5o6cp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], result);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqaorz6a3.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291d5]\n??:? void tmpqaorz6a3.__unittest_L49_C1() [0x4281a7]\n??:? void tmpqaorz6a3.__modtest() [0x428440]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a95d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f05]\n??:? runModuleUnitTests [0x42db01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429698]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr7pig51n.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpr7pig51n.__unittest_L49_C1() [0x4281af]\n??:? void tmpr7pig51n.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr7pig51n.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpr7pig51n.__unittest_L49_C1() [0x4281af]\n??:? void tmpr7pig51n.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpit_z9gx0.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpit_z9gx0.__unittest_L53_C1() [0x4281af]\n??:? void tmpit_z9gx0.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx8o_17_m.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291e5]\n??:? void tmpx8o_17_m.__unittest_L53_C1() [0x4281b3]\n??:? void tmpx8o_17_m.__modtest() [0x42844c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a96d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f15]\n??:? runModuleUnitTests [0x42db11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmph1_5o6cp.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1_5o6cp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq5m_ieak.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291e5]\n??:? void tmpq5m_ieak.__unittest_L49_C1() [0x4281b3]\n??:? void tmpq5m_ieak.__modtest() [0x42844c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a96d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f15]\n??:? runModuleUnitTests [0x42db11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppq8a3pa1.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42920d]\n??:? void tmppq8a3pa1.__unittest_L49_C1() [0x4281db]\n??:? void tmppq8a3pa1.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a995]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f3d]\n??:? runModuleUnitTests [0x42db39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpelxjonu6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42920d]\n??:? void tmpelxjonu6.__unittest_L53_C1() [0x4281db]\n??:? void tmpelxjonu6.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a995]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f3d]\n??:? runModuleUnitTests [0x42db39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i + 1]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4mwpz8nt.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429205]\n??:? void tmp4mwpz8nt.__unittest_L49_C1() [0x4281d3]\n??:? void tmp4mwpz8nt.__modtest() [0x42846c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f5e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a98d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f35]\n??:? runModuleUnitTests [0x42db31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy38qijwu.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmpy38qijwu.__unittest_L49_C1() [0x4281e3]\n??:? void tmpy38qijwu.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpelxjonu6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42920d]\n??:? void tmpelxjonu6.__unittest_L53_C1() [0x4281db]\n??:? void tmpelxjonu6.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a995]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f3d]\n??:? runModuleUnitTests [0x42db39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\")\n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\")\n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\")\n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\")\n            {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpw4414ws6.d(54): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4414ws6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmph1_5o6cp.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1_5o6cp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\")\n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\")\n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\")\n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\")\n            {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpw4414ws6.d(54): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4414ws6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbzilwy3k.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42920d]\n??:? void tmpbzilwy3k.__unittest_L49_C1() [0x4281db]\n??:? void tmpbzilwy3k.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a995]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f3d]\n??:? runModuleUnitTests [0x42db39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy38qijwu.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmpy38qijwu.__unittest_L49_C1() [0x4281e3]\n??:? void tmpy38qijwu.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpgbgqgx52.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbgqgx52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmph1_5o6cp.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1_5o6cp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpcbuyn2as.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbuyn2as.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i];\n        } else if (operator[i] == \"/\") {\n            result /= operand[i];\n        } else if (operator[i] == \"**\") {\n            result = math.pow(result, operand[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp7_alqxu1.d(42): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_alqxu1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr7pig51n.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpr7pig51n.__unittest_L49_C1() [0x4281af]\n??:? void tmpr7pig51n.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq5m_ieak.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291e5]\n??:? void tmpq5m_ieak.__unittest_L49_C1() [0x4281b3]\n??:? void tmpq5m_ieak.__modtest() [0x42844c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a96d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f15]\n??:? runModuleUnitTests [0x42db11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) \n    {\n        for(int j = 0; j < operator.length; j++) \n        {\n            if(operator[j] == \"+\") \n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") \n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") \n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") \n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") \n            {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpf2se13qn.d(54): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2se13qn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            } else if(operator[j] == \"-\") {\n                result -= operand[i];\n            } else if(operator[j] == \"*\") {\n                result *= operand[i];\n            } else if(operator[j] == \"/\") {\n                result /= operand[i];\n            } else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp2z724uli.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2z724uli.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\")\n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\")\n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\")\n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\")\n            {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpw4414ws6.d(54): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4414ws6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbzilwy3k.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42920d]\n??:? void tmpbzilwy3k.__unittest_L49_C1() [0x4281db]\n??:? void tmpbzilwy3k.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a995]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f3d]\n??:? runModuleUnitTests [0x42db39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbzilwy3k.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42920d]\n??:? void tmpbzilwy3k.__unittest_L49_C1() [0x4281db]\n??:? void tmpbzilwy3k.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a995]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f3d]\n??:? runModuleUnitTests [0x42db39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], result);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqaorz6a3.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291d5]\n??:? void tmpqaorz6a3.__unittest_L49_C1() [0x4281a7]\n??:? void tmpqaorz6a3.__modtest() [0x428440]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a95d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f05]\n??:? runModuleUnitTests [0x42db01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429698]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpw8glm83m.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8glm83m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmphuy4bfyi.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuy4bfyi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i + 1]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4mwpz8nt.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429205]\n??:? void tmp4mwpz8nt.__unittest_L49_C1() [0x4281d3]\n??:? void tmp4mwpz8nt.__modtest() [0x42846c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f5e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a98d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f35]\n??:? runModuleUnitTests [0x42db31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmph1_5o6cp.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1_5o6cp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnrkyqe0n.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmpnrkyqe0n.__unittest_L53_C1() [0x4281e3]\n??:? void tmpnrkyqe0n.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\")\n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\")\n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\")\n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\")\n            {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpw4414ws6.d(54): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4414ws6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            } else if(operator[j] == \"-\") {\n                result -= operand[i];\n            } else if(operator[j] == \"*\") {\n                result *= operand[i];\n            } else if(operator[j] == \"/\") {\n                result /= operand[i];\n            } else if(operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcrs74p77.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmpcrs74p77.__unittest_L49_C1() [0x4281e3]\n??:? void tmpcrs74p77.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmph1_5o6cp.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1_5o6cp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9yk0wa9m.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmp9yk0wa9m.__unittest_L49_C1() [0x4281e3]\n??:? void tmp9yk0wa9m.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmph1_5o6cp.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1_5o6cp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnrkyqe0n.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmpnrkyqe0n.__unittest_L53_C1() [0x4281e3]\n??:? void tmpnrkyqe0n.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjxenypk.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpyjxenypk.__unittest_L49_C1() [0x4281af]\n??:? void tmpyjxenypk.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpados5339.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpados5339.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"//\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr7pig51n.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x4291dd]\n??:? void tmpr7pig51n.__unittest_L49_C1() [0x4281af]\n??:? void tmpr7pig51n.__modtest() [0x428448]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f0d]\n??:? runModuleUnitTests [0x42db09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = pow(operand[i], operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpla2ggzr6.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x429215]\n??:? void tmpla2ggzr6.__unittest_L53_C1() [0x4281e3]\n??:? void tmpla2ggzr6.__modtest() [0x42847c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42aa11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aaa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a99d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f45]\n??:? runModuleUnitTests [0x42db41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            } else if (operator[j] == \"-\") {\n                result -= operand[i];\n            } else if (operator[j] == \"*\") {\n                result *= operand[i];\n            } else if (operator[j] == \"/\") {\n                result /= operand[i];\n            } else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmp8sr1ddrg.d(43): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sr1ddrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n    {\n        for(int j = 0; j < operator.length; j++)\n        {\n            if(operator[j] == \"+\")\n            {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\")\n            {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\")\n            {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\")\n            {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\")\n            {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpw4414ws6.d(54): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4414ws6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpcbuyn2as.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbuyn2as.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"/\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpsbs72740.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbs72740.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n        for (int j = 0; j < operator.length; j++) {\n            if (operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if (operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if (operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if (operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if (operator[j] == \"**\") {\n                result = pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj9fs5b6n.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x4291e5]\n??:? void tmpj9fs5b6n.__unittest_L53_C1() [0x4281b3]\n??:? void tmpj9fs5b6n.__modtest() [0x42844c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42dd3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428f3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a9e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42aa70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a96d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f15]\n??:? runModuleUnitTests [0x42db11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4296a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given two arrays operator, and operand. The first array has basic algebra operations, and \n    the second array is an array of integers. Use the two given arrays to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator array is equal to the length of operand array minus one.\n        Operand is an array of of non-negative integers.\n        Operator array has at least one operator, and operand array has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length - 1; i++) {\n        for(int j = 0; j < operator.length; j++) {\n            if(operator[j] == \"+\") {\n                result += operand[i];\n            }\n            else if(operator[j] == \"-\") {\n                result -= operand[i];\n            }\n            else if(operator[j] == \"*\") {\n                result *= operand[i];\n            }\n            else if(operator[j] == \"//\") {\n                result /= operand[i];\n            }\n            else if(operator[j] == \"**\") {\n                result = math.pow(result, operand[i]);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "/tmp/tmpw8glm83m.d(47): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8glm83m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}