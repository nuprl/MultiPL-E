{
  "name": "HumanEval_84_solve",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n",
  "tests": "unittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp55ewvzro.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55ewvzro.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result = (char)(N % 2 + '0') + result;\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpc8c9klwt.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8c9klwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp894hr60y.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp894hr60y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result = (char)(N % 2 + '0') + result;\n        N = N / 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpoti8ct1a.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoti8ct1a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if(N==0) return \"0\";\n    if(N==1) return \"1\";\n    string res = \"\";\n    while(N>0)\n    {\n        res = (char)(N%2+'0')+res;\n        N/=2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpmlz_w29z.d(28): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlz_w29z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    if (N == 1) return \"1\";\n    if (N == 2) return \"10\";\n    if (N == 3) return \"11\";\n    if (N == 4) return \"100\";\n    if (N == 5) return \"101\";\n    if (N == 6) return \"110\";\n    if (N == 7) return \"111\";\n    if (N == 8) return \"1000\";\n    if (N == 9) return \"1001\";\n    if (N == 10) return \"1010\";\n    if (N == 11) return \"1011\";\n    if (N == 12) return \"1100\";\n    if (N == 13) return \"1101\";\n    if (N == 14) return \"1110\";\n    if (N == 15) return \"1111\";\n    if (N == 16) return \"10000\";\n    if (N == 17) return \"10001\";\n    if (N == 18) return \"10010\";\n    if (N == 19) return \"10011\";\n    if (N == 20) return \"10100\";\n    if (N == 21) return \"10101\";\n    if (N == 22) return \"10110\";\n    if (N == 23) return \"10111\";\n    if (N == 24) return \"11000\";\n    if (N == 25) return \"11001\";\n    if (N == 26) return \"11010\";\n    if (N == 27) return \"11011\";\n    if (N == 28) return \"11100\";\n    if (N == 29) return \"11101\";\n    if (N == 30) return \"11110\";\n    if (N == 31) return \"11111\";\n    if (N == 32) return \"100000\";\n    if (N == 33) return \"100001\";\n    if (N == 34) return \"100010\";\n    if (N == 35) return \"100011\";\n    if (N == 36) return \"100100\";\n    if (N == 37) return \"100101\";\n    if (N == 38) return \"100110\";\n    if (N == 39) return \"100111\";\n    if (\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqe127cvm.d(64): Error: expression expected, not `unittest`\n/tmp/tmpqe127cvm.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqe127cvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result = (char)(N % 2 + '0') + result;\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpc8c9klwt.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8c9klwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string result = \"\";\n    while (N > 0) {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpy56ke8go.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy56ke8go.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N % 2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpcuunr8_b.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcuunr8_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string res = \"\";\n    while (N > 0) {\n        res += to_string(N % 2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpm84ppk1_.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm84ppk1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string ans = \"\";\n    while (N > 0) {\n        ans = ans + to_string(N % 2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp3v1yj1h7.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3v1yj1h7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp894hr60y.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp894hr60y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = (char)(N%2 + '0') + ans;\n        N = N/2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpwux_qx7g.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwux_qx7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if(N==0) return \"0\";\n    if(N==1) return \"1\";\n    string res = \"\";\n    while(N>0)\n    {\n        res = char(N%2+'0') + res;\n        N/=2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpb_8xg3l7.d(28): Error: incompatible types for `(cast(char)(N % 2L + 48L)) + (res)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_8xg3l7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result = (char)(N%2 + 48) + result;\n        N /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpzt_4cppp.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzt_4cppp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    if (N == 1) return \"1\";\n    if (N == 2) return \"10\";\n    if (N == 3) return \"11\";\n    if (N == 4) return \"100\";\n    if (N == 5) return \"101\";\n    if (N == 6) return \"110\";\n    if (N == 7) return \"111\";\n    if (N == 8) return \"1000\";\n    if (N == 9) return \"1001\";\n    if (N == 10) return \"1010\";\n    if (N == 11) return \"1011\";\n    if (N == 12) return \"1100\";\n    if (N == 13) return \"1101\";\n    if (N == 14) return \"1110\";\n    if (N == 15) return \"1111\";\n    if (N == 16) return \"10000\";\n    if (N == 17) return \"10001\";\n    if (N == 18) return \"10010\";\n    if (N == 19) return \"10011\";\n    if (N == 20) return \"10100\";\n    if (N == 21) return \"10101\";\n    if (N == 22) return \"10110\";\n    if (N == 23) return \"10111\";\n    if (N == 24) return \"11000\";\n    if (N == 25) return \"11001\";\n    if (N == 26) return \"11010\";\n    if (N == 27) return \"11011\";\n    if (N == 28) return \"11100\";\n    if (N == 29) return \"11101\";\n    if (N == 30) return \"11110\";\n    if (N == 31) return \"11111\";\n    if (N == 32) return \"100000\";\n    if (N == 33) return \"100001\";\n    if (N == 34) return \"100010\";\n    if (N == 35) return \"100011\";\n    if (N == 36) return \"100100\";\n    if (N == 37) return \"100101\";\n    if (N == 38) return \"100110\";\n    if (N == 39) return \"100111\";\n    if (\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqe127cvm.d(64): Error: expression expected, not `unittest`\n/tmp/tmpqe127cvm.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqe127cvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = (char)(N % 2 + '0') + ans;\n        N /= 2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp6e3mpk4q.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6e3mpk4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if(N == 0) return \"0\";\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp4gt2lygx.d(27): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gt2lygx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp55ewvzro.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55ewvzro.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp22tyuv20.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22tyuv20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result = (char)(N%2 + '0') + result;\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpvgznp52u.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgznp52u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result = (char)(N%2 + 48) + result;\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmps8qoxfh_.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8qoxfh_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result = (char)(N % 2 + '0') + result;\n        N /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp60ri3dv_.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60ri3dv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + '0') + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpoqcfk_kd.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoqcfk_kd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp22tyuv20.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22tyuv20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpgj5poejh.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgj5poejh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    if (N == 1) return \"1\";\n    if (N == 2) return \"10\";\n    if (N == 3) return \"11\";\n    if (N == 4) return \"100\";\n    if (N == 5) return \"101\";\n    if (N == 6) return \"110\";\n    if (N == 7) return \"111\";\n    if (N == 8) return \"1000\";\n    if (N == 9) return \"1001\";\n    if (N == 10) return \"1010\";\n    if (N == 11) return \"1011\";\n    if (N == 12) return \"1100\";\n    if (N == 13) return \"1101\";\n    if (N == 14) return \"1110\";\n    if (N == 15) return \"1111\";\n    if (N == 16) return \"10000\";\n    if (N == 17) return \"10001\";\n    if (N == 18) return \"10010\";\n    if (N == 19) return \"10011\";\n    if (N == 20) return \"10100\";\n    if (N == 21) return \"10101\";\n    if (N == 22) return \"10110\";\n    if (N == 23) return \"10111\";\n    if (N == 24) return \"11000\";\n    if (N == 25) return \"11001\";\n    if (N == 26) return \"11010\";\n    if (N == 27) return \"11011\";\n    if (N == 28) return \"11100\";\n    if (N == 29) return \"11101\";\n    if (N == 30) return \"11110\";\n    if (N == 31) return \"11111\";\n    if (N == 32) return \"100000\";\n    if (N == 33) return \"100001\";\n    if (N == 34) return \"100010\";\n    if (N == 35) return \"100011\";\n    if (N == 36) return \"100100\";\n    if (N == 37) return \"100101\";\n    if (N == 38) return \"100110\";\n    if (N == 39) return \"100111\";\n    if (\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqe127cvm.d(64): Error: expression expected, not `unittest`\n/tmp/tmpqe127cvm.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqe127cvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + '0') + res;\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpnhexzigl.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhexzigl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp894hr60y.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp894hr60y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if(N == 0) return \"0\";\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp89z_ovg3.d(27): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp89z_ovg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp894hr60y.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp894hr60y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if(N == 0) return \"0\";\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpuo0zbppn.d(27): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo0zbppn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N % 2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp9b1st33s.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9b1st33s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0) {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpnlf3qw3i.d(25): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnlf3qw3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    if (N == 1) return \"1\";\n    string res = \"\";\n    while (N > 0) {\n        res = (char)(N % 2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpjcqaucl6.d(27): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjcqaucl6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpknnsmfrp.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknnsmfrp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N < 10) return to_string(N);\n    string ans = \"\";\n    while (N > 0) {\n        ans = to_string(N%2) + ans;\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp2qt6kzs0.d(23): Error: undefined identifier `to_string`\n/tmp/tmp2qt6kzs0.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qt6kzs0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp894hr60y.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp894hr60y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    if (N == 1) return \"1\";\n    if (N == 2) return \"10\";\n    if (N == 3) return \"11\";\n    if (N == 4) return \"100\";\n    if (N == 5) return \"101\";\n    if (N == 6) return \"110\";\n    if (N == 7) return \"111\";\n    if (N == 8) return \"1000\";\n    if (N == 9) return \"1001\";\n    if (N == 10) return \"1010\";\n    if (N == 11) return \"1011\";\n    if (N == 12) return \"1100\";\n    if (N == 13) return \"1101\";\n    if (N == 14) return \"1110\";\n    if (N == 15) return \"1111\";\n    if (N == 16) return \"10000\";\n    if (N == 17) return \"10001\";\n    if (N == 18) return \"10010\";\n    if (N == 19) return \"10011\";\n    if (N == 20) return \"10100\";\n    if (N == 21) return \"10101\";\n    if (N == 22) return \"10110\";\n    if (N == 23) return \"10111\";\n    if (N == 24) return \"11000\";\n    if (N == 25) return \"11001\";\n    if (N == 26) return \"11010\";\n    if (N == 27) return \"11011\";\n    if (N == 28) return \"11100\";\n    if (N == 29) return \"11101\";\n    if (N == 30) return \"11110\";\n    if (N == 31) return \"11111\";\n    if (N == 32) return \"100000\";\n    if (N == 33) return \"100001\";\n    if (N == 34) return \"100010\";\n    if (N == 35) return \"100011\";\n    if (N == 36) return \"100100\";\n    if (N == 37) return \"100101\";\n    if (N == 38) return \"100110\";\n    if (N == 39) return \"100111\";\n    if (\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqe127cvm.d(64): Error: expression expected, not `unittest`\n/tmp/tmpqe127cvm.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqe127cvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    if (N == 1) return \"1\";\n    if (N == 2) return \"10\";\n    if (N == 3) return \"11\";\n    if (N == 4) return \"100\";\n    if (N == 5) return \"101\";\n    if (N == 6) return \"110\";\n    if (N == 7) return \"111\";\n    if (N == 8) return \"1000\";\n    if (N == 9) return \"1001\";\n    if (N == 10) return \"1010\";\n    if (N == 11) return \"1011\";\n    if (N == 12) return \"1100\";\n    if (N == 13) return \"1101\";\n    if (N == 14) return \"1110\";\n    if (N == 15) return \"1111\";\n    if (N == 16) return \"10000\";\n    if (N == 17) return \"10001\";\n    if (N == 18) return \"10010\";\n    if (N == 19) return \"10011\";\n    if (N == 20) return \"10100\";\n    if (N == 21) return \"10101\";\n    if (N == 22) return \"10110\";\n    if (N == 23) return \"10111\";\n    if (N == 24) return \"11000\";\n    if (N == 25) return \"11001\";\n    if (N == 26) return \"11010\";\n    if (N == 27) return \"11011\";\n    if (N == 28) return \"11100\";\n    if (N == 29) return \"11101\";\n    if (N == 30) return \"11110\";\n    if (N == 31) return \"11111\";\n    if (N == 32) return \"100000\";\n    if (N == 33) return \"100001\";\n    if (N == 34) return \"100010\";\n    if (N == 35) return \"100011\";\n    if (N == 36) return \"100100\";\n    if (N == 37) return \"100101\";\n    if (N == 38) return \"100110\";\n    if (N == 39) return \"100111\";\n    if (\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqe127cvm.d(64): Error: expression expected, not `unittest`\n/tmp/tmpqe127cvm.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqe127cvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp22tyuv20.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22tyuv20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    if (N == 1) return \"1\";\n    if (N == 2) return \"10\";\n    if (N == 3) return \"11\";\n    if (N == 4) return \"100\";\n    if (N == 5) return \"101\";\n    if (N == 6) return \"110\";\n    if (N == 7) return \"111\";\n    if (N == 8) return \"1000\";\n    if (N == 9) return \"1001\";\n    if (N == 10) return \"1010\";\n    if (N == 11) return \"1011\";\n    if (N == 12) return \"1100\";\n    if (N == 13) return \"1101\";\n    if (N == 14) return \"1110\";\n    if (N == 15) return \"1111\";\n    if (N == 16) return \"10000\";\n    if (N == 17) return \"10001\";\n    if (N == 18) return \"10010\";\n    if (N == 19) return \"10011\";\n    if (N == 20) return \"10100\";\n    if (N == 21) return \"10101\";\n    if (N == 22) return \"10110\";\n    if (N == 23) return \"10111\";\n    if (N == 24) return \"11000\";\n    if (N == 25) return \"11001\";\n    if (N == 26) return \"11010\";\n    if (N == 27) return \"11011\";\n    if (N == 28) return \"11100\";\n    if (N == 29) return \"11101\";\n    if (N == 30) return \"11110\";\n    if (N == 31) return \"11111\";\n    if (N == 32) return \"100000\";\n    if (N == 33) return \"100001\";\n    if (N == 34) return \"100010\";\n    if (N == 35) return \"100011\";\n    if (N == 36) return \"100100\";\n    if (N == 37) return \"100101\";\n    if (N == 38) return \"100110\";\n    if (N == 39) return \"100111\";\n    if (\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqe127cvm.d(64): Error: expression expected, not `unittest`\n/tmp/tmpqe127cvm.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqe127cvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N % 2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpcuunr8_b.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcuunr8_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string res = \"\";\n    while (N > 0) {\n        res = (char)(N % 2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbkujw_57.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkujw_57.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = (char)(N%2 + '0') + ans;\n        N /= 2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpchqw8sgp.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchqw8sgp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpgj5poejh.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgj5poejh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp894hr60y.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp894hr60y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N % 2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp9b1st33s.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9b1st33s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp7t7ezbne.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t7ezbne.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if(N==0) return \"0\";\n    string ans = \"\";\n    while(N>0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp5rchy2l1.d(27): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rchy2l1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp894hr60y.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp894hr60y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp7t7ezbne.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t7ezbne.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N % 2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpdq1190ei.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdq1190ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string res = \"\";\n    while (N > 0) {\n        res += to_string(N % 2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpm84ppk1_.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm84ppk1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = (char)(N%2 + '0') + ans;\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpvyqz5oot.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvyqz5oot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpgj5poejh.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgj5poejh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N < 0) return \"\";\n    string ans = \"\";\n    while (N > 0) {\n        ans += to_string(N % 2);\n        N /= 2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp9anxe4iz.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9anxe4iz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp7dixtz69.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dixtz69.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp7t7ezbne.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t7ezbne.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string res = \"\";\n    while (N > 0) {\n        res += to_string(N % 2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpm84ppk1_.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm84ppk1_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result = (char)(N % 2 + '0') + result;\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpc8c9klwt.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8c9klwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if(N == 0) return \"0\";\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp89z_ovg3.d(27): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp89z_ovg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N < 0)\n        return \"\";\n    if (N == 0)\n        return \"0\";\n    string result = \"\";\n    while (N > 0) {\n        result += to_string(N % 2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmphww_et9z.d(29): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphww_et9z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp22tyuv20.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22tyuv20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpknnsmfrp.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpknnsmfrp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string res = \"\";\n    while (N > 0) {\n        res += to_string(N % 2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp74d65tjd.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74d65tjd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = (char)(N%2 + '0') + ans;\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpvyqz5oot.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvyqz5oot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N % 2);\n        N /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpu51wjtak.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu51wjtak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N = N/2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp1lxhdt7w.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lxhdt7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + 48) + res;\n        N = N/2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp0flgxzem.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0flgxzem.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string ans = \"\";\n    while (N > 0) {\n        ans += to_string(N % 2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp6rtwe2_3.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rtwe2_3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N % 2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp9b1st33s.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9b1st33s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string ans = \"\";\n    while (N > 0) {\n        ans += to_string(N % 2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp6rtwe2_3.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rtwe2_3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string result = \"\";\n    while (N > 0) {\n        result += to_string(N % 2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp_br5i75p.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_br5i75p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    if (N == 0) return \"0\";\n    string res = \"\";\n    while (N > 0) {\n        res = (char)(N % 2 + 48) + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbkujw_57.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkujw_57.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpof8axc_c.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpof8axc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans = ans + to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp55ewvzro.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55ewvzro.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N%2 + 48) + res;\n        N = N/2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmp0flgxzem.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0flgxzem.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string result = \"\";\n    while(N > 0)\n    {\n        result += to_string(N%2);\n        N /= 2;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpqjj62pft.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjj62pft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string ans = \"\";\n    while(N > 0)\n    {\n        ans += to_string(N%2);\n        N /= 2;\n    }\n    return ans;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpud9mbp2f.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpud9mbp2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res = (char)(N % 2 + '0') + res;\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmplopwbaoy.d(26): Error: C style cast illegal, use `cast(char)(N % 2 + '0')`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplopwbaoy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000L)\n    \"1\"\n    >>> solve(150L)\n    \"110\"\n    >>> solve(147L)\n    \"1100\"\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\nstring solve(long N) \n{\n    string res = \"\";\n    while(N > 0)\n    {\n        res += to_string(N%2);\n        N /= 2;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpbupnrv40.d(26): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbupnrv40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}