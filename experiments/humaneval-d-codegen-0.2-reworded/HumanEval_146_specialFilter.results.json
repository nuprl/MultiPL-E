{
  "name": "HumanEval_146_specialFilter",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n",
  "tests": "unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpbem1g0t8.d(17): Error: semicolon expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: expression expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbem1g0t8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx2ls9um2.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4282ed]\n??:? void tmpx2ls9um2.__unittest_L24_C1() [0x427eaa]\n??:? void tmpx2ls9um2.__modtest() [0x428070]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && (n % 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpfi71clsg.d(17): Error: semicolon expected, not `:`\n/tmp/tmpfi71clsg.d(17): Error: expression expected, not `:`\n/tmp/tmpfi71clsg.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfi71clsg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i: nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp3__oco2x.d(17): Error: semicolon expected, not `:`\n/tmp/tmp3__oco2x.d(17): Error: expression expected, not `:`\n/tmp/tmp3__oco2x.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3__oco2x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4ktme5d0.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4ktme5d0.d(17): Error: expression expected, not `:`\n/tmp/tmp4ktme5d0.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ktme5d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num / 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp7v5r5h13.d(17): Error: semicolon expected, not `:`\n/tmp/tmp7v5r5h13.d(17): Error: expression expected, not `:`\n/tmp/tmp7v5r5h13.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7v5r5h13.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i : nums) {\n        if (i > 10 && i % 2 == 1 && i % 10 == 5) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp2v3zucix.d(17): Error: semicolon expected, not `:`\n/tmp/tmp2v3zucix.d(17): Error: expression expected, not `:`\n/tmp/tmp2v3zucix.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2v3zucix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp25glugii.d(17): Error: semicolon expected, not `:`\n/tmp/tmp25glugii.d(17): Error: expression expected, not `:`\n/tmp/tmp25glugii.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25glugii.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 100) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpy017gs2r.d(17): Error: semicolon expected, not `:`\n/tmp/tmpy017gs2r.d(17): Error: expression expected, not `:`\n/tmp/tmpy017gs2r.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy017gs2r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmplzu19oyd.d(17): Error: semicolon expected, not `:`\n/tmp/tmplzu19oyd.d(17): Error: expression expected, not `:`\n/tmp/tmplzu19oyd.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzu19oyd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4ktme5d0.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4ktme5d0.d(17): Error: expression expected, not `:`\n/tmp/tmp4ktme5d0.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ktme5d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3 || i % 2 == 1 && i % 10 == 5 || i % 2 == 1 && i % 10 == 7 || i % 2 == 1 && i % 10 == 9)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvpwclmbl.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvpwclmbl.d(17): Error: expression expected, not `:`\n/tmp/tmpvpwclmbl.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvpwclmbl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmppevadnps.d(17): Error: semicolon expected, not `:`\n/tmp/tmppevadnps.d(17): Error: expression expected, not `:`\n/tmp/tmppevadnps.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppevadnps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i : nums) {\n        if (i > 10 && i % 2 == 1 && i % 10 == 5) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp2v3zucix.d(17): Error: semicolon expected, not `:`\n/tmp/tmp2v3zucix.d(17): Error: expression expected, not `:`\n/tmp/tmp2v3zucix.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2v3zucix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpt16xksz4.d(17): Error: semicolon expected, not `:`\n/tmp/tmpt16xksz4.d(17): Error: expression expected, not `:`\n/tmp/tmpt16xksz4.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt16xksz4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpn0pj69km.d(17): Error: semicolon expected, not `:`\n/tmp/tmpn0pj69km.d(17): Error: expression expected, not `:`\n/tmp/tmpn0pj69km.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0pj69km.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpcst6dg8v.d(17): Error: semicolon expected, not `:`\n/tmp/tmpcst6dg8v.d(17): Error: expression expected, not `:`\n/tmp/tmpcst6dg8v.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcst6dg8v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num / 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp7v5r5h13.d(17): Error: semicolon expected, not `:`\n/tmp/tmp7v5r5h13.d(17): Error: expression expected, not `:`\n/tmp/tmp7v5r5h13.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7v5r5h13.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp25glugii.d(17): Error: semicolon expected, not `:`\n/tmp/tmp25glugii.d(17): Error: expression expected, not `:`\n/tmp/tmp25glugii.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25glugii.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && ((n % 10) % 2 == 1) && ((n % 10) % 2 == 1))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpi77ipzd8.d(17): Error: semicolon expected, not `:`\n/tmp/tmpi77ipzd8.d(17): Error: expression expected, not `:`\n/tmp/tmpi77ipzd8.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi77ipzd8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && (num % 2 == 1 && num % 10 == 1 || num % 2 == 1 && num % 10 == 3 || num % 2 == 1 && num % 10 == 5 || num % 2 == 1 && num % 10 == 7 || num % 2 == 1 && num % 10 == 9))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpmrh0witl.d(17): Error: semicolon expected, not `:`\n/tmp/tmpmrh0witl.d(17): Error: expression expected, not `:`\n/tmp/tmpmrh0witl.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrh0witl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpaxc3bkmu.d(17): Error: semicolon expected, not `:`\n/tmp/tmpaxc3bkmu.d(17): Error: expression expected, not `:`\n/tmp/tmpaxc3bkmu.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxc3bkmu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx2ls9um2.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4282ed]\n??:? void tmpx2ls9um2.__unittest_L24_C1() [0x427eaa]\n??:? void tmpx2ls9um2.__modtest() [0x428070]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n: nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpco9p0s8q.d(17): Error: semicolon expected, not `:`\n/tmp/tmpco9p0s8q.d(17): Error: expression expected, not `:`\n/tmp/tmpco9p0s8q.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpco9p0s8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpt16xksz4.d(17): Error: semicolon expected, not `:`\n/tmp/tmpt16xksz4.d(17): Error: expression expected, not `:`\n/tmp/tmpt16xksz4.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt16xksz4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4ktme5d0.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4ktme5d0.d(17): Error: expression expected, not `:`\n/tmp/tmp4ktme5d0.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ktme5d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num % 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4_gh_vu2.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4_gh_vu2.d(17): Error: expression expected, not `:`\n/tmp/tmp4_gh_vu2.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_gh_vu2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp25glugii.d(17): Error: semicolon expected, not `:`\n/tmp/tmp25glugii.d(17): Error: expression expected, not `:`\n/tmp/tmp25glugii.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25glugii.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpbem1g0t8.d(17): Error: semicolon expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: expression expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbem1g0t8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvp5r2no5.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: expression expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp5r2no5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums)\n    {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpsrxi6mn9.d(17): Error: semicolon expected, not `:`\n/tmp/tmpsrxi6mn9.d(17): Error: expression expected, not `:`\n/tmp/tmpsrxi6mn9.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsrxi6mn9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3 || i % 2 == 1 && i % 10 == 5 || i % 2 == 1 && i % 10 == 7 || i % 2 == 1 && i % 10 == 9)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvpwclmbl.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvpwclmbl.d(17): Error: expression expected, not `:`\n/tmp/tmpvpwclmbl.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvpwclmbl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj6h47_ti.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj6h47_ti.d(17): Error: expression expected, not `:`\n/tmp/tmpj6h47_ti.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6h47_ti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i : nums)\n        if (i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp6f70__or.d(17): Error: semicolon expected, not `:`\n/tmp/tmp6f70__or.d(17): Error: expression expected, not `:`\n/tmp/tmp6f70__or.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6f70__or.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (int i = 0; i < nums.length; i++) {\n        if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1mrt8g1t.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4282ed]\n??:? void tmp1mrt8g1t.__unittest_L24_C1() [0x427eaa]\n??:? void tmp1mrt8g1t.__modtest() [0x428070]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c34b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430371]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430820]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]\n??:? runModuleUnitTests [0x42c121]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 100) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpkygnr20a.d(17): Error: semicolon expected, not `:`\n/tmp/tmpkygnr20a.d(17): Error: expression expected, not `:`\n/tmp/tmpkygnr20a.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkygnr20a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp1lt4u35d.d(17): Error: semicolon expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: expression expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lt4u35d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && (num % 2 == 1) && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp7q0l4w3x.d(17): Error: semicolon expected, not `:`\n/tmp/tmp7q0l4w3x.d(17): Error: expression expected, not `:`\n/tmp/tmp7q0l4w3x.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7q0l4w3x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvp5r2no5.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: expression expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp5r2no5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp8645s713.d(17): Error: semicolon expected, not `:`\n/tmp/tmp8645s713.d(17): Error: expression expected, not `:`\n/tmp/tmp8645s713.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8645s713.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp7v8xwlsa.d(17): Error: semicolon expected, not `:`\n/tmp/tmp7v8xwlsa.d(17): Error: expression expected, not `:`\n/tmp/tmp7v8xwlsa.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7v8xwlsa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpbem1g0t8.d(17): Error: semicolon expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: expression expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbem1g0t8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4s2x918o.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4s2x918o.d(17): Error: expression expected, not `:`\n/tmp/tmp4s2x918o.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4s2x918o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmptjfzqp89.d(17): Error: semicolon expected, not `:`\n/tmp/tmptjfzqp89.d(17): Error: expression expected, not `:`\n/tmp/tmptjfzqp89.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjfzqp89.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp25glugii.d(17): Error: semicolon expected, not `:`\n/tmp/tmp25glugii.d(17): Error: expression expected, not `:`\n/tmp/tmp25glugii.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25glugii.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i = 0; i < nums.length; i++) {\n        if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] % 100) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjrtw0m20.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4282e5]\n??:? void tmpjrtw0m20.__unittest_L24_C1() [0x427ea2]\n??:? void tmpjrtw0m20.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c343]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430369]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430818]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1ad]\n??:? runModuleUnitTests [0x42c119]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num % 100)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpesc5zcfr.d(17): Error: semicolon expected, not `:`\n/tmp/tmpesc5zcfr.d(17): Error: expression expected, not `:`\n/tmp/tmpesc5zcfr.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpesc5zcfr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpo056af0z.d(17): Error: semicolon expected, not `:`\n/tmp/tmpo056af0z.d(17): Error: expression expected, not `:`\n/tmp/tmpo056af0z.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo056af0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj6h47_ti.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj6h47_ti.d(17): Error: expression expected, not `:`\n/tmp/tmpj6h47_ti.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6h47_ti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpz7j90opf.d(17): Error: semicolon expected, not `:`\n/tmp/tmpz7j90opf.d(17): Error: expression expected, not `:`\n/tmp/tmpz7j90opf.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7j90opf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpz7j90opf.d(17): Error: semicolon expected, not `:`\n/tmp/tmpz7j90opf.d(17): Error: expression expected, not `:`\n/tmp/tmpz7j90opf.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7j90opf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj6h47_ti.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj6h47_ti.d(17): Error: expression expected, not `:`\n/tmp/tmpj6h47_ti.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6h47_ti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpz7j90opf.d(17): Error: semicolon expected, not `:`\n/tmp/tmpz7j90opf.d(17): Error: expression expected, not `:`\n/tmp/tmpz7j90opf.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7j90opf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && n % 2 == 1 && n % 10 == 5)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4nxji_hd.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4nxji_hd.d(17): Error: expression expected, not `:`\n/tmp/tmp4nxji_hd.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nxji_hd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpzftesa0u.d(17): Error: semicolon expected, not `:`\n/tmp/tmpzftesa0u.d(17): Error: expression expected, not `:`\n/tmp/tmpzftesa0u.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzftesa0u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpo056af0z.d(17): Error: semicolon expected, not `:`\n/tmp/tmpo056af0z.d(17): Error: expression expected, not `:`\n/tmp/tmpo056af0z.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo056af0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && (num % 2 == 1 && num % 10 == 1 || num % 2 == 1 && num % 10 == 3 || num % 2 == 1 && num % 10 == 5 || num % 2 == 1 && num % 10 == 7 || num % 2 == 1 && num % 10 == 9))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvy2d5s4f.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvy2d5s4f.d(17): Error: expression expected, not `:`\n/tmp/tmpvy2d5s4f.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvy2d5s4f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp7v8xwlsa.d(17): Error: semicolon expected, not `:`\n/tmp/tmp7v8xwlsa.d(17): Error: expression expected, not `:`\n/tmp/tmp7v8xwlsa.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7v8xwlsa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && (i % 2 == 1) && (i % 10 == 1))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpgacpzm_i.d(17): Error: semicolon expected, not `:`\n/tmp/tmpgacpzm_i.d(17): Error: expression expected, not `:`\n/tmp/tmpgacpzm_i.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgacpzm_i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums)\n    {\n        if (num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpkafyr_44.d(17): Error: semicolon expected, not `:`\n/tmp/tmpkafyr_44.d(17): Error: expression expected, not `:`\n/tmp/tmpkafyr_44.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkafyr_44.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3 || i % 2 == 1 && i % 10 == 5 || i % 2 == 1 && i % 10 == 7 || i % 2 == 1 && i % 10 == 9)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvpwclmbl.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvpwclmbl.d(17): Error: expression expected, not `:`\n/tmp/tmpvpwclmbl.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvpwclmbl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpzftesa0u.d(17): Error: semicolon expected, not `:`\n/tmp/tmpzftesa0u.d(17): Error: expression expected, not `:`\n/tmp/tmpzftesa0u.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzftesa0u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i : nums) {\n        if (i > 10 && i % 2 == 1 && i % 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpd51s1pb1.d(17): Error: semicolon expected, not `:`\n/tmp/tmpd51s1pb1.d(17): Error: expression expected, not `:`\n/tmp/tmpd51s1pb1.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd51s1pb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpcst6dg8v.d(17): Error: semicolon expected, not `:`\n/tmp/tmpcst6dg8v.d(17): Error: expression expected, not `:`\n/tmp/tmpcst6dg8v.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcst6dg8v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n: nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpco9p0s8q.d(17): Error: semicolon expected, not `:`\n/tmp/tmpco9p0s8q.d(17): Error: expression expected, not `:`\n/tmp/tmpco9p0s8q.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpco9p0s8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvp5r2no5.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: expression expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp5r2no5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums)\n    {\n        if (num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpuqo7ifa_.d(17): Error: semicolon expected, not `:`\n/tmp/tmpuqo7ifa_.d(17): Error: expression expected, not `:`\n/tmp/tmpuqo7ifa_.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqo7ifa_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpaxc3bkmu.d(17): Error: semicolon expected, not `:`\n/tmp/tmpaxc3bkmu.d(17): Error: expression expected, not `:`\n/tmp/tmpaxc3bkmu.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxc3bkmu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num % 100)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp0pfluor0.d(17): Error: semicolon expected, not `:`\n/tmp/tmp0pfluor0.d(17): Error: expression expected, not `:`\n/tmp/tmp0pfluor0.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pfluor0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && ((n % 10) % 2 == 1) && ((n % 10) % 2 == 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpb1sdv2a1.d(17): Error: semicolon expected, not `:`\n/tmp/tmpb1sdv2a1.d(17): Error: expression expected, not `:`\n/tmp/tmpb1sdv2a1.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb1sdv2a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpzftesa0u.d(17): Error: semicolon expected, not `:`\n/tmp/tmpzftesa0u.d(17): Error: expression expected, not `:`\n/tmp/tmpzftesa0u.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzftesa0u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num % 100) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4zl19fdq.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4zl19fdq.d(17): Error: expression expected, not `:`\n/tmp/tmp4zl19fdq.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zl19fdq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvp5r2no5.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: expression expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp5r2no5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmplj2ignse.d(17): Error: semicolon expected, not `:`\n/tmp/tmplj2ignse.d(17): Error: expression expected, not `:`\n/tmp/tmplj2ignse.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplj2ignse.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3 || i % 2 == 1 && i % 10 == 5 || i % 2 == 1 && i % 10 == 7 || i % 2 == 1 && i % 10 == 9)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp350w0fvv.d(17): Error: semicolon expected, not `:`\n/tmp/tmp350w0fvv.d(17): Error: expression expected, not `:`\n/tmp/tmp350w0fvv.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp350w0fvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i: nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp3__oco2x.d(17): Error: semicolon expected, not `:`\n/tmp/tmp3__oco2x.d(17): Error: expression expected, not `:`\n/tmp/tmp3__oco2x.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3__oco2x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num % 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpyr_ghkkl.d(17): Error: semicolon expected, not `:`\n/tmp/tmpyr_ghkkl.d(17): Error: expression expected, not `:`\n/tmp/tmpyr_ghkkl.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyr_ghkkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpfamgodnn.d(17): Error: semicolon expected, not `:`\n/tmp/tmpfamgodnn.d(17): Error: expression expected, not `:`\n/tmp/tmpfamgodnn.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfamgodnn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && (num % 2 == 1 && num % 10 == 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpdbpkj48e.d(17): Error: semicolon expected, not `:`\n/tmp/tmpdbpkj48e.d(17): Error: expression expected, not `:`\n/tmp/tmpdbpkj48e.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbpkj48e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && (i % 2 == 1) && (i % 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvgu5udd7.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvgu5udd7.d(17): Error: expression expected, not `:`\n/tmp/tmpvgu5udd7.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgu5udd7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpcst6dg8v.d(17): Error: semicolon expected, not `:`\n/tmp/tmpcst6dg8v.d(17): Error: expression expected, not `:`\n/tmp/tmpcst6dg8v.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcst6dg8v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && (num % 2 == 1 && num % 10 == 1 || num % 2 == 1 && num % 10 == 3 || num % 2 == 1 && num % 10 == 5 || num % 2 == 1 && num % 10 == 7 || num % 2 == 1 && num % 10 == 9))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpwke33x8x.d(17): Error: semicolon expected, not `:`\n/tmp/tmpwke33x8x.d(17): Error: expression expected, not `:`\n/tmp/tmpwke33x8x.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwke33x8x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvp5r2no5.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: expression expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp5r2no5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i : nums) {\n        if (i > 10 && i % 2 == 1 && i % 10 == 3) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpkzi7kmcw.d(17): Error: semicolon expected, not `:`\n/tmp/tmpkzi7kmcw.d(17): Error: expression expected, not `:`\n/tmp/tmpkzi7kmcw.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzi7kmcw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && (i % 2 == 1) && (i % 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmphe4iwc8k.d(17): Error: semicolon expected, not `:`\n/tmp/tmphe4iwc8k.d(17): Error: expression expected, not `:`\n/tmp/tmphe4iwc8k.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphe4iwc8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums)\n    {\n        if (num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpkafyr_44.d(17): Error: semicolon expected, not `:`\n/tmp/tmpkafyr_44.d(17): Error: expression expected, not `:`\n/tmp/tmpkafyr_44.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkafyr_44.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && n % 2 == 1 && n % 10 == 3 || n % 2 == 1 && n % 10 == 5 || n % 2 == 1 && n % 10 == 7 || n % 2 == 1 && n % 10 == 9)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpeghe0zoh.d(17): Error: semicolon expected, not `:`\n/tmp/tmpeghe0zoh.d(17): Error: expression expected, not `:`\n/tmp/tmpeghe0zoh.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeghe0zoh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpo056af0z.d(17): Error: semicolon expected, not `:`\n/tmp/tmpo056af0z.d(17): Error: expression expected, not `:`\n/tmp/tmpo056af0z.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo056af0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmplj2ignse.d(17): Error: semicolon expected, not `:`\n/tmp/tmplj2ignse.d(17): Error: expression expected, not `:`\n/tmp/tmplj2ignse.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplj2ignse.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i : nums) {\n        if (i > 10 && i % 2 == 1 && i % 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp9ololpy0.d(17): Error: semicolon expected, not `:`\n/tmp/tmp9ololpy0.d(17): Error: expression expected, not `:`\n/tmp/tmp9ololpy0.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ololpy0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums)\n    {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 100) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpoih024no.d(17): Error: semicolon expected, not `:`\n/tmp/tmpoih024no.d(17): Error: expression expected, not `:`\n/tmp/tmpoih024no.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoih024no.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmponikyq07.d(17): Error: semicolon expected, not `:`\n/tmp/tmponikyq07.d(17): Error: expression expected, not `:`\n/tmp/tmponikyq07.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponikyq07.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpbem1g0t8.d(17): Error: semicolon expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: expression expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbem1g0t8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num % 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp507ng5q4.d(17): Error: semicolon expected, not `:`\n/tmp/tmp507ng5q4.d(17): Error: expression expected, not `:`\n/tmp/tmp507ng5q4.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp507ng5q4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmplj2ignse.d(17): Error: semicolon expected, not `:`\n/tmp/tmplj2ignse.d(17): Error: expression expected, not `:`\n/tmp/tmplj2ignse.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplj2ignse.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpn0pj69km.d(17): Error: semicolon expected, not `:`\n/tmp/tmpn0pj69km.d(17): Error: expression expected, not `:`\n/tmp/tmpn0pj69km.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0pj69km.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 100) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp0mm2tb_t.d(17): Error: semicolon expected, not `:`\n/tmp/tmp0mm2tb_t.d(17): Error: expression expected, not `:`\n/tmp/tmp0mm2tb_t.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mm2tb_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i : nums) {\n        if (i > 10 && i % 2 == 1 && i % 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpd51s1pb1.d(17): Error: semicolon expected, not `:`\n/tmp/tmpd51s1pb1.d(17): Error: expression expected, not `:`\n/tmp/tmpd51s1pb1.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd51s1pb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i : nums) {\n        if (i > 10 && i % 2 == 1 && i % 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp9ololpy0.d(17): Error: semicolon expected, not `:`\n/tmp/tmp9ololpy0.d(17): Error: expression expected, not `:`\n/tmp/tmp9ololpy0.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ololpy0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums)\n    {\n        if (n > 10 && n % 2 == 1 && n % 10 == 5)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpql9in5zn.d(17): Error: semicolon expected, not `:`\n/tmp/tmpql9in5zn.d(17): Error: expression expected, not `:`\n/tmp/tmpql9in5zn.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpql9in5zn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums)\n    {\n        if (num > 10 && num % 2 == 1 && num % 10 == num % 100)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmplm3ajjh5.d(17): Error: semicolon expected, not `:`\n/tmp/tmplm3ajjh5.d(17): Error: expression expected, not `:`\n/tmp/tmplm3ajjh5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplm3ajjh5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (int i = 0; i < nums.length; i++) {\n        if (nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == nums[i] / 10) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293469,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9emn6fqf.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4282e5]\n??:? void tmp9emn6fqf.__unittest_L24_C1() [0x427ea2]\n??:? void tmp9emn6fqf.__modtest() [0x428068]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c343]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430369]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430818]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1ad]\n??:? runModuleUnitTests [0x42c119]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num % 100)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpt5mv9egp.d(17): Error: semicolon expected, not `:`\n/tmp/tmpt5mv9egp.d(17): Error: expression expected, not `:`\n/tmp/tmpt5mv9egp.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5mv9egp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i: nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpr7rbniho.d(17): Error: semicolon expected, not `:`\n/tmp/tmpr7rbniho.d(17): Error: expression expected, not `:`\n/tmp/tmpr7rbniho.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7rbniho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmprp1zafam.d(17): Error: semicolon expected, not `:`\n/tmp/tmprp1zafam.d(17): Error: expression expected, not `:`\n/tmp/tmprp1zafam.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprp1zafam.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp1lt4u35d.d(17): Error: semicolon expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: expression expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lt4u35d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpn0pj69km.d(17): Error: semicolon expected, not `:`\n/tmp/tmpn0pj69km.d(17): Error: expression expected, not `:`\n/tmp/tmpn0pj69km.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn0pj69km.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpz7j90opf.d(17): Error: semicolon expected, not `:`\n/tmp/tmpz7j90opf.d(17): Error: expression expected, not `:`\n/tmp/tmpz7j90opf.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7j90opf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num % 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmphn52ngg5.d(17): Error: semicolon expected, not `:`\n/tmp/tmphn52ngg5.d(17): Error: expression expected, not `:`\n/tmp/tmphn52ngg5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphn52ngg5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp1lt4u35d.d(17): Error: semicolon expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: expression expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lt4u35d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmponikyq07.d(17): Error: semicolon expected, not `:`\n/tmp/tmponikyq07.d(17): Error: expression expected, not `:`\n/tmp/tmponikyq07.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponikyq07.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp25glugii.d(17): Error: semicolon expected, not `:`\n/tmp/tmp25glugii.d(17): Error: expression expected, not `:`\n/tmp/tmp25glugii.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25glugii.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvp5r2no5.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: expression expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp5r2no5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmplzu19oyd.d(17): Error: semicolon expected, not `:`\n/tmp/tmplzu19oyd.d(17): Error: expression expected, not `:`\n/tmp/tmplzu19oyd.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzu19oyd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums) {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4ktme5d0.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4ktme5d0.d(17): Error: expression expected, not `:`\n/tmp/tmp4ktme5d0.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ktme5d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num % 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpyr_ghkkl.d(17): Error: semicolon expected, not `:`\n/tmp/tmpyr_ghkkl.d(17): Error: expression expected, not `:`\n/tmp/tmpyr_ghkkl.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyr_ghkkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpj91x_4ji.d(17): Error: semicolon expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: expression expected, not `:`\n/tmp/tmpj91x_4ji.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj91x_4ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i: nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp6m_qtw42.d(17): Error: semicolon expected, not `:`\n/tmp/tmp6m_qtw42.d(17): Error: expression expected, not `:`\n/tmp/tmp6m_qtw42.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6m_qtw42.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i: nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp3__oco2x.d(17): Error: semicolon expected, not `:`\n/tmp/tmp3__oco2x.d(17): Error: expression expected, not `:`\n/tmp/tmp3__oco2x.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3__oco2x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num % 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp507ng5q4.d(17): Error: semicolon expected, not `:`\n/tmp/tmp507ng5q4.d(17): Error: expression expected, not `:`\n/tmp/tmp507ng5q4.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp507ng5q4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp1lt4u35d.d(17): Error: semicolon expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: expression expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lt4u35d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i : nums) {\n        if (i > 10 && i % 2 == 1 && i % 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpd51s1pb1.d(17): Error: semicolon expected, not `:`\n/tmp/tmpd51s1pb1.d(17): Error: expression expected, not `:`\n/tmp/tmpd51s1pb1.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd51s1pb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num / 10)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpc8sc1oif.d(17): Error: semicolon expected, not `:`\n/tmp/tmpc8sc1oif.d(17): Error: expression expected, not `:`\n/tmp/tmpc8sc1oif.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8sc1oif.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && (i % 2 == 1) && (i % 10 == 1 || i % 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvyl31o9y.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvyl31o9y.d(17): Error: expression expected, not `:`\n/tmp/tmpvyl31o9y.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvyl31o9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long i : nums) {\n        if (i > 10 && i % 2 == 1 && i % 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpd51s1pb1.d(17): Error: semicolon expected, not `:`\n/tmp/tmpd51s1pb1.d(17): Error: expression expected, not `:`\n/tmp/tmpd51s1pb1.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd51s1pb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4s2x918o.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4s2x918o.d(17): Error: expression expected, not `:`\n/tmp/tmp4s2x918o.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4s2x918o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums)\n    {\n        if (n > 10 && ((n % 10) % 2) == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpgymg57xy.d(17): Error: semicolon expected, not `:`\n/tmp/tmpgymg57xy.d(17): Error: expression expected, not `:`\n/tmp/tmpgymg57xy.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgymg57xy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num % 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmphn52ngg5.d(17): Error: semicolon expected, not `:`\n/tmp/tmphn52ngg5.d(17): Error: expression expected, not `:`\n/tmp/tmphn52ngg5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphn52ngg5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpwhm8xy1m.d(17): Error: semicolon expected, not `:`\n/tmp/tmpwhm8xy1m.d(17): Error: expression expected, not `:`\n/tmp/tmpwhm8xy1m.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhm8xy1m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpkfscsakd.d(17): Error: semicolon expected, not `:`\n/tmp/tmpkfscsakd.d(17): Error: expression expected, not `:`\n/tmp/tmpkfscsakd.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkfscsakd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmppevadnps.d(17): Error: semicolon expected, not `:`\n/tmp/tmppevadnps.d(17): Error: expression expected, not `:`\n/tmp/tmppevadnps.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppevadnps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp7v8xwlsa.d(17): Error: semicolon expected, not `:`\n/tmp/tmp7v8xwlsa.d(17): Error: expression expected, not `:`\n/tmp/tmp7v8xwlsa.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7v8xwlsa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num % 1) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmphn52ngg5.d(17): Error: semicolon expected, not `:`\n/tmp/tmphn52ngg5.d(17): Error: expression expected, not `:`\n/tmp/tmphn52ngg5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphn52ngg5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp1lt4u35d.d(17): Error: semicolon expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: expression expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lt4u35d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpft1uza0w.d(17): Error: semicolon expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: expression expected, not `:`\n/tmp/tmpft1uza0w.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft1uza0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i : nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpz7j90opf.d(17): Error: semicolon expected, not `:`\n/tmp/tmpz7j90opf.d(17): Error: expression expected, not `:`\n/tmp/tmpz7j90opf.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7j90opf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n: nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpco9p0s8q.d(17): Error: semicolon expected, not `:`\n/tmp/tmpco9p0s8q.d(17): Error: expression expected, not `:`\n/tmp/tmpco9p0s8q.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpco9p0s8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp1lt4u35d.d(17): Error: semicolon expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: expression expected, not `:`\n/tmp/tmp1lt4u35d.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lt4u35d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long i: nums)\n    {\n        if(i > 10 && i % 2 == 1 && i % 10 == 3 || i % 10 == 5 || i % 10 == 7 || i % 10 == 9)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp1l6e5g8r.d(17): Error: semicolon expected, not `:`\n/tmp/tmp1l6e5g8r.d(17): Error: expression expected, not `:`\n/tmp/tmp1l6e5g8r.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1l6e5g8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmponikyq07.d(17): Error: semicolon expected, not `:`\n/tmp/tmponikyq07.d(17): Error: expression expected, not `:`\n/tmp/tmponikyq07.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponikyq07.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpbem1g0t8.d(17): Error: semicolon expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: expression expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbem1g0t8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvp5r2no5.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: expression expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp5r2no5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpbem1g0t8.d(17): Error: semicolon expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: expression expected, not `:`\n/tmp/tmpbem1g0t8.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbem1g0t8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num % 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4_gh_vu2.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4_gh_vu2.d(17): Error: expression expected, not `:`\n/tmp/tmp4_gh_vu2.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_gh_vu2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num % 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp4_gh_vu2.d(17): Error: semicolon expected, not `:`\n/tmp/tmp4_gh_vu2.d(17): Error: expression expected, not `:`\n/tmp/tmp4_gh_vu2.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_gh_vu2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long n : nums)\n    {\n        if(n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp30xqc319.d(17): Error: semicolon expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: expression expected, not `:`\n/tmp/tmp30xqc319.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp30xqc319.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long n : nums)\n    {\n        if (n > 10 && (n % 10) % 2 == 1 && (n % 10) % 2 == 1)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpsrxi6mn9.d(17): Error: semicolon expected, not `:`\n/tmp/tmpsrxi6mn9.d(17): Error: expression expected, not `:`\n/tmp/tmpsrxi6mn9.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsrxi6mn9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num) {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmp8645s713.d(17): Error: semicolon expected, not `:`\n/tmp/tmp8645s713.d(17): Error: expression expected, not `:`\n/tmp/tmp8645s713.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8645s713.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpo056af0z.d(17): Error: semicolon expected, not `:`\n/tmp/tmpo056af0z.d(17): Error: expression expected, not `:`\n/tmp/tmpo056af0z.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo056af0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && num % 2 == 1 && num % 10 == num) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpvp5r2no5.d(17): Error: semicolon expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: expression expected, not `:`\n/tmp/tmpvp5r2no5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvp5r2no5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num : nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == num)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpp0m8mkvm.d(17): Error: semicolon expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: expression expected, not `:`\n/tmp/tmpp0m8mkvm.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0m8mkvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for(long num: nums)\n    {\n        if(num > 10 && (num % 2 == 1) && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmpybcf4n_c.d(17): Error: semicolon expected, not `:`\n/tmp/tmpybcf4n_c.d(17): Error: expression expected, not `:`\n/tmp/tmpybcf4n_c.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybcf4n_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    for (long num : nums)\n    {\n        if (num > 10 && num % 2 == 1 && num % 10 == num % 100)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293468,
      "stdout": "",
      "stderr": "/tmp/tmplm3ajjh5.d(17): Error: semicolon expected, not `:`\n/tmp/tmplm3ajjh5.d(17): Error: expression expected, not `:`\n/tmp/tmplm3ajjh5.d(17): Error: found `nums` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplm3ajjh5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}