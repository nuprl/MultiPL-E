{
  "name": "HumanEval_86_anti_shuffle",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n",
  "tests": "unittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        if(c == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpelhdk7tb.d(23): Error: no property `length` for type `string`\n/tmp/tmpelhdk7tb.d(29): Error: slice `result` is not mutable\n/tmp/tmpelhdk7tb.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelhdk7tb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n        {\n            res += ascii - 'a' + 'A';\n        }\n        else if(ascii >= 'A' && ascii <= 'Z')\n        {\n            res += ascii - 'A' + 'a';\n        }\n        else\n        {\n            res += ascii;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp4vicvi69.d(23): Error: no property `length` for type `string`\n/tmp/tmp4vicvi69.d(29): Error: incompatible types for `(res) += (ascii - 97 + 65)`: `string` and `int`\n/tmp/tmp4vicvi69.d(33): Error: incompatible types for `(res) += (ascii - 65 + 97)`: `string` and `int`\n/tmp/tmp4vicvi69.d(37): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vicvi69.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a =\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpt33rfbzw.d(95): Error: expression expected, not `unittest`\n/tmp/tmpt33rfbzw.d(96): Error: semicolon expected, not `{`\n/tmp/tmpt33rfbzw.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt33rfbzw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    int i, j, k;\n    string res = \"\";\n    for (i = 0; i < len; i++) {\n        if (s[i] == ' ') {\n            res += \" \";\n            continue;\n        }\n        for (j = i + 1; j < len; j++) {\n            if (s[j] == ' ') {\n                break;\n            }\n        }\n        for (k = i; k < j; k++) {\n            res += s[k];\n        }\n        for (k = j; k < len; k++) {\n            res += s[k];\n        }\n        i = j - 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpcmdom9ya.d(22): Error: no property `length` for type `string`\n/tmp/tmpcmdom9ya.d(27): Error: slice `res` is not mutable\n/tmp/tmpcmdom9ya.d(36): Error: slice `res` is not mutable\n/tmp/tmpcmdom9ya.d(39): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcmdom9ya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpo21tut7t.d(23): Error: no property `length` for type `string`\n/tmp/tmpo21tut7t.d(27): Error: slice `res` is not mutable\n/tmp/tmpo21tut7t.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo21tut7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpo21tut7t.d(23): Error: no property `length` for type `string`\n/tmp/tmpo21tut7t.d(27): Error: slice `res` is not mutable\n/tmp/tmpo21tut7t.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo21tut7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += \" \";\n            i++;\n            continue;\n        }\n        if(s[i] >= 'a' && s[i] <= 'z')\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] >= '0' && s[i] <= '9')\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] >= 'a' && s[i] <= 'z')\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] >= '0' && s[i] <= '9')\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] >= 'a' && s[i] <= 'z')\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] >= '0' && s[i] <= '9')\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp6euoghvx.d(25): Error: no property `length` for type `string`\n/tmp/tmp6euoghvx.d(35): Error: slice `res` is not mutable\n/tmp/tmp6euoghvx.d(41): Error: slice `res` is not mutable\n/tmp/tmp6euoghvx.d(47): Error: slice `res` is not mutable\n/tmp/tmp6euoghvx.d(53): Error: slice `res` is not mutable\n/tmp/tmp6euoghvx.d(59): Error: slice `res` is not mutable\n/tmp/tmp6euoghvx.d(65): Error: slice `res` is not mutable\n/tmp/tmp6euoghvx.d(71): Error: slice `res` is not mutable\n/tmp/tmp6euoghvx.d(77): Error: slice `res` is not mutable\n/tmp/tmp6euoghvx.d(83): Error: slice `res` is not mutable\n/tmp/tmp6euoghvx.d(89): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6euoghvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp8etuf21e.d(95): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8etuf21e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k,l,m,n;\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            continue;\n        }\n        else\n        {\n            for(j=i+1;j<s.length();j++)\n            {\n                if(s[j]==' ')\n                {\n                    break;\n                }\n                else\n                {\n                    if(s[i]>s[j])\n                    {\n                        k=s[i];\n                        s[i]=s[j];\n                        s[j]=k;\n                    }\n                }\n            }\n        }\n    }\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            continue;\n        }\n        else\n        {\n            for(j=i+1;j<s.length();j++)\n            {\n                if(s[j]==' ')\n                {\n                    break;\n                }\n                else\n                {\n                    if(s[i]>s[j])\n                    {\n                        k=s[i];\n                        s[i]=s[j];\n                        s[j]=k;\n                    }\n                }\n            }\n        }\n    }\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            continue;\n        }\n        else\n        {\n            for(j=i+1;j<s.length();j++)\n            {\n                if(s[j]==' ')\n                {\n                    break;\n                }\n                else\n                {\n                    if(s[i]>s[j])\n                    {\n                        k=s[i];\n                        s[i]=s[j];\n                        s[j]=k;\n                    }\n                }\n            }\n        }\n    }\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpsi1uairw.d(106): Error: found `unittest` instead of statement\n/tmp/tmpsi1uairw.d(118): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsi1uairw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    int i, j, k;\n    string res;\n    for (i = 0; i < len; i++) {\n        if (s[i] == ' ') {\n            continue;\n        }\n        for (j = i + 1; j < len; j++) {\n            if (s[j] == ' ') {\n                break;\n            }\n        }\n        for (k = i; k < j; k++) {\n            res += s[k];\n        }\n        for (k = j; k < len; k++) {\n            res += s[k];\n        }\n        i = j - 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp5pq9dm3i.d(22): Error: no property `length` for type `string`\n/tmp/tmp5pq9dm3i.d(35): Error: slice `res` is not mutable\n/tmp/tmp5pq9dm3i.d(38): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5pq9dm3i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] != ' ')\n        {\n            res += s[i];\n        }\n        else\n        {\n            for(int j = i+1; j < len; j++)\n            {\n                if(s[j] > s[i])\n                {\n                    res += s[j];\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp27q4tqf8.d(22): Error: no property `length` for type `string`\n/tmp/tmp27q4tqf8.d(28): Error: slice `res` is not mutable\n/tmp/tmp27q4tqf8.d(36): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27q4tqf8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        int c = s[i];\n        if(c == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += to_lower(c);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpvu1v1luc.d(23): Error: no property `length` for type `string`\n/tmp/tmpvu1v1luc.d(28): Error: slice `res` is not mutable\n/tmp/tmpvu1v1luc.d(32): Error: undefined identifier `to_lower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvu1v1luc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k,l;\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            for(j=i+1;j<s.length();j++)\n            {\n                if(s[j]!=' ')\n                {\n                    k=j-i;\n                    for(l=0;l<k;l++)\n                    {\n                        if(s[i+l]>s[j+l])\n                        {\n                            res+=(s[i+l]);\n                            s[i+l]=s[j+l];\n                            s[j+l]=res[l];\n                        }\n                    }\n                    break;\n                }\n            }\n            i=j;\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpg80e9usg.d(24): Error: no property `length` for type `string`\n/tmp/tmpg80e9usg.d(28): Error: no property `length` for type `string`\n/tmp/tmpg80e9usg.d(37): Error: slice `res` is not mutable\n/tmp/tmpg80e9usg.d(38): Error: cannot modify `immutable` expression `s[cast(ulong)(i + l)]`\n/tmp/tmpg80e9usg.d(39): Error: cannot modify `immutable` expression `s[cast(ulong)(j + l)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg80e9usg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.size(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += \" \";\n            continue;\n        }\n        res += s[i];\n        for(int j = i+1; j < s.size(); j++)\n        {\n            if(s[j] > s[i])\n            {\n                res += s[j];\n                break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmphd2cld1c.d(23): Error: no property `size` for type `string`\n/tmp/tmphd2cld1c.d(27): Error: slice `res` is not mutable\n/tmp/tmphd2cld1c.d(30): Error: slice `res` is not mutable\n/tmp/tmphd2cld1c.d(31): Error: no property `size` for type `string`\n/tmp/tmphd2cld1c.d(35): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd2cld1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        while(j < len && s[j] != ' ')\n        {\n            j++;\n        }\n        res += s[i];\n        i = j;\n        j++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpiwgb8p0j.d(23): Error: no property `length` for type `string`\n/tmp/tmpiwgb8p0j.d(37): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiwgb8p0j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n            ascii = ascii - 'a' + 'A';\n        else if(ascii >= 'A' && ascii <= 'Z')\n            ascii = ascii - 'A' + 'a';\n        else if(ascii >= '0' && ascii <= '9')\n            ascii = ascii - '0' + '9';\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp3yaubfpp.d(23): Error: no property `length` for type `string`\n/tmp/tmp3yaubfpp.d(32): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3yaubfpp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        int ascii_value = s[i];\n        while(j < len)\n        {\n            if(s[j] == ' ')\n            {\n                j++;\n                continue;\n            }\n            if(ascii_value < s[j])\n            {\n                res += s[j];\n                j++;\n                continue;\n            }\n            if(ascii_value > s[j])\n            {\n                res += s[i];\n                i++;\n                continue;\n            }\n            res += s[i];\n            i++;\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmporw312gj.d(23): Error: no property `length` for type `string`\n/tmp/tmporw312gj.d(43): Error: slice `res` is not mutable\n/tmp/tmporw312gj.d(49): Error: slice `res` is not mutable\n/tmp/tmporw312gj.d(53): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporw312gj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] != ' ')\n        {\n            res += s[i];\n        }\n        else\n        {\n            res += s[i];\n            for(int j = i+1; j < s.length(); j++)\n            {\n                if(s[j] != ' ')\n                {\n                    res += s[j];\n                }\n                else\n                {\n                    res += s[j];\n                    for(int k = j+1; k < s.length(); k++)\n                    {\n                        if(s[k] != ' ')\n                        {\n                            res += s[k];\n                        }\n                        else\n                        {\n                            res += s[k];\n                            for(int l = k+1; l < s.length(); l++)\n                            {\n                                if(s[l] != ' ')\n                                {\n                                    res += s[l];\n                                }\n                                else\n                                {\n                                    res += s[l];\n                                    for(int m = l+1; m < s.length(); m++)\n                                    {\n                                        if(s[m] != ' ')\n                                        {\n                                            res += s[m];\n                                        }\n                                        else\n                                        {\n                                            res += s[m];\n                                            for(int n = m+1; n < s.length(); n++)\n                                            {\n                                                if(s[n] != ' ')\n                                                {\n                                                    res += s[n];\n                                                }\n                                                else\n                                                {\n                                                    res += s[n];\n                                                    for(int o = n+1; o < s.length(); o++)\n                                                    {\n                                                        if(s[o] != ' ')\n                                                        {\n                                                            res += s[o];\n                                                        }\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmppwudp7an.d(84): Error: found `unittest` instead of statement\n/tmp/tmppwudp7an.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppwudp7an.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppwudp7an.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppwudp7an.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppwudp7an.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppwudp7an.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppwudp7an.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppwudp7an.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppwudp7an.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppwudp7an.d(96): Error: found `End of File` when expectin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        while(j < len && s[j] != ' ')\n        {\n            res += s[j];\n            j++;\n        }\n        res += s[i];\n        i++;\n        j++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp5zgdxmon.d(25): Error: no property `length` for type `string`\n/tmp/tmp5zgdxmon.d(35): Error: slice `res` is not mutable\n/tmp/tmp5zgdxmon.d(38): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5zgdxmon.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        int j = i;\n        while(j < len && ascii <= s[j])\n        {\n            res += s[j];\n            j++;\n        }\n        res += ' ';\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmph24ygsvq.d(23): Error: no property `length` for type `string`\n/tmp/tmph24ygsvq.d(31): Error: slice `res` is not mutable\n/tmp/tmph24ygsvq.d(34): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph24ygsvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        \nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpq_gam2bu.d(117): Error: found `unittest` instead of statement\n/tmp/tmpq_gam2bu.d(129): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_gam2bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 65 && ascii <= 90)\n        {\n            result += s[i];\n        }\n        else if(ascii >= 97 && ascii <= 122)\n        {\n            result += s[i];\n        }\n        else if(ascii >= 48 && ascii <= 57)\n        {\n            result += s[i];\n        }\n        else if(ascii == 32)\n        {\n            result += \" \";\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpnhku5138.d(23): Error: no property `length` for type `string`\n/tmp/tmpnhku5138.d(29): Error: slice `result` is not mutable\n/tmp/tmpnhku5138.d(33): Error: slice `result` is not mutable\n/tmp/tmpnhku5138.d(37): Error: slice `result` is not mutable\n/tmp/tmpnhku5138.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnhku5138.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int j = i;\n        while(j > 0 && s[j-1] > c)\n        {\n            s[j] = s[j-1];\n            j--;\n        }\n        s[j] = c;\n    }\n    for(int i = 0; i < s.length(); i++)\n    {\n        res += s[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpg3zxlsf_.d(23): Error: no property `length` for type `string`\n/tmp/tmpg3zxlsf_.d(29): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpg3zxlsf_.d(32): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpg3zxlsf_.d(34): Error: no property `length` for type `string`\n/tmp/tmpg3zxlsf_.d(36): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3zxlsf_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        int j = i;\n        while(j < s.length() && s[j] != ' ')\n            j++;\n        if(j == i)\n            res += s[i];\n        else\n        {\n            res += s[i];\n            for(int k = i; k < j; k++)\n                res += s[k];\n            i = j;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp6tbavavi.d(23): Error: no property `length` for type `string`\n/tmp/tmp6tbavavi.d(28): Error: no property `length` for type `string`\n/tmp/tmp6tbavavi.d(31): Error: slice `res` is not mutable\n/tmp/tmp6tbavavi.d(34): Error: slice `res` is not mutable\n/tmp/tmp6tbavavi.d(36): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tbavavi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += \" \";\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp0qhmf3gs.d(23): Error: no property `length` for type `string`\n/tmp/tmp0qhmf3gs.d(27): Error: slice `res` is not mutable\n/tmp/tmp0qhmf3gs.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qhmf3gs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            count++;\n            i++;\n        }\n        else\n        {\n            while(count > 0)\n            {\n                res += s[i];\n                i++;\n                count--;\n            }\n            count = 0;\n            while(i < len && s[i] != ' ')\n            {\n                res += s[i];\n                i++;\n            }\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpw0ti4oa3.d(23): Error: no property `length` for type `string`\n/tmp/tmpw0ti4oa3.d(39): Error: slice `res` is not mutable\n/tmp/tmpw0ti4oa3.d(46): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0ti4oa3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpmsb88w93.d(23): Error: no property `length` for type `string`\n/tmp/tmpmsb88w93.d(27): Error: slice `res` is not mutable\n/tmp/tmpmsb88w93.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsb88w93.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result;\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i];\n        for(int j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                result += s[i];\n                s[i] = s[j];\n                s[j] = result[result.length()-1];\n                result = result.substr(0, result.length()-1);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpenmmk6cl.d(23): Error: no property `length` for type `string`\n/tmp/tmpenmmk6cl.d(25): Error: slice `result` is not mutable\n/tmp/tmpenmmk6cl.d(26): Error: no property `length` for type `string`\n/tmp/tmpenmmk6cl.d(30): Error: slice `result` is not mutable\n/tmp/tmpenmmk6cl.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpenmmk6cl.d(32): Error: no property `length` for type `string`\n/tmp/tmpenmmk6cl.d(33): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpenmmk6cl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        int c = s[i];\n        int j = i;\n        while(j < s.length() && s[j] > c)\n        {\n            s[j] = s[j+1];\n            j++;\n        }\n        s[j] = c;\n    }\n    for(int i = 0; i < s.length(); i++)\n    {\n        res += s[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpk06380bx.d(23): Error: no property `length` for type `string`\n/tmp/tmpk06380bx.d(27): Error: no property `length` for type `string`\n/tmp/tmpk06380bx.d(29): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpk06380bx.d(32): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpk06380bx.d(34): Error: no property `length` for type `string`\n/tmp/tmpk06380bx.d(36): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk06380bx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i];\n        for(int j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                result[i] = s[j];\n                result[j] = s[i];\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpz1imttqi.d(23): Error: no property `length` for type `string`\n/tmp/tmpz1imttqi.d(25): Error: slice `result` is not mutable\n/tmp/tmpz1imttqi.d(26): Error: no property `length` for type `string`\n/tmp/tmpz1imttqi.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpz1imttqi.d(31): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1imttqi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i=0; i<s.size(); i++)\n    {\n        int c = s[i];\n        for(int j=0; j<s.size(); j++)\n        {\n            if(s[j]>c)\n            {\n                c = s[j];\n            }\n        }\n        res += c;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpczy7pw56.d(23): Error: no property `size` for type `string`\n/tmp/tmpczy7pw56.d(26): Error: no property `size` for type `string`\n/tmp/tmpczy7pw56.d(33): Error: incompatible types for `(res) += (c)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpczy7pw56.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        int c = s[i];\n        if(c == ' ')\n            res += ' ';\n        else\n        {\n            if(i == 0)\n                res += c;\n            else\n            {\n                int j = i - 1;\n                while(j >= 0 && s[j] > c)\n                {\n                    res += s[j];\n                    j--;\n                }\n                res += c;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp5eu11bwv.d(23): Error: no property `length` for type `string`\n/tmp/tmp5eu11bwv.d(27): Error: slice `res` is not mutable\n/tmp/tmp5eu11bwv.d(31): Error: incompatible types for `(res) += (c)`: `string` and `int`\n/tmp/tmp5eu11bwv.d(37): Error: slice `res` is not mutable\n/tmp/tmp5eu11bwv.d(40): Error: incompatible types for `(res) += (c)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5eu11bwv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n            ascii = ascii - 'a' + 'A';\n        else if(ascii >= 'A' && ascii <= 'Z')\n            ascii = ascii - 'A' + 'a';\n        else if(ascii >= '0' && ascii <= '9')\n            ascii = ascii - '0' + '9';\n        else\n            ascii = ' ';\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpv3v2lk02.d(23): Error: no property `length` for type `string`\n/tmp/tmpv3v2lk02.d(35): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3v2lk02.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int c = s[i];\n        if(c == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += (char)(c + 1);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp2lmvta47.d(32): Error: C style cast illegal, use `cast(char)(c + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2lmvta47.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        int j = i;\n        while(j < len && ascii <= s[j])\n        {\n            j++;\n        }\n        if(j == len)\n        {\n            result += c;\n        }\n        else\n        {\n            result += s[j];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp84pjn553.d(22): Error: no property `length` for type `string`\n/tmp/tmp84pjn553.d(35): Error: slice `result` is not mutable\n/tmp/tmp84pjn553.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84pjn553.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k;\n    for(i=0;i<s.length();i++)\n    {\n        for(j=i+1;j<s.length();j++)\n        {\n            if(s[i]>s[j])\n            {\n                k=s[i];\n                s[i]=s[j];\n                s[j]=k;\n            }\n        }\n    }\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            res+=' ';\n        }\n        else\n        {\n            res+=s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpb9nsl2iu.d(24): Error: no property `length` for type `string`\n/tmp/tmpb9nsl2iu.d(26): Error: no property `length` for type `string`\n/tmp/tmpb9nsl2iu.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpb9nsl2iu.d(32): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpb9nsl2iu.d(36): Error: no property `length` for type `string`\n/tmp/tmpb9nsl2iu.d(40): Error: slice `res` is not mutable\n/tmp/tmpb9nsl2iu.d(44): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb9nsl2iu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        int ascii = s[i];\n        int j = i;\n        while(j < len && s[j] != ' ')\n        {\n            if(s[j] > ascii)\n            {\n                ascii = s[j];\n            }\n            j++;\n        }\n        res += ascii;\n        i = j - 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp1aer4mev.d(23): Error: no property `length` for type `string`\n/tmp/tmp1aer4mev.d(28): Error: slice `res` is not mutable\n/tmp/tmp1aer4mev.d(41): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1aer4mev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int i,j,k,l,m,n,p;\n    string str,str1,str2,str3,str4,str5,str6,str7,str8,str9,str10,str11,str12,str13,str14,str15,str16,str17,str18,str19,str20,str21,str22,str23,str24,str25,str26,str27,str28,str29,str30,str31,str32,str33,str34,str35,str36,str37,str38,str39,str40,str41,str42,str43,str44,str45,str46,str47,str48,str49,str50,str51,str52,str53,str54,str55,str56,str57,str58,str59,str60,str61,str62,str63,str64,str65,str66,str67,str68,str69,str70,str71,str72,str73,str74,str75,str76,str77,str78,str79,str80,str81,str82,str83,str84,str85,str86,str87,str88,str89,str90,str91,str92,str93,str94,str95,str96,str97,str98,str99,str100,str101,str102,str103,str104,str105,str106,str107,str108,str109,str110,str111,str112,str113,str114,str115,str116,str117,str118,str119,str120,str121,str122,str123,str124,str125,str126,str127,str128,str129,str130,str131,str132,str133,str134,str135,str136,str137,str138,str139,str140,str141,str142,str143,str144,str145,str146,str147,str148,str149,str150,str151,str152,str153,str154,str155,str156,str157,str158,str159,str160,str161,str162,str163,\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp5hsz65s_.d(24): Error: no identifier for declarator `string`\n/tmp/tmp5hsz65s_.d(24): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5hsz65s_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n        {\n            res += s[i];\n        }\n        else if(ascii >= 'A' && ascii <= 'Z')\n        {\n            res += s[i];\n        }\n        else if(ascii >= '0' && ascii <= '9')\n        {\n            res += s[i];\n        }\n        else if(ascii == ' ')\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp_b4atu6b.d(23): Error: no property `length` for type `string`\n/tmp/tmp_b4atu6b.d(29): Error: slice `res` is not mutable\n/tmp/tmp_b4atu6b.d(33): Error: slice `res` is not mutable\n/tmp/tmp_b4atu6b.d(37): Error: slice `res` is not mutable\n/tmp/tmp_b4atu6b.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_b4atu6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a =\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpy0fu2ob0.d(95): Error: expression expected, not `unittest`\n/tmp/tmpy0fu2ob0.d(96): Error: semicolon expected, not `{`\n/tmp/tmpy0fu2ob0.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0fu2ob0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int i,j,k,l,m,n,p,q,r,sz;\n    string ans;\n    sz = s.size();\n    for(i=0;i<sz;i++)\n    {\n        if(s[i]==' ')\n        {\n            for(j=i+1;j<sz;j++)\n            {\n                if(s[j]!=' ')\n                {\n                    if(s[i]<s[j])\n                    {\n                        k=i;\n                        l=j;\n                    }\n                    else\n                    {\n                        k=j;\n                        l=i;\n                    }\n                    for(m=i;m<j;m++)\n                    {\n                        s[m]=s[m+1];\n                    }\n                    for(m=i;m<j;m++)\n                    {\n                        s[m]=s[m+1];\n                    }\n                    s[k]=s[l];\n                    s[l]=s[k];\n                    i=k;\n                    j=l;\n                }\n            }\n        }\n    }\n    for(i=0;i<sz;i++)\n    {\n        if(s[i]==' ')\n        {\n            for(j=i+1;j<sz;j++)\n            {\n                if(s[j]!=' ')\n                {\n                    if(s[i]<s[j])\n                    {\n                        k=i;\n                        l=j;\n                    }\n                    else\n                    {\n                        k=j;\n                        l=i;\n                    }\n                    for(m=i;m<j;m++)\n                    {\n                        s[m]=s[m+1];\n                    }\n                    for(m=i;m<j;m++)\n                    {\n                        s[m]=s[m+1];\n                    }\n                    s[k]=s[l];\n                    s[l]=s[k];\n                    i=k;\n                    j=l;\n                }\n            }\n        }\n    }\n    for(i=0;i<sz;i++)\n    \nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpwfi0k_8d.d(95): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwfi0k_8d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(i == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i] > s[i+1])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        while(i < len - 1 && s[i] < s[i+1])\n        {\n            i++;\n        }\n        if(i == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i] > s[i+1])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        while(i < len - 1 && s[i] < s[i+1])\n        {\n            i++;\n        }\n        if(i == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i] > s[i+1])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        while(i < len - 1 && s[i] < s[i+1])\n        {\n            i++;\n        }\n        if(i == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i] > s[i+1])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        while(i < len - 1 && s[i] < s[i+1])\n        {\n            i++;\n        }\n        if(i == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i] > s[i+1])\n        {\n            res += s[i\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpcworertq.d(102): Error: found `unittest` when expecting `,`\n/tmp/tmpcworertq.d(114): Error: found `void` when expecting `,`\n/tmp/tmpcworertq.d(114): Error: found `{` when expecting `,`\n/tmp/tmpcworertq.d(114): Error: expression expected, not `}`\n/tmp/tmpcworertq.d(114): Error: found `End of File` when expecting `,`\n/tmp/tmpcworertq.d(114): Error: found `End of File` when expecting `]`\n/tmp/tmpcworertq.d(114): Error: found `End of File` when expecting `;` following statement\n/tmp/tmpcworertq.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcworertq.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcworertq.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcworertq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        if(c == ' ')\n            res += c;\n        else\n        {\n            int j = i;\n            while(j < len && s[j] > c)\n            {\n                s[j] = s[j+1];\n                j++;\n            }\n            s[j] = c;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp0gq1hir9.d(23): Error: no property `length` for type `string`\n/tmp/tmp0gq1hir9.d(28): Error: slice `res` is not mutable\n/tmp/tmp0gq1hir9.d(34): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmp0gq1hir9.d(37): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gq1hir9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpphqgpn_h.d(23): Error: no property `length` for type `string`\n/tmp/tmpphqgpn_h.d(28): Error: slice `result` is not mutable\n/tmp/tmpphqgpn_h.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpphqgpn_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        int ascii = s[i];\n        for(int j = i + 1; j < len; j++)\n        {\n            if(s[j] == ' ')\n            {\n                break;\n            }\n            if(s[j] > ascii)\n            {\n                ascii = s[j];\n            }\n        }\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpdeq7xd98.d(23): Error: no property `length` for type `string`\n/tmp/tmpdeq7xd98.d(28): Error: slice `res` is not mutable\n/tmp/tmpdeq7xd98.d(43): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdeq7xd98.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpuwc5i3js.d(23): Error: no property `length` for type `string`\n/tmp/tmpuwc5i3js.d(27): Error: slice `result` is not mutable\n/tmp/tmpuwc5i3js.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwc5i3js.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        int ascii = s[i];\n        for(int j = i + 1; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n            {\n                break;\n            }\n            if(s[j] > ascii)\n            {\n                ascii = s[j];\n            }\n        }\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpukym03h4.d(23): Error: no property `length` for type `string`\n/tmp/tmpukym03h4.d(27): Error: slice `res` is not mutable\n/tmp/tmpukym03h4.d(31): Error: no property `length` for type `string`\n/tmp/tmpukym03h4.d(42): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukym03h4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            count++;\n            i++;\n            continue;\n        }\n        if(count > 0)\n        {\n            count--;\n            res += s[i];\n            i++;\n            continue;\n        }\n        while(i < len && s[i] != ' ')\n        {\n            res += s[i];\n            i++;\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpiazwdirx.d(23): Error: no property `length` for type `string`\n/tmp/tmpiazwdirx.d(43): Error: slice `res` is not mutable\n/tmp/tmpiazwdirx.d(49): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiazwdirx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 65 && ascii <= 90)\n        {\n            result += s[i];\n        }\n        else if(ascii >= 97 && ascii <= 122)\n        {\n            result += s[i];\n        }\n        else if(ascii >= 48 && ascii <= 57)\n        {\n            result += s[i];\n        }\n        else if(ascii == 32)\n        {\n            result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpg9fvtzf8.d(23): Error: no property `length` for type `string`\n/tmp/tmpg9fvtzf8.d(29): Error: slice `result` is not mutable\n/tmp/tmpg9fvtzf8.d(33): Error: slice `result` is not mutable\n/tmp/tmpg9fvtzf8.d(37): Error: slice `result` is not mutable\n/tmp/tmpg9fvtzf8.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg9fvtzf8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        int ascii = s[i];\n        int j = i;\n        while(j < len && s[j] != ' ')\n        {\n            if(s[j] > ascii)\n                break;\n            j++;\n        }\n        if(j == i)\n            res += s[i];\n        else\n        {\n            res += s[i];\n            for(int k = i; k < j; k++)\n                res += s[k];\n            i = j - 1;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpxw3wcn0s.d(23): Error: no property `length` for type `string`\n/tmp/tmpxw3wcn0s.d(37): Error: slice `res` is not mutable\n/tmp/tmpxw3wcn0s.d(40): Error: slice `res` is not mutable\n/tmp/tmpxw3wcn0s.d(42): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxw3wcn0s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k,l,m;\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            res+=' ';\n            continue;\n        }\n        for(j=i+1;j<s.length();j++)\n        {\n            if(s[j]==' ')\n            {\n                break;\n            }\n            if(s[i]>s[j])\n            {\n                res+=s[i];\n                i=j;\n                break;\n            }\n        }\n    }\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            res+=' ';\n            continue;\n        }\n        for(j=i+1;j<s.length();j++)\n        {\n            if(s[j]==' ')\n            {\n                break;\n            }\n            if(s[i]<s[j])\n            {\n                res+=s[j];\n                i=j;\n                break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp19oay1ps.d(24): Error: no property `length` for type `string`\n/tmp/tmp19oay1ps.d(28): Error: slice `res` is not mutable\n/tmp/tmp19oay1ps.d(31): Error: no property `length` for type `string`\n/tmp/tmp19oay1ps.d(39): Error: slice `res` is not mutable\n/tmp/tmp19oay1ps.d(45): Error: no property `length` for type `string`\n/tmp/tmp19oay1ps.d(49): Error: slice `res` is not mutable\n/tmp/tmp19oay1ps.d(52): Error: no property `length` for type `string`\n/tmp/tmp19oay1ps.d(60): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19oay1ps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int i, j, k, l, m, n, p, q, r, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40, s41, s42, s43, s44, s45, s46, s47, s48, s49, s50, s51, s52, s53, s54, s55, s56, s57, s58, s59, s60, s61, s62, s63, s64, s65, s66, s67, s68, s69, s70, s71, s72, s73, s74, s75, s76, s77, s78, s79, s80, s81, s82, s83, s84, s85, s86, s87, s88, s89, s90, s91, s92, s93, s94, s95, s96, s97, s98, s99, s100, s101, s102, s103, s104, s105, s106, s107, s108, s109, s110, s111, s112, s113, s114, s115, s116, s117, s118, s119, s120, s121, s122, s123, s124, s125, s126, s127, s128, s129, s130, s131, s132, s133, s134, s135, s136, s137, s138, s139, s140, s141, s142, s143, s144, s145, s146, s147, s148, s149, s150, s151, s152, s153, s154, s155, s156, s157, s158, s159, s160, s161, s162, s163, s\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpig3s1qot.d(23): Error: semicolon expected, not `unittest`\n/tmp/tmpig3s1qot.d(23): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpig3s1qot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int c = s[i];\n        if(c == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            int j = i;\n            while(j < len && s[j] > c)\n            {\n                j++;\n            }\n            if(j == i)\n            {\n                res += s[i];\n            }\n            else\n            {\n                res += s[j];\n                i = j - 1;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpqxzbllzt.d(23): Error: no property `length` for type `string`\n/tmp/tmpqxzbllzt.d(29): Error: slice `res` is not mutable\n/tmp/tmpqxzbllzt.d(40): Error: slice `res` is not mutable\n/tmp/tmpqxzbllzt.d(44): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxzbllzt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(j == len - 1)\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] > s[j])\n        {\n            res += s[i];\n            i++;\n        }\n        else\n        {\n            res += s[j];\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpum6aw79p.d(25): Error: no property `length` for type `string`\n/tmp/tmpum6aw79p.d(35): Error: slice `res` is not mutable\n/tmp/tmpum6aw79p.d(41): Error: slice `res` is not mutable\n/tmp/tmpum6aw79p.d(46): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpum6aw79p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += \" \";\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp0qhmf3gs.d(23): Error: no property `length` for type `string`\n/tmp/tmp0qhmf3gs.d(27): Error: slice `res` is not mutable\n/tmp/tmp0qhmf3gs.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qhmf3gs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        int ascii = s[i];\n        int j = i;\n        while(j < len && s[j] != ' ')\n        {\n            if(s[j] > ascii)\n            {\n                ascii = s[j];\n            }\n            j++;\n        }\n        res += ascii;\n        i = j-1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpfem56rea.d(22): Error: no property `length` for type `string`\n/tmp/tmpfem56rea.d(28): Error: slice `res` is not mutable\n/tmp/tmpfem56rea.d(41): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfem56rea.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int c = s[i];\n        if(c == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            int j = i;\n            while(j < len && s[j] > c)\n            {\n                j++;\n            }\n            if(j == i)\n            {\n                res += s[i];\n            }\n            else\n            {\n                res += s[j];\n                i = j - 1;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpkl3hdrx8.d(23): Error: no property `length` for type `string`\n/tmp/tmpkl3hdrx8.d(29): Error: slice `res` is not mutable\n/tmp/tmpkl3hdrx8.d(40): Error: slice `res` is not mutable\n/tmp/tmpkl3hdrx8.d(44): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkl3hdrx8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for (int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        if (ascii >= 65 && ascii <= 90)\n        {\n            result += c;\n        }\n        else if (ascii >= 97 && ascii <= 122)\n        {\n            result += c;\n        }\n        else if (ascii >= 48 && ascii <= 57)\n        {\n            result += c;\n        }\n        else if (ascii == 32)\n        {\n            result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp5d14n0w4.d(23): Error: no property `length` for type `string`\n/tmp/tmp5d14n0w4.d(30): Error: slice `result` is not mutable\n/tmp/tmp5d14n0w4.d(34): Error: slice `result` is not mutable\n/tmp/tmp5d14n0w4.d(38): Error: slice `result` is not mutable\n/tmp/tmp5d14n0w4.d(42): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5d14n0w4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while (i < len)\n    {\n        if (s[i] == ' ')\n        {\n            result += ' ';\n            i++;\n        }\n        else\n        {\n            result += s[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpy918debb.d(25): Error: no property `length` for type `string`\n/tmp/tmpy918debb.d(30): Error: slice `result` is not mutable\n/tmp/tmpy918debb.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy918debb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(i == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i] > s[i+1])\n        {\n            res += s[i];\n            i++;\n        }\n        else\n        {\n            res += s[i+1];\n            i++;\n            j++;\n        }\n        if(j == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp1uzln0v3.d(25): Error: no property `length` for type `string`\n/tmp/tmp1uzln0v3.d(35): Error: slice `res` is not mutable\n/tmp/tmp1uzln0v3.d(40): Error: slice `res` is not mutable\n/tmp/tmp1uzln0v3.d(45): Error: slice `res` is not mutable\n/tmp/tmp1uzln0v3.d(51): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uzln0v3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int c = s[i];\n        if(c == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += to_lower(c);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpxj2u_5s3.d(23): Error: no property `length` for type `string`\n/tmp/tmpxj2u_5s3.d(29): Error: slice `res` is not mutable\n/tmp/tmpxj2u_5s3.d(33): Error: undefined identifier `to_lower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxj2u_5s3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] != ' ')\n        {\n            res += s[i];\n        }\n        else\n        {\n            for(int j = i+1; j < s.length(); j++)\n            {\n                if(s[j] != ' ')\n                {\n                    res += s[j];\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpualf5epw.d(23): Error: no property `length` for type `string`\n/tmp/tmpualf5epw.d(27): Error: slice `res` is not mutable\n/tmp/tmpualf5epw.d(31): Error: no property `length` for type `string`\n/tmp/tmpualf5epw.d(35): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpualf5epw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpo21tut7t.d(23): Error: no property `length` for type `string`\n/tmp/tmpo21tut7t.d(27): Error: slice `res` is not mutable\n/tmp/tmpo21tut7t.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo21tut7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k;\n    for(i=0;i<s.length();i++)\n    {\n        for(j=0;j<s.length();j++)\n        {\n            if(s[i]>s[j])\n            {\n                k=s[i];\n                s[i]=s[j];\n                s[j]=k;\n            }\n        }\n    }\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            res+=' ';\n        }\n        else\n        {\n            res+=s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpbx_eihhu.d(24): Error: no property `length` for type `string`\n/tmp/tmpbx_eihhu.d(26): Error: no property `length` for type `string`\n/tmp/tmpbx_eihhu.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpbx_eihhu.d(32): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpbx_eihhu.d(36): Error: no property `length` for type `string`\n/tmp/tmpbx_eihhu.d(40): Error: slice `res` is not mutable\n/tmp/tmpbx_eihhu.d(44): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbx_eihhu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += \" \";\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp0qhmf3gs.d(23): Error: no property `length` for type `string`\n/tmp/tmp0qhmf3gs.d(27): Error: slice `res` is not mutable\n/tmp/tmp0qhmf3gs.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qhmf3gs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(i == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i] > s[i+1])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        while(s[i] < s[i+1])\n        {\n            res += s[i];\n            i++;\n            if(i == len - 1)\n            {\n                res += s[i];\n                break;\n            }\n            if(s[i] > s[i+1])\n            {\n                res += s[i];\n                i++;\n                continue;\n            }\n            if(i == len - 1)\n            {\n                res += s[i];\n                break;\n            }\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp_xgpw16t.d(23): Error: no property `length` for type `string`\n/tmp/tmp_xgpw16t.d(36): Error: slice `res` is not mutable\n/tmp/tmp_xgpw16t.d(41): Error: slice `res` is not mutable\n/tmp/tmp_xgpw16t.d(47): Error: slice `res` is not mutable\n/tmp/tmp_xgpw16t.d(51): Error: slice `res` is not mutable\n/tmp/tmp_xgpw16t.d(56): Error: slice `res` is not mutable\n/tmp/tmp_xgpw16t.d(62): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xgpw16t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] != ' ')\n        {\n            result += s[i];\n        }\n        else\n        {\n            for(int j = i+1; j < len; j++)\n            {\n                if(s[j] > s[i])\n                {\n                    result += s[j];\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmplaohyfel.d(23): Error: no property `length` for type `string`\n/tmp/tmplaohyfel.d(28): Error: slice `result` is not mutable\n/tmp/tmplaohyfel.d(36): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplaohyfel.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        if(ascii >= 65 && ascii <= 90)\n            ascii = ascii + 32;\n        else if(ascii >= 97 && ascii <= 122)\n            ascii = ascii - 32;\n        result += ascii;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpf2cmnh2e.d(23): Error: no property `length` for type `string`\n/tmp/tmpf2cmnh2e.d(31): Error: incompatible types for `(result) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2cmnh2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpuc1mv294.d(119): Error: found `unittest` instead of statement\n/tmp/tmpuc1mv294.d(131): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuc1mv294.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n            ascii = ascii - 'a' + 'A';\n        else if(ascii >= 'A' && ascii <= 'Z')\n            ascii = ascii - 'A' + 'a';\n        else if(ascii >= '0' && ascii <= '9')\n            ascii = ascii - '0' + '9';\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpxax74qrn.d(23): Error: no property `length` for type `string`\n/tmp/tmpxax74qrn.d(33): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxax74qrn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            for(int j = i+1; j < s.length(); j++)\n            {\n                if(s[j] >= s[i])\n                {\n                    res.replace(i, 1, 1, s[j]);\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpya0wqxry.d(23): Error: no property `length` for type `string`\n/tmp/tmpya0wqxry.d(27): Error: slice `res` is not mutable\n/tmp/tmpya0wqxry.d(31): Error: slice `res` is not mutable\n/tmp/tmpya0wqxry.d(34): Error: no property `length` for type `string`\n/tmp/tmpya0wqxry.d(38): Error: no property `length` for type `string`\n/tmp/tmpya0wqxry.d(42): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpya0wqxry.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] != ' ')\n        {\n            res += s[i];\n        }\n        else\n        {\n            for(int j = i+1; j < s.length(); j++)\n            {\n                if(s[j] != ' ')\n                {\n                    res += s[j];\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpualf5epw.d(23): Error: no property `length` for type `string`\n/tmp/tmpualf5epw.d(27): Error: slice `res` is not mutable\n/tmp/tmpualf5epw.d(31): Error: no property `length` for type `string`\n/tmp/tmpualf5epw.d(35): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpualf5epw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            j = i + 1;\n            while(j < len)\n            {\n                if(s[j] == ' ')\n                {\n                    j++;\n                    continue;\n                }\n                if(s[j] < s[i])\n                {\n                    res += s[j];\n                    s[j] = ' ';\n                    i++;\n                    break;\n                }\n                else if(s[j] > s[i])\n                {\n                    res += s[i];\n                    s[i] = ' ';\n                    j++;\n                    break;\n                }\n                else\n                {\n                    i++;\n                    j++;\n                }\n            }\n        }\n        else\n        {\n            res += s[i];\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpy7pg_j52.d(25): Error: no property `length` for type `string`\n/tmp/tmpy7pg_j52.d(45): Error: slice `res` is not mutable\n/tmp/tmpy7pg_j52.d(46): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpy7pg_j52.d(52): Error: slice `res` is not mutable\n/tmp/tmpy7pg_j52.d(53): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpy7pg_j52.d(66): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy7pg_j52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpo21tut7t.d(23): Error: no property `length` for type `string`\n/tmp/tmpo21tut7t.d(27): Error: slice `res` is not mutable\n/tmp/tmpo21tut7t.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo21tut7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int c = s[i];\n        int j = i;\n        while(j < len && s[j] > c)\n        {\n            s[j] = s[j+1];\n            j++;\n        }\n        s[j] = c;\n    }\n    for(int i = 0; i < len; i++)\n    {\n        res += s[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpla3hezed.d(23): Error: no property `length` for type `string`\n/tmp/tmpla3hezed.d(30): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpla3hezed.d(33): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpla3hezed.d(37): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpla3hezed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpuwc5i3js.d(23): Error: no property `length` for type `string`\n/tmp/tmpuwc5i3js.d(27): Error: slice `result` is not mutable\n/tmp/tmpuwc5i3js.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwc5i3js.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        if(ascii >= 65 && ascii <= 90)\n        {\n            ascii = ascii - 65 + 26;\n        }\n        else if(ascii >= 97 && ascii <= 122)\n        {\n            ascii = ascii - 97 + 26;\n        }\n        else if(ascii >= 48 && ascii <= 57)\n        {\n            ascii = ascii - 48 + 10;\n        }\n        else if(ascii == 32)\n        {\n            ascii = 10;\n        }\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp2zol83_m.d(23): Error: no property `length` for type `string`\n/tmp/tmp2zol83_m.d(44): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zol83_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i=0;i<s.length();i++)\n    {\n        int c=s[i];\n        if(c==' ')\n        {\n            res+=' ';\n        }\n        else\n        {\n            res+=c;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpdi155nai.d(23): Error: no property `length` for type `string`\n/tmp/tmpdi155nai.d(28): Error: slice `res` is not mutable\n/tmp/tmpdi155nai.d(32): Error: incompatible types for `(res) += (c)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdi155nai.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k;\n    for(i=0;i<s.length();i++)\n    {\n        for(j=i+1;j<s.length();j++)\n        {\n            for(k=j+1;k<s.length();k++)\n            {\n                if(s[i]>s[j] && s[i]>s[k])\n                {\n                    res+=s[i];\n                    s[i]=s[j];\n                    s[j]=s[k];\n                    s[k]=res[res.length()-1];\n                    res.erase(res.length()-1);\n                }\n                else if(s[j]>s[k] && s[j]>s[i])\n                {\n                    res+=s[j];\n                    s[j]=s[k];\n                    s[k]=s[i];\n                    s[i]=res[res.length()-1];\n                    res.erase(res.length()-1);\n                }\n                else if(s[k]>s[i] && s[k]>s[j])\n                {\n                    res+=s[k];\n                    s[k]=s[i];\n                    s[i]=s[j];\n                    s[j]=res[res.length()-1];\n                    res.erase(res.length()-1);\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpx7rpb0zs.d(24): Error: no property `length` for type `string`\n/tmp/tmpx7rpb0zs.d(26): Error: no property `length` for type `string`\n/tmp/tmpx7rpb0zs.d(28): Error: no property `length` for type `string`\n/tmp/tmpx7rpb0zs.d(32): Error: slice `res` is not mutable\n/tmp/tmpx7rpb0zs.d(33): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpx7rpb0zs.d(34): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpx7rpb0zs.d(35): Error: no property `length` for type `string`\n/tmp/tmpx7rpb0zs.d(36): Error: no property `erase` for type `string`\n/tmp/tmpx7rpb0zs.d(40): Error: slice `res` is not mutable\n/tmp/tmpx7rpb0zs.d(41): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpx7rpb0zs.d(42): Error: cannot modify `immutable` expression `s[cast(ulong)k]`\n/tmp/tmpx7rpb0zs.d(43): Error: no property `length` for type `string`\n/tmp/tmpx7rpb0zs.d(44): Error: no property `erase` for type `string`\n/tmp/tmpx7rpb0zs.d(48): Error: slice `res` is not mutable\n/tmp/tmpx7rpb0zs.d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        int ascii = s[i];\n        int j = i;\n        while(j < len && s[j] != ' ')\n        {\n            if(s[j] > ascii)\n            {\n                ascii = s[j];\n            }\n            j++;\n        }\n        res += ascii;\n        i = j-1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmptbrz6nj1.d(23): Error: no property `length` for type `string`\n/tmp/tmptbrz6nj1.d(28): Error: slice `res` is not mutable\n/tmp/tmptbrz6nj1.d(41): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbrz6nj1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n        {\n            res += s[i];\n        }\n        else if(ascii >= 'A' && ascii <= 'Z')\n        {\n            res += s[i];\n        }\n        else if(ascii >= '0' && ascii <= '9')\n        {\n            res += s[i];\n        }\n        else if(ascii == ' ')\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp845qojhr.d(23): Error: no property `length` for type `string`\n/tmp/tmp845qojhr.d(29): Error: slice `res` is not mutable\n/tmp/tmp845qojhr.d(33): Error: slice `res` is not mutable\n/tmp/tmp845qojhr.d(37): Error: slice `res` is not mutable\n/tmp/tmp845qojhr.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp845qojhr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        int j = i;\n        while(j < s.length() && s[j] != ' ')\n            j++;\n        res += s[i];\n        for(int k = i; k < j; k++)\n            res += s[k];\n        i = j;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmphgx8cdn_.d(23): Error: no property `length` for type `string`\n/tmp/tmphgx8cdn_.d(28): Error: no property `length` for type `string`\n/tmp/tmphgx8cdn_.d(30): Error: slice `res` is not mutable\n/tmp/tmphgx8cdn_.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgx8cdn_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        res += s[i];\n        if(s[i] == ' ')\n        {\n            for(int j = i+1; j < s.length(); j++)\n            {\n                if(s[j] > s[i])\n                {\n                    res += s[j];\n                    i = j;\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpb0mg_thf.d(23): Error: no property `length` for type `string`\n/tmp/tmpb0mg_thf.d(25): Error: slice `res` is not mutable\n/tmp/tmpb0mg_thf.d(28): Error: no property `length` for type `string`\n/tmp/tmpb0mg_thf.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0mg_thf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            result += \" \";\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpa_dyc8yr.d(23): Error: no property `length` for type `string`\n/tmp/tmpa_dyc8yr.d(27): Error: slice `result` is not mutable\n/tmp/tmpa_dyc8yr.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_dyc8yr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        int ascii = s[i];\n        for(int j = i+1; j < len; j++)\n        {\n            if(s[j] == ' ')\n            {\n                break;\n            }\n            if(ascii > s[j])\n            {\n                ascii = s[j];\n            }\n        }\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp42hq_uxz.d(23): Error: no property `length` for type `string`\n/tmp/tmp42hq_uxz.d(28): Error: slice `res` is not mutable\n/tmp/tmp42hq_uxz.d(43): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42hq_uxz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k;\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            for(j=i+1;j<s.length();j++)\n            {\n                if(s[j]!=' ')\n                {\n                    res+=s[j];\n                    break;\n                }\n            }\n            i=j-1;\n        }\n        else\n        {\n            for(j=i+1;j<s.length();j++)\n            {\n                if(s[j]>s[i])\n                {\n                    res+=s[j];\n                    break;\n                }\n            }\n            i=j-1;\n        }\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp1ofms082.d(24): Error: no property `length` for type `string`\n/tmp/tmp1ofms082.d(28): Error: no property `length` for type `string`\n/tmp/tmp1ofms082.d(32): Error: slice `res` is not mutable\n/tmp/tmp1ofms082.d(40): Error: no property `length` for type `string`\n/tmp/tmp1ofms082.d(44): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ofms082.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            result += \" \";\n            i++;\n        }\n        else\n        {\n            while(j < len && s[j] != ' ')\n            {\n                result += s[j];\n                j++;\n            }\n            result += \" \";\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpat9enbyf.d(25): Error: no property `length` for type `string`\n/tmp/tmpat9enbyf.d(30): Error: slice `result` is not mutable\n/tmp/tmpat9enbyf.d(37): Error: slice `result` is not mutable\n/tmp/tmpat9enbyf.d(40): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat9enbyf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    string ans = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            ans += ' ';\n            continue;\n        }\n        int j = i;\n        while(j < len && s[j] != ' ')\n            j++;\n        ans += s[j];\n        i = j-1;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp6koon7xz.d(22): Error: no property `length` for type `string`\n/tmp/tmp6koon7xz.d(28): Error: slice `ans` is not mutable\n/tmp/tmp6koon7xz.d(34): Error: slice `ans` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6koon7xz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < len)\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        j = i;\n        k = i;\n        while (k < len)\n        {\n            if (s[k] == ' ')\n            {\n                k++;\n                continue;\n            }\n            if (s[k] > s[j])\n            {\n                j = k;\n            }\n            k++;\n        }\n        result += s[j];\n        i = j + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpfjrgzpsx.d(23): Error: no property `length` for type `string`\n/tmp/tmpfjrgzpsx.d(49): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjrgzpsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.size(); i++)\n    {\n        if(s[i] != ' ')\n        {\n            res += s[i];\n        }\n        else\n        {\n            for(int j = i+1; j < s.size(); j++)\n            {\n                if(s[j] != ' ')\n                {\n                    res += s[j];\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp5yeozd6a.d(23): Error: no property `size` for type `string`\n/tmp/tmp5yeozd6a.d(27): Error: slice `res` is not mutable\n/tmp/tmp5yeozd6a.d(31): Error: no property `size` for type `string`\n/tmp/tmp5yeozd6a.d(35): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5yeozd6a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpo21tut7t.d(23): Error: no property `length` for type `string`\n/tmp/tmpo21tut7t.d(27): Error: slice `res` is not mutable\n/tmp/tmpo21tut7t.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo21tut7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i];\n        if(s[i] == ' ')\n        {\n            for(int j = i+1; j < s.length(); j++)\n            {\n                if(s[j] > s[i])\n                {\n                    result += s[j];\n                    i = j;\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpzoec35p1.d(23): Error: no property `length` for type `string`\n/tmp/tmpzoec35p1.d(25): Error: slice `result` is not mutable\n/tmp/tmpzoec35p1.d(28): Error: no property `length` for type `string`\n/tmp/tmpzoec35p1.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzoec35p1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpo21tut7t.d(23): Error: no property `length` for type `string`\n/tmp/tmpo21tut7t.d(27): Error: slice `res` is not mutable\n/tmp/tmpo21tut7t.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo21tut7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    int i, j, k;\n    string res = \"\";\n    for (i = 0; i < len; i++)\n    {\n        if (s[i] != ' ')\n        {\n            res += s[i];\n            continue;\n        }\n        for (j = i + 1; j < len; j++)\n        {\n            if (s[j] != ' ')\n            {\n                res += s[j];\n                break;\n            }\n        }\n        for (k = j + 1; k < len; k++)\n        {\n            if (s[k] != ' ')\n            {\n                res += s[k];\n                break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpsgrbymk_.d(22): Error: no property `length` for type `string`\n/tmp/tmpsgrbymk_.d(29): Error: slice `res` is not mutable\n/tmp/tmpsgrbymk_.d(36): Error: slice `res` is not mutable\n/tmp/tmpsgrbymk_.d(44): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgrbymk_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpuc1mv294.d(119): Error: found `unittest` instead of statement\n/tmp/tmpuc1mv294.d(131): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuc1mv294.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j;\n    for(i=0;i<s.length();i++)\n    {\n        for(j=0;j<s.length();j++)\n        {\n            if(s[i]>s[j])\n            {\n                res+=s[i];\n                s[i]=s[j];\n                s[j]=res[i];\n                res[i]=s[j];\n                s[j]=res[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpz3jkioau.d(24): Error: no property `length` for type `string`\n/tmp/tmpz3jkioau.d(26): Error: no property `length` for type `string`\n/tmp/tmpz3jkioau.d(30): Error: slice `res` is not mutable\n/tmp/tmpz3jkioau.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpz3jkioau.d(32): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpz3jkioau.d(33): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\n/tmp/tmpz3jkioau.d(34): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3jkioau.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int c = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        \nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmputtaulr8.d(117): Error: found `unittest` instead of statement\n/tmp/tmputtaulr8.d(129): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmputtaulr8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i];\n        for(int j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                result += s[i];\n                result += s[j];\n                i = j;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpq87zneuu.d(23): Error: no property `length` for type `string`\n/tmp/tmpq87zneuu.d(25): Error: slice `result` is not mutable\n/tmp/tmpq87zneuu.d(26): Error: no property `length` for type `string`\n/tmp/tmpq87zneuu.d(30): Error: slice `result` is not mutable\n/tmp/tmpq87zneuu.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq87zneuu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        j = i;\n        k = i;\n        while(j < len && s[j] != ' ')\n        {\n            j++;\n        }\n        while(k < len && s[k] != ' ')\n        {\n            k++;\n        }\n        if(j == k)\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        string temp = s.substr(i,j-i);\n        sort(temp.begin(),temp.end());\n        res += temp;\n        i = k+1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpat97wm2b.d(23): Error: no property `length` for type `string`\n/tmp/tmpat97wm2b.d(46): Error: slice `res` is not mutable\n/tmp/tmpat97wm2b.d(50): Error: no property `substr` for type `string`\n/tmp/tmpat97wm2b.d(51): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpat97wm2b.d(52): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat97wm2b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result;\n    int i,j;\n    for(i=0,j=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            result+=s[i];\n            continue;\n        }\n        if(s[i]>s[j])\n        {\n            j=i;\n        }\n        result+=s[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpvq6tchpl.d(24): Error: no property `length` for type `string`\n/tmp/tmpvq6tchpl.d(28): Error: slice `result` is not mutable\n/tmp/tmpvq6tchpl.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvq6tchpl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        while(j < len && s[j] != ' ')\n        {\n            res += s[j];\n            j++;\n        }\n        res += s[i];\n        i++;\n        j++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpher7jq__.d(25): Error: no property `length` for type `string`\n/tmp/tmpher7jq__.d(35): Error: slice `res` is not mutable\n/tmp/tmpher7jq__.d(38): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpher7jq__.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            count++;\n            i++;\n        }\n        else\n        {\n            if(count > 0)\n            {\n                res += s[i];\n                count--;\n            }\n            else\n            {\n                res += s[i];\n            }\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpbrghgyxq.d(23): Error: no property `length` for type `string`\n/tmp/tmpbrghgyxq.d(38): Error: slice `res` is not mutable\n/tmp/tmpbrghgyxq.d(43): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbrghgyxq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            result += \" \";\n            i++;\n            continue;\n        }\n        if(s[i] > s[j])\n        {\n            result += s[i];\n            i++;\n            continue;\n        }\n        result += s[j];\n        j++;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmptbx7u6tq.d(25): Error: no property `length` for type `string`\n/tmp/tmptbx7u6tq.d(35): Error: slice `result` is not mutable\n/tmp/tmptbx7u6tq.d(41): Error: slice `result` is not mutable\n/tmp/tmptbx7u6tq.d(45): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbx7u6tq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += \" \";\n            i++;\n            continue;\n        }\n        if(s[i] > s[j])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] < s[j])\n        {\n            res += s[j];\n            j++;\n            continue;\n        }\n        res += s[i];\n        i++;\n        j++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpnxqqed7_.d(25): Error: no property `length` for type `string`\n/tmp/tmpnxqqed7_.d(35): Error: slice `res` is not mutable\n/tmp/tmpnxqqed7_.d(41): Error: slice `res` is not mutable\n/tmp/tmpnxqqed7_.d(47): Error: slice `res` is not mutable\n/tmp/tmpnxqqed7_.d(51): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxqqed7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k,l,m;\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            res.push_back(' ');\n            continue;\n        }\n        for(j=i+1;j<s.length();j++)\n        {\n            if(s[j]==' ')\n            {\n                break;\n            }\n        }\n        for(k=i;k<j;k++)\n        {\n            res.push_back(s[k]);\n        }\n        for(l=j;l<s.length();l++)\n        {\n            res.push_back(s[l]);\n        }\n        i=j;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpw9hs1fbx.d(24): Error: no property `length` for type `string`\n/tmp/tmpw9hs1fbx.d(28): Error: no property `push_back` for type `string`\n/tmp/tmpw9hs1fbx.d(31): Error: no property `length` for type `string`\n/tmp/tmpw9hs1fbx.d(40): Error: no property `push_back` for type `string`\n/tmp/tmpw9hs1fbx.d(42): Error: no property `length` for type `string`\n/tmp/tmpw9hs1fbx.d(44): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9hs1fbx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        int ascii = s[i];\n        for(int j = i+1; j < len; j++)\n        {\n            if(s[j] == ' ')\n            {\n                break;\n            }\n            if(s[j] > ascii)\n            {\n                ascii = s[j];\n            }\n        }\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpuuzvz7_q.d(23): Error: no property `length` for type `string`\n/tmp/tmpuuzvz7_q.d(28): Error: slice `res` is not mutable\n/tmp/tmpuuzvz7_q.d(43): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuuzvz7_q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n            result += (char)(ascii - 32);\n        else if(ascii >= 'A' && ascii <= 'Z')\n            result += (char)(ascii - 32);\n        else if(ascii >= '0' && ascii <= '9')\n            result += (char)(ascii - 48);\n        else\n            result += (char)(ascii);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpusv_qhv2.d(28): Error: C style cast illegal, use `cast(char)(ascii - 32)`\n/tmp/tmpusv_qhv2.d(30): Error: C style cast illegal, use `cast(char)(ascii - 32)`\n/tmp/tmpusv_qhv2.d(32): Error: C style cast illegal, use `cast(char)(ascii - 48)`\n/tmp/tmpusv_qhv2.d(34): Error: C style cast illegal, use `cast(char)ascii`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpusv_qhv2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        j = i;\n        while(j < len && s[j] != ' ')\n        {\n            j++;\n        }\n        result += s[i];\n        if(j < len)\n        {\n            result += s[j];\n            i = j + 1;\n        }\n        else\n        {\n            i = j;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpxs_ots6l.d(25): Error: no property `length` for type `string`\n/tmp/tmpxs_ots6l.d(38): Error: slice `result` is not mutable\n/tmp/tmpxs_ots6l.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxs_ots6l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            j = i + 1;\n            while(j < len && s[j] != ' ')\n            {\n                j++;\n            }\n            if(j == len)\n            {\n                res += s[i];\n                i++;\n                continue;\n            }\n            string temp = s.substr(i, j - i);\n            int temp_len = temp.length();\n            int temp_i = 0;\n            int temp_j = 0;\n            while(temp_i < temp_len)\n            {\n                if(temp[temp_i] >= 'a' && temp[temp_i] <= 'z')\n                {\n                    temp[temp_i] = temp[temp_i] - 'a' + 'A';\n                }\n                temp_i++;\n            }\n            while(temp_j < temp_len)\n            {\n                if(temp[temp_j] >= 'A' && temp[temp_j] <= 'Z')\n                {\n                    temp[temp_j] = temp[temp_j] - 'A' + 'a';\n                }\n                temp_j++;\n            }\n            res += temp;\n            i = j;\n        }\n        else\n        {\n            res += s[i];\n            i++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpobsl4c1v.d(25): Error: no property `length` for type `string`\n/tmp/tmpobsl4c1v.d(42): Error: slice `res` is not mutable\n/tmp/tmpobsl4c1v.d(46): Error: no property `substr` for type `string`\n/tmp/tmpobsl4c1v.d(47): Error: no property `length` for type `string`\n/tmp/tmpobsl4c1v.d(54): Error: cannot modify `immutable` expression `temp[cast(ulong)temp_i]`\n/tmp/tmpobsl4c1v.d(62): Error: cannot modify `immutable` expression `temp[cast(ulong)temp_j]`\n/tmp/tmpobsl4c1v.d(66): Error: slice `res` is not mutable\n/tmp/tmpobsl4c1v.d(71): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpobsl4c1v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        res += s[i];\n        if(s[i] == ' ')\n        {\n            for(int j = i+1; j < s.length(); j++)\n            {\n                if(s[j] >= s[i])\n                {\n                    res += s[j];\n                    i = j;\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmph71857nl.d(23): Error: no property `length` for type `string`\n/tmp/tmph71857nl.d(25): Error: slice `res` is not mutable\n/tmp/tmph71857nl.d(28): Error: no property `length` for type `string`\n/tmp/tmph71857nl.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph71857nl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        if(ascii >= 65 && ascii <= 90)\n        {\n            res += c;\n        }\n        else if(ascii >= 97 && ascii <= 122)\n        {\n            res += c;\n        }\n        else if(ascii >= 48 && ascii <= 57)\n        {\n            res += c;\n        }\n        else if(ascii == 32)\n        {\n            res += \" \";\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpm_xe6lf0.d(23): Error: no property `length` for type `string`\n/tmp/tmpm_xe6lf0.d(30): Error: slice `res` is not mutable\n/tmp/tmpm_xe6lf0.d(34): Error: slice `res` is not mutable\n/tmp/tmpm_xe6lf0.d(38): Error: slice `res` is not mutable\n/tmp/tmpm_xe6lf0.d(42): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_xe6lf0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += \" \";\n            i++;\n            continue;\n        }\n        if(s[i] > s[j])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] < s[j])\n        {\n            res += s[j];\n            j++;\n            continue;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpe99dqaex.d(25): Error: no property `length` for type `string`\n/tmp/tmpe99dqaex.d(35): Error: slice `res` is not mutable\n/tmp/tmpe99dqaex.d(41): Error: slice `res` is not mutable\n/tmp/tmpe99dqaex.d(47): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe99dqaex.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        for(int j = i+1; j < res.length(); j++)\n        {\n            if(res[i] > res[j])\n            {\n                char temp = res[i];\n                res[i] = res[j];\n                res[j] = temp;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpb44q8n01.d(23): Error: no property `length` for type `string`\n/tmp/tmpb44q8n01.d(27): Error: slice `res` is not mutable\n/tmp/tmpb44q8n01.d(31): Error: slice `res` is not mutable\n/tmp/tmpb44q8n01.d(35): Error: no property `length` for type `string`\n/tmp/tmpb44q8n01.d(37): Error: no property `length` for type `string`\n/tmp/tmpb44q8n01.d(42): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\n/tmp/tmpb44q8n01.d(43): Error: cannot modify `immutable` expression `res[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb44q8n01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 65 && ascii <= 90)\n        {\n            result += s[i];\n        }\n        else if(ascii >= 97 && ascii <= 122)\n        {\n            result += s[i];\n        }\n        else if(ascii >= 48 && ascii <= 57)\n        {\n            result += s[i];\n        }\n        else if(ascii == 32)\n        {\n            result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpg9fvtzf8.d(23): Error: no property `length` for type `string`\n/tmp/tmpg9fvtzf8.d(29): Error: slice `result` is not mutable\n/tmp/tmpg9fvtzf8.d(33): Error: slice `result` is not mutable\n/tmp/tmpg9fvtzf8.d(37): Error: slice `result` is not mutable\n/tmp/tmpg9fvtzf8.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg9fvtzf8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(j == len-1)\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] > s[j])\n        {\n            res += s[i];\n            i++;\n        }\n        else\n        {\n            res += s[j];\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp8gwbowmq.d(25): Error: no property `length` for type `string`\n/tmp/tmp8gwbowmq.d(35): Error: slice `res` is not mutable\n/tmp/tmp8gwbowmq.d(41): Error: slice `res` is not mutable\n/tmp/tmp8gwbowmq.d(46): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gwbowmq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i];\n        for(int j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                result += s[j];\n                s[j] = s[i];\n                s[i] = result[result.length()-1];\n                result.erase(result.length()-1);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpxfkn62zw.d(23): Error: no property `length` for type `string`\n/tmp/tmpxfkn62zw.d(25): Error: slice `result` is not mutable\n/tmp/tmpxfkn62zw.d(26): Error: no property `length` for type `string`\n/tmp/tmpxfkn62zw.d(30): Error: slice `result` is not mutable\n/tmp/tmpxfkn62zw.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpxfkn62zw.d(32): Error: no property `length` for type `string`\n/tmp/tmpxfkn62zw.d(33): Error: no property `erase` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfkn62zw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += \" \";\n            i++;\n            continue;\n        }\n        if(s[i] > s[j])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        res += s[j];\n        j++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpicwo3a_3.d(25): Error: no property `length` for type `string`\n/tmp/tmpicwo3a_3.d(35): Error: slice `res` is not mutable\n/tmp/tmpicwo3a_3.d(41): Error: slice `res` is not mutable\n/tmp/tmpicwo3a_3.d(45): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpicwo3a_3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(j == len-1)\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] > s[j])\n        {\n            res += s[i];\n            i++;\n        }\n        else\n        {\n            res += s[j];\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp8gwbowmq.d(25): Error: no property `length` for type `string`\n/tmp/tmp8gwbowmq.d(35): Error: slice `res` is not mutable\n/tmp/tmp8gwbowmq.d(41): Error: slice `res` is not mutable\n/tmp/tmp8gwbowmq.d(46): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gwbowmq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += \" \";\n            i++;\n            continue;\n        }\n        if(s[i] > s[j])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        res += s[j];\n        j++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpicwo3a_3.d(25): Error: no property `length` for type `string`\n/tmp/tmpicwo3a_3.d(35): Error: slice `res` is not mutable\n/tmp/tmpicwo3a_3.d(41): Error: slice `res` is not mutable\n/tmp/tmpicwo3a_3.d(45): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpicwo3a_3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int c = s[i];\n        if(c == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += (char)(c + 1);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpdp907jqs.d(33): Error: C style cast illegal, use `cast(char)(c + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdp907jqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    int i, j, k;\n    string res;\n    for (i = 0; i < len; i++) {\n        for (j = i + 1; j < len; j++) {\n            for (k = j + 1; k < len; k++) {\n                if (s[i] > s[j] && s[i] > s[k]) {\n                    swap(s[i], s[j]);\n                }\n                else if (s[j] > s[k] && s[j] > s[i]) {\n                    swap(s[j], s[k]);\n                }\n                else if (s[k] > s[i] && s[k] > s[j]) {\n                    swap(s[k], s[i]);\n                }\n            }\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmppuegtoy1.d(22): Error: no property `length` for type `string`\n/tmp/tmppuegtoy1.d(29): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\n/tmp/tmppuegtoy1.d(32): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\n/tmp/tmppuegtoy1.d(35): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppuegtoy1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k;\n    for(i=0;i<s.size();i++)\n    {\n        for(j=0;j<s.size();j++)\n        {\n            for(k=0;k<s.size();k++)\n            {\n                if(s[i]<s[j] && s[i]<s[k])\n                {\n                    res+=s[i];\n                    break;\n                }\n                else if(s[j]<s[i] && s[j]<s[k])\n                {\n                    res+=s[j];\n                    break;\n                }\n                else if(s[k]<s[i] && s[k]<s[j])\n                {\n                    res+=s[k];\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp01c63ybe.d(24): Error: no property `size` for type `string`\n/tmp/tmp01c63ybe.d(26): Error: no property `size` for type `string`\n/tmp/tmp01c63ybe.d(28): Error: no property `size` for type `string`\n/tmp/tmp01c63ybe.d(32): Error: slice `res` is not mutable\n/tmp/tmp01c63ybe.d(37): Error: slice `res` is not mutable\n/tmp/tmp01c63ybe.d(42): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01c63ybe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii_value = s[i];\n        if(ascii_value == ' ')\n        {\n            result += \" \";\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpm5x_dqk0.d(23): Error: no property `length` for type `string`\n/tmp/tmpm5x_dqk0.d(29): Error: slice `result` is not mutable\n/tmp/tmpm5x_dqk0.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm5x_dqk0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n        {\n            result += (char)(ascii - 32);\n        }\n        else if(ascii >= 'A' && ascii <= 'Z')\n        {\n            result += (char)(ascii + 32);\n        }\n        else if(ascii >= '0' && ascii <= '9')\n        {\n            result += (char)(ascii + 48);\n        }\n        else\n        {\n            result += (char)(ascii);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpq8a1aab9.d(29): Error: C style cast illegal, use `cast(char)(ascii - 32)`\n/tmp/tmpq8a1aab9.d(33): Error: C style cast illegal, use `cast(char)(ascii + 32)`\n/tmp/tmpq8a1aab9.d(37): Error: C style cast illegal, use `cast(char)(ascii + 48)`\n/tmp/tmpq8a1aab9.d(41): Error: C style cast illegal, use `cast(char)ascii`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq8a1aab9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpuwc5i3js.d(23): Error: no property `length` for type `string`\n/tmp/tmpuwc5i3js.d(27): Error: slice `result` is not mutable\n/tmp/tmpuwc5i3js.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwc5i3js.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(i == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i] > s[i+1])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        while(s[i] < s[i+1])\n        {\n            res += s[i];\n            i++;\n        }\n        res += s[i];\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp_p7gskz3.d(25): Error: no property `length` for type `string`\n/tmp/tmp_p7gskz3.d(35): Error: slice `res` is not mutable\n/tmp/tmp_p7gskz3.d(40): Error: slice `res` is not mutable\n/tmp/tmp_p7gskz3.d(46): Error: slice `res` is not mutable\n/tmp/tmp_p7gskz3.d(49): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_p7gskz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int c = s[i];\n        if(c == ' ')\n            res += ' ';\n        else\n        {\n            int j = i;\n            while(j < len && s[j] > c)\n                j++;\n            if(j < len)\n                res += s[j];\n            else\n                res += c;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmplktp1jlg.d(23): Error: no property `length` for type `string`\n/tmp/tmplktp1jlg.d(28): Error: slice `res` is not mutable\n/tmp/tmplktp1jlg.d(35): Error: slice `res` is not mutable\n/tmp/tmplktp1jlg.d(37): Error: incompatible types for `(res) += (c)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplktp1jlg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        int ascii = s[i];\n        while(j < len)\n        {\n            if(s[j] == ' ')\n            {\n                j++;\n                continue;\n            }\n            if(ascii < s[j])\n            {\n                ascii = s[j];\n            }\n            j++;\n        }\n        res += ascii;\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpvoxjrz0h.d(23): Error: no property `length` for type `string`\n/tmp/tmpvoxjrz0h.d(47): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvoxjrz0h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    int i, j, k, c;\n    string res;\n    for (i = 0; i < len; i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        for (j = i + 1; j < len; j++)\n        {\n            if (s[j] == ' ')\n                break;\n            c = s[i] - s[j];\n            if (c < 0)\n                c = 256 + c;\n            if (c > 255)\n                c = c - 256;\n            if (c < s[i])\n            {\n                s[i] = c;\n                s[j] = ' ';\n                break;\n            }\n        }\n    }\n    for (i = 0; i < len; i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        for (j = i + 1; j < len; j++)\n        {\n            if (s[j] == ' ')\n                break;\n            c = s[i] - s[j];\n            if (c < 0)\n                c = 256 + c;\n            if (c > 255)\n                c = c - 256;\n            if (c > s[i])\n            {\n                s[i] = c;\n                s[j] = ' ';\n                break;\n            }\n        }\n    }\n    for (i = 0; i < len; i++)\n    {\n        if (s[i] == ' ')\n            continue;\n        for (j = i + 1; j < len; j++)\n        {\n            if (s[j] == ' ')\n                break;\n            c = s[i] - s[j];\n            if (c < 0)\n                c = 256 + c;\n            if (c > 255)\n                c = c - 256;\n            if (c < s[i])\n            {\n                s[i] = c;\n                s[j] = ' ';\n                break;\n            }\n        }\n    }\n    for (i = 0; i < len;\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpasmixyoz.d(89): Error: expression expected, not `unittest`\n/tmp/tmpasmixyoz.d(90): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasmixyoz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(i == len-1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i+1] == ' ')\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] > s[i+1])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        else\n        {\n            res += s[i+1];\n            i++;\n            j++;\n            continue;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpwdcb8n8a.d(25): Error: no property `length` for type `string`\n/tmp/tmpwdcb8n8a.d(35): Error: slice `res` is not mutable\n/tmp/tmpwdcb8n8a.d(40): Error: slice `res` is not mutable\n/tmp/tmpwdcb8n8a.d(46): Error: slice `res` is not mutable\n/tmp/tmpwdcb8n8a.d(52): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdcb8n8a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    string ans = \"\";\n    for (int i = 0; i < len; i++)\n    {\n        if (s[i] == ' ')\n        {\n            ans += ' ';\n        }\n        else\n        {\n            ans += s[i];\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp1ry00pzt.d(22): Error: no property `length` for type `string`\n/tmp/tmp1ry00pzt.d(28): Error: slice `ans` is not mutable\n/tmp/tmp1ry00pzt.d(32): Error: slice `ans` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ry00pzt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += \" \";\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp349lwwt_.d(23): Error: no property `length` for type `string`\n/tmp/tmp349lwwt_.d(28): Error: slice `res` is not mutable\n/tmp/tmp349lwwt_.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp349lwwt_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i];\n        for(int j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                result += s[i];\n                s[i] = s[j];\n                s[j] = result[result.length()-1];\n                result = result.substr(0, result.length()-1);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp5fdhu7vk.d(23): Error: no property `length` for type `string`\n/tmp/tmp5fdhu7vk.d(25): Error: slice `result` is not mutable\n/tmp/tmp5fdhu7vk.d(26): Error: no property `length` for type `string`\n/tmp/tmp5fdhu7vk.d(30): Error: slice `result` is not mutable\n/tmp/tmp5fdhu7vk.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmp5fdhu7vk.d(32): Error: no property `length` for type `string`\n/tmp/tmp5fdhu7vk.d(33): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5fdhu7vk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i, j, k, l;\n    for(i = 0; i < s.length(); i++)\n    {\n        for(j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                k = s[i];\n                s[i] = s[j];\n                s[j] = k;\n            }\n        }\n    }\n    for(i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            for(j = i+1; j < s.length(); j++)\n            {\n                if(s[j] != ' ')\n                {\n                    k = s[i];\n                    s[i] = s[j];\n                    s[j] = k;\n                    break;\n                }\n            }\n        }\n    }\n    for(i = 0; i < s.length(); i++)\n    {\n        for(j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                k = s[i];\n                s[i] = s[j];\n                s[j] = k;\n            }\n        }\n    }\n    for(i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            for(j = i+1; j < s.length(); j++)\n            {\n                if(s[j] != ' ')\n                {\n                    k = s[i];\n                    s[i] = s[j];\n                    s[j] = k;\n                    break;\n                }\n            }\n        }\n    }\n    for(i = 0; i < s.length(); i++)\n    {\n        for(j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                k = s[i];\n                s[i] = s[j];\n                s[j]\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmplql2ogvg.d(89): Error: found `unittest` when expecting `;` following statement\n/tmp/tmplql2ogvg.d(101): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmplql2ogvg.d(101): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmplql2ogvg.d(101): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmplql2ogvg.d(101): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplql2ogvg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.size(); i++)\n    {\n        res += s[i];\n        for(int j = i+1; j < s.size(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                res += s[j];\n                s[j] = s[i];\n                s[i] = res[res.size()-1];\n                res[res.size()-1] = s[j];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpdss6wu7g.d(23): Error: no property `size` for type `string`\n/tmp/tmpdss6wu7g.d(25): Error: slice `res` is not mutable\n/tmp/tmpdss6wu7g.d(26): Error: no property `size` for type `string`\n/tmp/tmpdss6wu7g.d(30): Error: slice `res` is not mutable\n/tmp/tmpdss6wu7g.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpdss6wu7g.d(32): Error: no property `size` for type `string`\n/tmp/tmpdss6wu7g.d(33): Error: no property `size` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdss6wu7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    string res = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        int j = i;\n        while(j < len && ascii <= s[j])\n        {\n            j++;\n        }\n        if(j == len)\n        {\n            res += c;\n        }\n        else\n        {\n            res += s[j];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpzny2fkcc.d(22): Error: no property `length` for type `string`\n/tmp/tmpzny2fkcc.d(35): Error: slice `res` is not mutable\n/tmp/tmpzny2fkcc.d(39): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzny2fkcc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += \" \";\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    \n    for(int i = 0; i < res.length(); i++)\n    {\n        for(int j = i+1; j < res.length(); j++)\n        {\n            if(res[i] > res[j])\n            {\n                char temp = res[i];\n                res[i] = res[j];\n                res[j] = temp;\n            }\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmppaxtsoiv.d(23): Error: no property `length` for type `string`\n/tmp/tmppaxtsoiv.d(27): Error: slice `res` is not mutable\n/tmp/tmppaxtsoiv.d(31): Error: slice `res` is not mutable\n/tmp/tmppaxtsoiv.d(35): Error: no property `length` for type `string`\n/tmp/tmppaxtsoiv.d(37): Error: no property `length` for type `string`\n/tmp/tmppaxtsoiv.d(42): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\n/tmp/tmppaxtsoiv.d(43): Error: cannot modify `immutable` expression `res[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppaxtsoiv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 65 && ascii <= 90)\n            result += s[i];\n        else if(ascii >= 97 && ascii <= 122)\n            result += s[i];\n        else if(ascii >= 48 && ascii <= 57)\n            result += s[i];\n        else\n            result += \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp9cd6oonq.d(23): Error: no property `length` for type `string`\n/tmp/tmp9cd6oonq.d(27): Error: slice `result` is not mutable\n/tmp/tmp9cd6oonq.d(29): Error: slice `result` is not mutable\n/tmp/tmp9cd6oonq.d(31): Error: slice `result` is not mutable\n/tmp/tmp9cd6oonq.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9cd6oonq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k;\n    for(i=0;i<s.length();i++)\n    {\n        for(j=i+1;j<s.length();j++)\n        {\n            for(k=j+1;k<s.length();k++)\n            {\n                if(s[i]>s[j] && s[i]>s[k])\n                {\n                    res+=s[i];\n                    s[i]=s[j];\n                    s[j]=s[k];\n                    s[k]=res[res.length()-1];\n                    res.erase(res.length()-1);\n                }\n                else if(s[j]>s[k] && s[j]>s[i])\n                {\n                    res+=s[j];\n                    s[j]=s[k];\n                    s[k]=s[i];\n                    s[i]=res[res.length()-1];\n                    res.erase(res.length()-1);\n                }\n                else if(s[k]>s[i] && s[k]>s[j])\n                {\n                    res+=s[k];\n                    s[k]=s[i];\n                    s[i]=s[j];\n                    s[j]=res[res.length()-1];\n                    res.erase(res.length()-1);\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpx7rpb0zs.d(24): Error: no property `length` for type `string`\n/tmp/tmpx7rpb0zs.d(26): Error: no property `length` for type `string`\n/tmp/tmpx7rpb0zs.d(28): Error: no property `length` for type `string`\n/tmp/tmpx7rpb0zs.d(32): Error: slice `res` is not mutable\n/tmp/tmpx7rpb0zs.d(33): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpx7rpb0zs.d(34): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpx7rpb0zs.d(35): Error: no property `length` for type `string`\n/tmp/tmpx7rpb0zs.d(36): Error: no property `erase` for type `string`\n/tmp/tmpx7rpb0zs.d(40): Error: slice `res` is not mutable\n/tmp/tmpx7rpb0zs.d(41): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpx7rpb0zs.d(42): Error: cannot modify `immutable` expression `s[cast(ulong)k]`\n/tmp/tmpx7rpb0zs.d(43): Error: no property `length` for type `string`\n/tmp/tmpx7rpb0zs.d(44): Error: no property `erase` for type `string`\n/tmp/tmpx7rpb0zs.d(48): Error: slice `res` is not mutable\n/tmp/tmpx7rpb0zs.d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        if(ascii >= 65 && ascii <= 90)\n        {\n            result += c;\n        }\n        else if(ascii >= 97 && ascii <= 122)\n        {\n            result += c;\n        }\n        else if(ascii >= 48 && ascii <= 57)\n        {\n            result += c;\n        }\n        else if(ascii == 32)\n        {\n            result += \" \";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmph8qvgfll.d(23): Error: no property `length` for type `string`\n/tmp/tmph8qvgfll.d(29): Error: slice `result` is not mutable\n/tmp/tmph8qvgfll.d(33): Error: slice `result` is not mutable\n/tmp/tmph8qvgfll.d(37): Error: slice `result` is not mutable\n/tmp/tmph8qvgfll.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph8qvgfll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        for(int j = 0; j < len; j++)\n        {\n            if(s[i] > s[j])\n            {\n                res[i] = s[j];\n                res[j] = s[i];\n            }\n        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpbka7eao7.d(23): Error: no property `length` for type `string`\n/tmp/tmpbka7eao7.d(28): Error: slice `res` is not mutable\n/tmp/tmpbka7eao7.d(32): Error: slice `res` is not mutable\n/tmp/tmpbka7eao7.d(42): Error: cannot modify `immutable` expression `res[cast(ulong)i]`\n/tmp/tmpbka7eao7.d(43): Error: cannot modify `immutable` expression `res[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbka7eao7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.size(); i++)\n    {\n        res += s[i];\n        for(int j = i+1; j < s.size(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                res += s[i];\n                s[i] = s[j];\n                s[j] = res[res.size()-1];\n                res[res.size()-1] = s[i];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpp0p0az0b.d(23): Error: no property `size` for type `string`\n/tmp/tmpp0p0az0b.d(25): Error: slice `res` is not mutable\n/tmp/tmpp0p0az0b.d(26): Error: no property `size` for type `string`\n/tmp/tmpp0p0az0b.d(30): Error: slice `res` is not mutable\n/tmp/tmpp0p0az0b.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpp0p0az0b.d(32): Error: no property `size` for type `string`\n/tmp/tmpp0p0az0b.d(33): Error: no property `size` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0p0az0b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    string result = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] != ' ')\n        {\n            result += s[i];\n        }\n        else\n        {\n            result += s[i];\n            for(int j = i + 1; j < len; j++)\n            {\n                if(s[j] > s[i])\n                {\n                    result += s[j];\n                    i = j;\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpe8m0qh08.d(22): Error: no property `length` for type `string`\n/tmp/tmpe8m0qh08.d(28): Error: slice `result` is not mutable\n/tmp/tmpe8m0qh08.d(32): Error: slice `result` is not mutable\n/tmp/tmpe8m0qh08.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8m0qh08.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n        {\n            result += (char)(ascii - 32);\n        }\n        else if(ascii >= 'A' && ascii <= 'Z')\n        {\n            result += (char)(ascii + 32);\n        }\n        else if(ascii >= '0' && ascii <= '9')\n        {\n            result += (char)(ascii + 48);\n        }\n        else if(ascii == ' ')\n        {\n            result += ' ';\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmprrbdsa_c.d(29): Error: C style cast illegal, use `cast(char)(ascii - 32)`\n/tmp/tmprrbdsa_c.d(33): Error: C style cast illegal, use `cast(char)(ascii + 32)`\n/tmp/tmprrbdsa_c.d(37): Error: C style cast illegal, use `cast(char)(ascii + 48)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrbdsa_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        if(ascii >= 65 && ascii <= 90)\n        {\n            res += c;\n        }\n        else if(ascii >= 97 && ascii <= 122)\n        {\n            res += c;\n        }\n        else if(ascii >= 48 && ascii <= 57)\n        {\n            res += c;\n        }\n        else if(ascii == 32)\n        {\n            res += \" \";\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpilgw2jag.d(23): Error: no property `length` for type `string`\n/tmp/tmpilgw2jag.d(29): Error: slice `res` is not mutable\n/tmp/tmpilgw2jag.d(33): Error: slice `res` is not mutable\n/tmp/tmpilgw2jag.d(37): Error: slice `res` is not mutable\n/tmp/tmpilgw2jag.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilgw2jag.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i];\n        for(int j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                result += s[i];\n                s[i] = s[j];\n                s[j] = result[result.length()-1];\n                result = result.substr(0, result.length()-1);\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp5fdhu7vk.d(23): Error: no property `length` for type `string`\n/tmp/tmp5fdhu7vk.d(25): Error: slice `result` is not mutable\n/tmp/tmp5fdhu7vk.d(26): Error: no property `length` for type `string`\n/tmp/tmp5fdhu7vk.d(30): Error: slice `result` is not mutable\n/tmp/tmp5fdhu7vk.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmp5fdhu7vk.d(32): Error: no property `length` for type `string`\n/tmp/tmp5fdhu7vk.d(33): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5fdhu7vk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int c = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        c = s[i];\n        while(j < len)\n        {\n            if(s[j] == ' ')\n            {\n                j++;\n                continue;\n            }\n            if(s[j] > c)\n            {\n                c = s[j];\n                k = j;\n            }\n            j++;\n        }\n        res += s[k];\n        i++;\n        j = i;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpwfc97_hz.d(23): Error: no property `length` for type `string`\n/tmp/tmpwfc97_hz.d(50): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwfc97_hz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k;\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            for(j=i+1;j<s.length();j++)\n            {\n                if(s[j]!=' ')\n                {\n                    res+=s[j];\n                    break;\n                }\n            }\n            for(k=j+1;k<s.length();k++)\n            {\n                if(s[k]!=' ')\n                {\n                    res+=s[k];\n                    break;\n                }\n            }\n            i=j;\n        }\n        else\n        {\n            res+=s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpuh11gujf.d(24): Error: no property `length` for type `string`\n/tmp/tmpuh11gujf.d(28): Error: no property `length` for type `string`\n/tmp/tmpuh11gujf.d(32): Error: slice `res` is not mutable\n/tmp/tmpuh11gujf.d(36): Error: no property `length` for type `string`\n/tmp/tmpuh11gujf.d(40): Error: slice `res` is not mutable\n/tmp/tmpuh11gujf.d(48): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuh11gujf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        if(ascii >= 65 && ascii <= 90)\n        {\n            res += c;\n            for(int j = i + 1; j < len; j++)\n            {\n                char c1 = s[j];\n                int ascii1 = c1;\n                if(ascii1 >= 65 && ascii1 <= 90)\n                {\n                    if(ascii1 < ascii)\n                    {\n                        res += c1;\n                        i = j - 1;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpkdkfnpsd.d(23): Error: no property `length` for type `string`\n/tmp/tmpkdkfnpsd.d(30): Error: slice `res` is not mutable\n/tmp/tmpkdkfnpsd.d(39): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdkfnpsd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n            ascii = ascii - 'a' + 'A';\n        else if(ascii >= 'A' && ascii <= 'Z')\n            ascii = ascii - 'A' + 'a';\n        else if(ascii >= '0' && ascii <= '9')\n            ascii = ascii - '0' + '9';\n        else\n            continue;\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpc3whghyc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc3whghyc.d(35): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc3whghyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpuwc5i3js.d(23): Error: no property `length` for type `string`\n/tmp/tmpuwc5i3js.d(27): Error: slice `result` is not mutable\n/tmp/tmpuwc5i3js.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwc5i3js.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    int count = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            count++;\n            i++;\n            continue;\n        }\n        if(count > 0)\n        {\n            count--;\n            result += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] > s[j])\n        {\n            result += s[i];\n            i++;\n            continue;\n        }\n        result += s[j];\n        j++;\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpc5_i0xzz.d(25): Error: no property `length` for type `string`\n/tmp/tmpc5_i0xzz.d(38): Error: slice `result` is not mutable\n/tmp/tmpc5_i0xzz.d(44): Error: slice `result` is not mutable\n/tmp/tmpc5_i0xzz.d(48): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc5_i0xzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 'a' && ascii <= 'z')\n        {\n            res += (char)(ascii - 32);\n        }\n        else if(ascii >= 'A' && ascii <= 'Z')\n        {\n            res += (char)(ascii + 32);\n        }\n        else if(ascii >= '0' && ascii <= '9')\n        {\n            res += (char)(ascii + 32);\n        }\n        else\n        {\n            res += (char)(ascii);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpc2r43422.d(29): Error: C style cast illegal, use `cast(char)(ascii - 32)`\n/tmp/tmpc2r43422.d(33): Error: C style cast illegal, use `cast(char)(ascii + 32)`\n/tmp/tmpc2r43422.d(37): Error: C style cast illegal, use `cast(char)(ascii + 32)`\n/tmp/tmpc2r43422.d(41): Error: C style cast illegal, use `cast(char)ascii`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2r43422.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(j == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i] > s[j])\n        {\n            res += s[i];\n            i++;\n        }\n        else\n        {\n            res += s[j];\n            j++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp6te69jsp.d(25): Error: no property `length` for type `string`\n/tmp/tmp6te69jsp.d(35): Error: slice `res` is not mutable\n/tmp/tmp6te69jsp.d(40): Error: slice `res` is not mutable\n/tmp/tmp6te69jsp.d(45): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6te69jsp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        if(ascii >= 65 && ascii <= 90)\n        {\n            res += c;\n        }\n        else if(ascii >= 97 && ascii <= 122)\n        {\n            res += c;\n        }\n        else if(ascii >= 48 && ascii <= 57)\n        {\n            res += c;\n        }\n        else if(ascii == 32)\n        {\n            res += \" \";\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp5m3r03l1.d(23): Error: no property `length` for type `string`\n/tmp/tmp5m3r03l1.d(29): Error: slice `res` is not mutable\n/tmp/tmp5m3r03l1.d(33): Error: slice `res` is not mutable\n/tmp/tmp5m3r03l1.d(37): Error: slice `res` is not mutable\n/tmp/tmp5m3r03l1.d(41): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5m3r03l1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int i,j,k;\n    string result;\n    for(i=0;i<s.length();i++)\n    {\n        for(j=i+1;j<s.length();j++)\n        {\n            for(k=j+1;k<s.length();k++)\n            {\n                if(s[i]>s[j] && s[i]>s[k])\n                {\n                    result.push_back(s[i]);\n                    result.push_back(s[j]);\n                    result.push_back(s[k]);\n                    break;\n                }\n                else if(s[j]>s[i] && s[j]>s[k])\n                {\n                    result.push_back(s[j]);\n                    result.push_back(s[i]);\n                    result.push_back(s[k]);\n                    break;\n                }\n                else if(s[k]>s[i] && s[k]>s[j])\n                {\n                    result.push_back(s[k]);\n                    result.push_back(s[i]);\n                    result.push_back(s[j]);\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpe13u2id1.d(24): Error: no property `length` for type `string`\n/tmp/tmpe13u2id1.d(26): Error: no property `length` for type `string`\n/tmp/tmpe13u2id1.d(28): Error: no property `length` for type `string`\n/tmp/tmpe13u2id1.d(32): Error: no property `push_back` for type `string`\n/tmp/tmpe13u2id1.d(33): Error: no property `push_back` for type `string`\n/tmp/tmpe13u2id1.d(34): Error: no property `push_back` for type `string`\n/tmp/tmpe13u2id1.d(39): Error: no property `push_back` for type `string`\n/tmp/tmpe13u2id1.d(40): Error: no property `push_back` for type `string`\n/tmp/tmpe13u2id1.d(41): Error: no property `push_back` for type `string`\n/tmp/tmpe13u2id1.d(46): Error: no property `push_back` for type `string`\n/tmp/tmpe13u2id1.d(47): Error: no property `push_back` for type `string`\n/tmp/tmpe13u2id1.d(48): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe13u2id1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k;\n    for(i=0;i<s.length();i++)\n    {\n        for(j=i+1;j<s.length();j++)\n        {\n            for(k=j+1;k<s.length();k++)\n            {\n                if(s[i]>s[j] && s[i]>s[k])\n                {\n                    res+=s[i];\n                    s[i]=s[j];\n                    s[j]=s[k];\n                    s[k]=res[res.length()-1];\n                    res=res.substr(0,res.length()-1);\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp15brgcjs.d(24): Error: no property `length` for type `string`\n/tmp/tmp15brgcjs.d(26): Error: no property `length` for type `string`\n/tmp/tmp15brgcjs.d(28): Error: no property `length` for type `string`\n/tmp/tmp15brgcjs.d(32): Error: slice `res` is not mutable\n/tmp/tmp15brgcjs.d(33): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmp15brgcjs.d(34): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmp15brgcjs.d(35): Error: no property `length` for type `string`\n/tmp/tmp15brgcjs.d(36): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15brgcjs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k,l;\n    for(i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n        {\n            for(j=i+1;j<s.length();j++)\n            {\n                if(s[j]!=' ')\n                {\n                    res+=s[j];\n                    break;\n                }\n            }\n            for(k=j+1;k<s.length();k++)\n            {\n                if(s[k]!=' ')\n                {\n                    res+=s[k];\n                    break;\n                }\n            }\n            for(l=k+1;l<s.length();l++)\n            {\n                if(s[l]!=' ')\n                {\n                    res+=s[l];\n                    break;\n                }\n            }\n            i=j;\n        }\n        else\n        {\n            res+=s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmprlxyd76x.d(24): Error: no property `length` for type `string`\n/tmp/tmprlxyd76x.d(28): Error: no property `length` for type `string`\n/tmp/tmprlxyd76x.d(32): Error: slice `res` is not mutable\n/tmp/tmprlxyd76x.d(36): Error: no property `length` for type `string`\n/tmp/tmprlxyd76x.d(40): Error: slice `res` is not mutable\n/tmp/tmprlxyd76x.d(44): Error: no property `length` for type `string`\n/tmp/tmprlxyd76x.d(48): Error: slice `res` is not mutable\n/tmp/tmprlxyd76x.d(56): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprlxyd76x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int c = s[i];\n        if(c == ' ')\n        {\n            res += ' ';\n        }\n        else\n        {\n            res += (char)(c + 1);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpllqanp43.d(33): Error: C style cast illegal, use `cast(char)(c + 1)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpllqanp43.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            continue;\n        }\n        int ascii = s[i];\n        for(int j = i+1; j < len; j++)\n        {\n            if(s[j] == ' ')\n            {\n                break;\n            }\n            if(ascii > s[j])\n            {\n                ascii = s[j];\n            }\n        }\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp42hq_uxz.d(23): Error: no property `length` for type `string`\n/tmp/tmp42hq_uxz.d(28): Error: slice `res` is not mutable\n/tmp/tmp42hq_uxz.d(43): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42hq_uxz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        int j = i;\n        while(j < len)\n        {\n            char d = s[j];\n            int ascii_d = d;\n            if(ascii > ascii_d)\n            {\n                c = d;\n                ascii = ascii_d;\n                j = i;\n            }\n            else\n            {\n                break;\n            }\n        }\n        res += c;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpp_fz5g0a.d(23): Error: no property `length` for type `string`\n/tmp/tmpp_fz5g0a.d(44): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_fz5g0a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpphqgpn_h.d(23): Error: no property `length` for type `string`\n/tmp/tmpphqgpn_h.d(28): Error: slice `result` is not mutable\n/tmp/tmpphqgpn_h.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpphqgpn_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        res += s[i];\n        for(int j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                res += s[j];\n                s[j] = s[i];\n                s[i] = res[res.length()-1];\n                res[res.length()-1] = s[j];\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpfvbi78gp.d(23): Error: no property `length` for type `string`\n/tmp/tmpfvbi78gp.d(25): Error: slice `res` is not mutable\n/tmp/tmpfvbi78gp.d(26): Error: no property `length` for type `string`\n/tmp/tmpfvbi78gp.d(30): Error: slice `res` is not mutable\n/tmp/tmpfvbi78gp.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpfvbi78gp.d(32): Error: no property `length` for type `string`\n/tmp/tmpfvbi78gp.d(33): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfvbi78gp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while (i < len)\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (s[i] == ' ')\n        {\n            result += s[i];\n            i++;\n            continue;\n        }\n        if (s[i] > s[j])\n        {\n            result += s[i];\n            i++;\n            continue;\n        }\n        result += s[j];\n        j++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp2yqom1x9.d(25): Error: no property `length` for type `string`\n/tmp/tmp2yqom1x9.d(35): Error: slice `result` is not mutable\n/tmp/tmp2yqom1x9.d(41): Error: slice `result` is not mutable\n/tmp/tmp2yqom1x9.d(45): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2yqom1x9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += \" \";\n            continue;\n        }\n        int ascii = s[i];\n        int j = i;\n        while(j < len && s[j] != ' ')\n        {\n            ascii = ascii > s[j] ? ascii : s[j];\n            j++;\n        }\n        res += ascii;\n        i = j - 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp0__5n0fe.d(23): Error: no property `length` for type `string`\n/tmp/tmp0__5n0fe.d(28): Error: slice `res` is not mutable\n/tmp/tmp0__5n0fe.d(38): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0__5n0fe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp8etuf21e.d(95): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8etuf21e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(i == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if(s[i] > s[i+1])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        if(s[i] < s[i+1])\n        {\n            res += s[i+1];\n            i++;\n            continue;\n        }\n        while(i < len - 1 && s[i] == s[i+1])\n        {\n            i++;\n        }\n        res += s[i];\n        i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpf06476vv.d(25): Error: no property `length` for type `string`\n/tmp/tmpf06476vv.d(35): Error: slice `res` is not mutable\n/tmp/tmpf06476vv.d(40): Error: slice `res` is not mutable\n/tmp/tmpf06476vv.d(46): Error: slice `res` is not mutable\n/tmp/tmpf06476vv.d(54): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf06476vv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        res += s[i];\n        if(s[i] == ' ')\n        {\n            for(int j = i + 1; j < s.length(); j++)\n            {\n                if(s[j] > s[i])\n                {\n                    res += s[j];\n                    i = j;\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpp6t5q11d.d(23): Error: no property `length` for type `string`\n/tmp/tmpp6t5q11d.d(25): Error: slice `res` is not mutable\n/tmp/tmpp6t5q11d.d(28): Error: no property `length` for type `string`\n/tmp/tmpp6t5q11d.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6t5q11d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j;\n    for(i=0;i<s.length();i++)\n    {\n        for(j=0;j<s.length();j++)\n        {\n            if(s[i]>s[j])\n            {\n                res+=s[i];\n                break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp79bxhqjl.d(24): Error: no property `length` for type `string`\n/tmp/tmp79bxhqjl.d(26): Error: no property `length` for type `string`\n/tmp/tmp79bxhqjl.d(30): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp79bxhqjl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        res += s[i];\n        for(int j = i + 1; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            if(s[i] > s[j])\n            {\n                res += s[j];\n                s[j] = ' ';\n            }\n            else\n            {\n                res += s[i];\n                s[i] = ' ';\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmppdl0k63z.d(23): Error: no property `length` for type `string`\n/tmp/tmppdl0k63z.d(27): Error: slice `res` is not mutable\n/tmp/tmppdl0k63z.d(28): Error: no property `length` for type `string`\n/tmp/tmppdl0k63z.d(34): Error: slice `res` is not mutable\n/tmp/tmppdl0k63z.d(35): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmppdl0k63z.d(39): Error: slice `res` is not mutable\n/tmp/tmppdl0k63z.d(40): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppdl0k63z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result;\n    int i, j, k, l;\n    for (i = 0; i < s.length(); i++) {\n        result += s[i];\n    }\n    for (i = 0; i < s.length(); i++) {\n        for (j = i + 1; j < s.length(); j++) {\n            for (k = j + 1; k < s.length(); k++) {\n                for (l = k + 1; l < s.length(); l++) {\n                    if (s[i] > s[j] && s[i] > s[k] && s[i] > s[l]) {\n                        result[i] = s[i];\n                        result[j] = s[j];\n                        result[k] = s[k];\n                        result[l] = s[l];\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp9gq00t6d.d(24): Error: no property `length` for type `string`\n/tmp/tmp9gq00t6d.d(25): Error: slice `result` is not mutable\n/tmp/tmp9gq00t6d.d(27): Error: no property `length` for type `string`\n/tmp/tmp9gq00t6d.d(28): Error: no property `length` for type `string`\n/tmp/tmp9gq00t6d.d(29): Error: no property `length` for type `string`\n/tmp/tmp9gq00t6d.d(30): Error: no property `length` for type `string`\n/tmp/tmp9gq00t6d.d(32): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp9gq00t6d.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\n/tmp/tmp9gq00t6d.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)k]`\n/tmp/tmp9gq00t6d.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)l]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gq00t6d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string ans = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        int ascii = s[i];\n        int j = i;\n        while(j < len && s[j] != ' ')\n        {\n            if(s[j] > ascii)\n                break;\n            j++;\n        }\n        ans += s[i];\n        for(int k = i; k < j; k++)\n            ans += s[k];\n        i = j - 1;\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp0pr0xu3c.d(23): Error: no property `length` for type `string`\n/tmp/tmp0pr0xu3c.d(36): Error: slice `ans` is not mutable\n/tmp/tmp0pr0xu3c.d(38): Error: slice `ans` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pr0xu3c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        res += s[i];\n        if(s[i] == ' ')\n        {\n            for(int j = i+1; j < s.length(); j++)\n            {\n                if(s[j] > s[i])\n                {\n                    res += s[j];\n                    i = j;\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpj_gup2d0.d(23): Error: no property `length` for type `string`\n/tmp/tmpj_gup2d0.d(25): Error: slice `res` is not mutable\n/tmp/tmpj_gup2d0.d(28): Error: no property `length` for type `string`\n/tmp/tmpj_gup2d0.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_gup2d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] != ' ')\n        {\n            res += s[i];\n        }\n        else\n        {\n            for(int j = i+1; j < s.length(); j++)\n            {\n                if(s[j] > s[i])\n                {\n                    res += s[j];\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpyse8t9jb.d(23): Error: no property `length` for type `string`\n/tmp/tmpyse8t9jb.d(27): Error: slice `res` is not mutable\n/tmp/tmpyse8t9jb.d(31): Error: no property `length` for type `string`\n/tmp/tmpyse8t9jb.d(35): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyse8t9jb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            result += ' ';\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpuwc5i3js.d(23): Error: no property `length` for type `string`\n/tmp/tmpuwc5i3js.d(27): Error: slice `result` is not mutable\n/tmp/tmpuwc5i3js.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwc5i3js.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int ascii = c;\n        if(ascii >= 65 && ascii <= 90)\n            ascii += 32;\n        else if(ascii >= 97 && ascii <= 122)\n            ascii -= 32;\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpl9gp2rer.d(23): Error: no property `length` for type `string`\n/tmp/tmpl9gp2rer.d(32): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl9gp2rer.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            res += \" \";\n        }\n        else\n        {\n            res += s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmp0qhmf3gs.d(23): Error: no property `length` for type `string`\n/tmp/tmp0qhmf3gs.d(27): Error: slice `res` is not mutable\n/tmp/tmp0qhmf3gs.d(31): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0qhmf3gs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            result += \" \";\n            i++;\n            continue;\n        }\n        if(s[i] > s[j])\n        {\n            result += s[i];\n            i++;\n            continue;\n        }\n        result += s[j];\n        j++;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmptbx7u6tq.d(25): Error: no property `length` for type `string`\n/tmp/tmptbx7u6tq.d(35): Error: slice `result` is not mutable\n/tmp/tmptbx7u6tq.d(41): Error: slice `result` is not mutable\n/tmp/tmptbx7u6tq.d(45): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbx7u6tq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 65 && ascii <= 90)\n        {\n            res += s[i];\n        }\n        else if(ascii >= 97 && ascii <= 122)\n        {\n            res += s[i];\n        }\n        else if(ascii >= 48 && ascii <= 57)\n        {\n            res += s[i];\n        }\n        else if(ascii == 32)\n        {\n            res += \" \";\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpsmuop0hw.d(23): Error: no property `length` for type `string`\n/tmp/tmpsmuop0hw.d(28): Error: slice `res` is not mutable\n/tmp/tmpsmuop0hw.d(32): Error: slice `res` is not mutable\n/tmp/tmpsmuop0hw.d(36): Error: slice `res` is not mutable\n/tmp/tmpsmuop0hw.d(40): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmuop0hw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int c = s[i];\n        int j = i;\n        while(j > 0 && s[j - 1] > c)\n        {\n            s[j] = s[j - 1];\n            j--;\n        }\n        s[j] = c;\n    }\n    for(int i = 0; i < len; i++)\n    {\n        res += s[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpsoi_bfo_.d(23): Error: no property `length` for type `string`\n/tmp/tmpsoi_bfo_.d(30): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpsoi_bfo_.d(33): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpsoi_bfo_.d(37): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsoi_bfo_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int i,j,k;\n    for(i=0;i<s.size();i++)\n    {\n        for(j=i+1;j<s.size();j++)\n        {\n            if(s[i]>s[j])\n            {\n                k=s[i];\n                s[i]=s[j];\n                s[j]=k;\n            }\n        }\n    }\n    for(i=0;i<s.size();i++)\n    {\n        if(s[i]!=' ')\n        {\n            res+=s[i];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpo3qj4nj6.d(24): Error: no property `size` for type `string`\n/tmp/tmpo3qj4nj6.d(26): Error: no property `size` for type `string`\n/tmp/tmpo3qj4nj6.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpo3qj4nj6.d(32): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpo3qj4nj6.d(36): Error: no property `size` for type `string`\n/tmp/tmpo3qj4nj6.d(40): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo3qj4nj6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            i++;\n            \nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmppwzokb2l.d(118): Error: found `unittest` instead of statement\n/tmp/tmppwzokb2l.d(130): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppwzokb2l.d(130): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppwzokb2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a =\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpy0fu2ob0.d(95): Error: expression expected, not `unittest`\n/tmp/tmpy0fu2ob0.d(96): Error: semicolon expected, not `{`\n/tmp/tmpy0fu2ob0.d(107): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0fu2ob0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        int j = i;\n        while(j < s.length() && s[j] != ' ')\n            j++;\n        res += s[i];\n        for(int k = i; k < j; k++)\n            res += s[k];\n        i = j;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmphgx8cdn_.d(23): Error: no property `length` for type `string`\n/tmp/tmphgx8cdn_.d(28): Error: no property `length` for type `string`\n/tmp/tmphgx8cdn_.d(30): Error: slice `res` is not mutable\n/tmp/tmphgx8cdn_.d(32): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgx8cdn_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    int i, j, k;\n    string res = \"\";\n    for (i = 0; i < len; i++) {\n        if (s[i] == ' ') {\n            res += \" \";\n            continue;\n        }\n        for (j = i + 1; j < len; j++) {\n            if (s[j] == ' ') {\n                break;\n            }\n        }\n        for (k = i; k < j; k++) {\n            res += s[k];\n        }\n        for (k = j; k < len; k++) {\n            res += s[k];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpjv95cg6j.d(22): Error: no property `length` for type `string`\n/tmp/tmpjv95cg6j.d(27): Error: slice `res` is not mutable\n/tmp/tmpjv95cg6j.d(36): Error: slice `res` is not mutable\n/tmp/tmpjv95cg6j.d(39): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjv95cg6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if(c == ' ')\n        {\n            result += c;\n        }\n        else\n        {\n            int ascii_value = c;\n            int j = i;\n            while(j < s.length() && s[j] != ' ')\n            {\n                ascii_value = ascii_value + 1;\n                j++;\n            }\n            if(j < s.length())\n            {\n                result += s[j];\n            }\n            else\n            {\n                result += ascii_value;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpt25tyklx.d(23): Error: no property `length` for type `string`\n/tmp/tmpt25tyklx.d(28): Error: slice `result` is not mutable\n/tmp/tmpt25tyklx.d(34): Error: no property `length` for type `string`\n/tmp/tmpt25tyklx.d(39): Error: no property `length` for type `string`\n/tmp/tmpt25tyklx.d(41): Error: slice `result` is not mutable\n/tmp/tmpt25tyklx.d(45): Error: incompatible types for `(result) += (ascii_value)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt25tyklx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int len = s.length();\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int c = 0;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n        if(s[i] == ' ')\n        {\n            res += ' ';\n            i++;\n            continue;\n        }\n\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpy3m07sjc.d(114): Error: found `unittest` instead of statement\n/tmp/tmpy3m07sjc.d(126): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3m07sjc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        res += s[i];\n        for(int j = i+1; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            if(s[i] > s[j])\n            {\n                res += s[j];\n                s[j] = ' ';\n            }\n            else\n            {\n                res += s[i];\n                s[i] = ' ';\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmp3u36t3wx.d(23): Error: no property `length` for type `string`\n/tmp/tmp3u36t3wx.d(27): Error: slice `res` is not mutable\n/tmp/tmp3u36t3wx.d(28): Error: no property `length` for type `string`\n/tmp/tmp3u36t3wx.d(34): Error: slice `res` is not mutable\n/tmp/tmp3u36t3wx.d(35): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmp3u36t3wx.d(39): Error: slice `res` is not mutable\n/tmp/tmp3u36t3wx.d(40): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3u36t3wx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while (i < len)\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (i == len - 1)\n        {\n            result += s[i];\n            break;\n        }\n        if (s[i] < s[i + 1])\n        {\n            result += s[i];\n            i++;\n        }\n        else\n        {\n            result += s[i + 1];\n            i++;\n            j = i;\n            while (j < len - 1)\n            {\n                if (s[j] < s[j + 1])\n                {\n                    result += s[j];\n                    j++;\n                }\n                else\n                {\n                    result += s[j + 1];\n                    j++;\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpph6lymk4.d(25): Error: no property `length` for type `string`\n/tmp/tmpph6lymk4.d(35): Error: slice `result` is not mutable\n/tmp/tmpph6lymk4.d(40): Error: slice `result` is not mutable\n/tmp/tmpph6lymk4.d(45): Error: slice `result` is not mutable\n/tmp/tmpph6lymk4.d(52): Error: slice `result` is not mutable\n/tmp/tmpph6lymk4.d(57): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpph6lymk4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        result += s[i];\n        for(int j = i+1; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            if(s[i] > s[j])\n            {\n                result += s[j];\n                s[j] = ' ';\n            }\n            else\n            {\n                result += s[i];\n                s[i] = ' ';\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmphunfe8qe.d(23): Error: no property `length` for type `string`\n/tmp/tmphunfe8qe.d(27): Error: slice `result` is not mutable\n/tmp/tmphunfe8qe.d(28): Error: no property `length` for type `string`\n/tmp/tmphunfe8qe.d(34): Error: slice `result` is not mutable\n/tmp/tmphunfe8qe.d(35): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmphunfe8qe.d(39): Error: slice `result` is not mutable\n/tmp/tmphunfe8qe.d(40): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphunfe8qe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        char c = s[i];\n        int j = i;\n        while(j < len && s[j] > c)\n        {\n            s[j] = s[j+1];\n            j++;\n        }\n        s[j] = c;\n    }\n    for(int i = 0; i < len; i++)\n    {\n        res += s[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpa5vbq26c.d(23): Error: no property `length` for type `string`\n/tmp/tmpa5vbq26c.d(30): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpa5vbq26c.d(33): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpa5vbq26c.d(37): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5vbq26c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ' ')\n            continue;\n        int ascii = s[i];\n        for(int j = i + 1; j < s.length(); j++)\n        {\n            if(s[j] == ' ')\n                continue;\n            if(ascii > s[j])\n                ascii = s[j];\n        }\n        res += ascii;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpm092375q.d(23): Error: no property `length` for type `string`\n/tmp/tmpm092375q.d(28): Error: no property `length` for type `string`\n/tmp/tmpm092375q.d(35): Error: incompatible types for `(res) += (ascii)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm092375q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 65 && ascii <= 90)\n        {\n            res += s[i];\n        }\n        else if(ascii >= 97 && ascii <= 122)\n        {\n            res += s[i];\n        }\n        else if(ascii >= 48 && ascii <= 57)\n        {\n            res += s[i];\n        }\n        else if(ascii == 32)\n        {\n            res += \" \";\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpsmuop0hw.d(23): Error: no property `length` for type `string`\n/tmp/tmpsmuop0hw.d(28): Error: slice `res` is not mutable\n/tmp/tmpsmuop0hw.d(32): Error: slice `res` is not mutable\n/tmp/tmpsmuop0hw.d(36): Error: slice `res` is not mutable\n/tmp/tmpsmuop0hw.d(40): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmuop0hw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while (i < len)\n    {\n        if (s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (i == len - 1)\n        {\n            res += s[i];\n            break;\n        }\n        if (s[i] > s[i + 1])\n        {\n            res += s[i];\n            i++;\n            continue;\n        }\n        else\n        {\n            res += s[i + 1];\n            i++;\n            j = i;\n            while (j < len - 1)\n            {\n                if (s[j] > s[j + 1])\n                {\n                    res += s[j];\n                    j++;\n                    continue;\n                }\n                else\n                {\n                    res += s[j + 1];\n                    j++;\n                    break;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpc9m_4cqg.d(25): Error: no property `length` for type `string`\n/tmp/tmpc9m_4cqg.d(35): Error: slice `res` is not mutable\n/tmp/tmpc9m_4cqg.d(40): Error: slice `res` is not mutable\n/tmp/tmpc9m_4cqg.d(46): Error: slice `res` is not mutable\n/tmp/tmpc9m_4cqg.d(53): Error: slice `res` is not mutable\n/tmp/tmpc9m_4cqg.d(59): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9m_4cqg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    while (i < len)\n    {\n        if (s[i] == ' ')\n        {\n            result += \" \";\n            i++;\n        }\n        else\n        {\n            while (i < len && s[i] >= s[j])\n            {\n                j++;\n            }\n            result += s[j];\n            j++;\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpiu8lm5xh.d(25): Error: no property `length` for type `string`\n/tmp/tmpiu8lm5xh.d(30): Error: slice `result` is not mutable\n/tmp/tmpiu8lm5xh.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiu8lm5xh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        int ascii = s[i];\n        if(ascii >= 65 && ascii <= 90)\n            result += s[i];\n        else if(ascii >= 97 && ascii <= 122)\n            result += s[i];\n        else if(ascii == 32)\n            result += \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpa9vfl8p7.d(23): Error: no property `length` for type `string`\n/tmp/tmpa9vfl8p7.d(27): Error: slice `result` is not mutable\n/tmp/tmpa9vfl8p7.d(29): Error: slice `result` is not mutable\n/tmp/tmpa9vfl8p7.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9vfl8p7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string res;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n        int c = s[i];\n        int j = i;\n        while(j < len && s[j] > c)\n        {\n            s[j] = s[j+1];\n            j++;\n        }\n        s[j] = c;\n    }\n    for(int i = 0; i < len; i++)\n    {\n        res += s[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292911,
      "stdout": "",
      "stderr": "/tmp/tmpla3hezed.d(23): Error: no property `length` for type `string`\n/tmp/tmpla3hezed.d(30): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpla3hezed.d(33): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpla3hezed.d(37): Error: slice `res` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpla3hezed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    int len = s.length();\n    int i, j, k;\n    string res;\n    for (i = 0; i < len; i++) {\n        for (j = i + 1; j < len; j++) {\n            for (k = j + 1; k < len; k++) {\n                if (s[i] > s[j] && s[i] > s[k]) {\n                    swap(s[i], s[j]);\n                }\n                if (s[i] > s[k] && s[i] > s[j]) {\n                    swap(s[i], s[k]);\n                }\n                if (s[j] > s[k] && s[j] > s[i]) {\n                    swap(s[j], s[k]);\n                }\n            }\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpxpzvmegr.d(22): Error: no property `length` for type `string`\n/tmp/tmpxpzvmegr.d(29): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\n/tmp/tmpxpzvmegr.d(32): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\n/tmp/tmpxpzvmegr.d(35): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxpzvmegr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++)\n    {\n        result += s[i];\n        for(int j = i+1; j < s.length(); j++)\n        {\n            if(s[i] > s[j])\n            {\n                result += s[j];\n                s[j] = s[i];\n                s[i] = result[j];\n                result[j] = result[i];\n                result[i] = s[j];\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpq8qkxcpg.d(23): Error: no property `length` for type `string`\n/tmp/tmpq8qkxcpg.d(25): Error: slice `result` is not mutable\n/tmp/tmpq8qkxcpg.d(26): Error: no property `length` for type `string`\n/tmp/tmpq8qkxcpg.d(30): Error: slice `result` is not mutable\n/tmp/tmpq8qkxcpg.d(31): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\n/tmp/tmpq8qkxcpg.d(32): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpq8qkxcpg.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\n/tmp/tmpq8qkxcpg.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq8qkxcpg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int len = s.length();\n    int len_result = len;\n    int len_temp = len;\n    while(i < len)\n    {\n        if(s[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        while(j < len_temp)\n        {\n            if(s[j] == ' ')\n            {\n                j++;\n                continue;\n            }\n            if(s[i] < s[j])\n            {\n                result += s[i];\n                i++;\n                len_temp--;\n                break;\n            }\n            else if(s[i] > s[j])\n            {\n                result += s[j];\n                j++;\n                len_temp--;\n                break;\n            }\n            else\n            {\n                result += s[i];\n                i++;\n                j++;\n                len_temp--;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "timestamp": 1664292912,
      "stdout": "",
      "stderr": "/tmp/tmpxegxy2f0.d(25): Error: no property `length` for type `string`\n/tmp/tmpxegxy2f0.d(44): Error: slice `result` is not mutable\n/tmp/tmpxegxy2f0.d(51): Error: slice `result` is not mutable\n/tmp/tmpxegxy2f0.d(58): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxegxy2f0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}