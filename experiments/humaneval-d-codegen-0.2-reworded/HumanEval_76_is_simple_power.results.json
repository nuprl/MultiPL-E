{
  "name": "HumanEval_76_is_simple_power",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n",
  "tests": "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1)\n        return true;\n    if (n==0)\n        return false;\n    if (x==1)\n        return false;\n    if (x==n)\n        return true;\n    if (x==n**2)\n        return true;\n    if (x==n**3)\n        return true;\n    if (x==n**4)\n        return true;\n    if (x==n**5)\n        return true;\n    if (x==n**6)\n        return true;\n    if (x==n**7)\n        return true;\n    if (x==n**8)\n        return true;\n    if (x==n**9)\n        return true;\n    if (x==n**10)\n        return true;\n    if (x==n**11)\n        return true;\n    if (x==n**12)\n        return true;\n    if (x==n**13)\n        return true;\n    if (x==n**14)\n        return true;\n    if (x==n**15)\n        return true;\n    if (x==n**16)\n        return true;\n    if (x==n**17)\n        return true;\n    if (x==n**18)\n        return true;\n    if (x==n**19)\n        return true;\n    if (x==n**20)\n        return true;\n    if (x==n**21)\n        return true;\n    if (x==n**22)\n        return true;\n    if (x==n**23)\n        return true;\n    if (x==n**24)\n        return true;\n    if (x==n**25)\n        return true;\n    if (x==n**26)\n        return true;\n    if (x==n**27)\n        return true;\n    if (x==n**28)\n        return true;\n    if (x==n**29)\n        return true;\n    if (x==n**30)\n        return true;\n    if (x==n**31)\n        return true;\n    if (x==n**32\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpldfd9uff.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmpldfd9uff.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldfd9uff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 0) return false;\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x % n == 0) return false;\n    return is_simple_power(x, n / 2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw1nnus3m.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpw1nnus3m.__unittest_L30_C1() [0x427a81]\n??:? void tmpw1nnus3m.__modtest() [0x427bd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x % n == 0)\n        return false;\n    return is_simple_power(x, n / 2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm4fq6fem.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpm4fq6fem.__unittest_L34_C1() [0x427a81]\n??:? void tmpm4fq6fem.__modtest() [0x427bd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpq_q1lnqu.d(44): Error: expression expected, not `unittest`\n/tmp/tmpq_q1lnqu.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_q1lnqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x==n) || (x==n*n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9iqkfo02.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp9iqkfo02.__unittest_L26_C1() [0x427a49]\n??:? void tmp9iqkfo02.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x==n) || (n==0 && x==1) || (n==1 && x==n) || (n>1 && n%2==0 && x==n*n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb4chaxp3.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpb4chaxp3.__unittest_L26_C1() [0x427a7d]\n??:? void tmpb4chaxp3.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==0)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==-n)\n        return true;\n    if(x==-1L)\n        return false;\n    if(x==-nL)\n        return true;\n    if(x==-2L)\n        return false;\n    if(x==-2L*n)\n        return true;\n    if(x==-3L)\n        return false;\n    if(x==-3L*n)\n        return true;\n    if(x==-4L)\n        return false;\n    if(x==-4L*n)\n        return true;\n    if(x==-5L)\n        return false;\n    if(x==-5L*n)\n        return true;\n    if(x==-6L)\n        return false;\n    if(x==-6L*n)\n        return true;\n    if(x==-7L)\n        return false;\n    if(x==-7L*n)\n        return true;\n    if(x==-8L)\n        return false;\n    if(x==-8L*n)\n        return true;\n    if(x==-9L)\n        return false;\n    if(x==-9L*n)\n        return true;\n    if(x==-10L)\n        return false;\n    if(x==-10L*n)\n        return true;\n    if(x==-11L)\n        return false;\n    if(x==-11L*n)\n        return true;\n    if(x==-12L)\n        return false;\n    if(x==-12L*n)\n        return true;\n    if(x==-13L)\n        return false;\n    if(x==-13L*n)\n        return true;\n    if(\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpdzdw8821.d(91): Error: expression expected, not `unittest`\n/tmp/tmpdzdw8821.d(92): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzdw8821.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==0) return false;\n    if (x==n) return true;\n    if (x==-1) return false;\n    if (x==-n) return true;\n    if (x==-x) return false;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmptu2thwaf.d(62): Error: found `unittest` when expecting `)`\n/tmp/tmptu2thwaf.d(77): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptu2thwaf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==0) return false;\n    if (x==1) return true;\n    if (x==0) return false;\n    if (x==n) return true;\n    if (x==-n) return true;\n    if (x==-1) return false;\n    if (x==-1*n) return true;\n    if (x==-1*n*n) return true;\n    if (x==-1*n*n*n) return true;\n    if (x==-1*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==-1*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpouhj7lq3.d(46): Error: expression expected, not `unittest`\n/tmp/tmpouhj7lq3.d(47): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpouhj7lq3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpidccosf8.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpidccosf8.__unittest_L34_C1() [0x427bbf]\n??:? void tmpidccosf8.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==0) return false;\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n**n) return true;\n    if (x==n**(n-1)) return true;\n    if (x==n**(n-2)) return true;\n    if (x==n**(n-3)) return true;\n    if (x==n**(n-4)) return true;\n    if (x==n**(n-5)) return true;\n    if (x==n**(n-6)) return true;\n    if (x==n**(n-7)) return true;\n    if (x==n**(n-8)) return true;\n    if (x==n**(n-9)) return true;\n    if (x==n**(n-10)) return true;\n    if (x==n**(n-11)) return true;\n    if (x==n**(n-12)) return true;\n    if (x==n**(n-13)) return true;\n    if (x==n**(n-14)) return true;\n    if (x==n**(n-15)) return true;\n    if (x==n**(n-16)) return true;\n    if (x==n**(n-17)) return true;\n    if (x==n**(n-18)) return true;\n    if (x==n**(n-19)) return true;\n    if (x==n**(n-20)) return true;\n    if (x==n**(n-21)) return true;\n    if (x==n**(n-22)) return true;\n    if (x==n**(n-23)) return true;\n    if (x==n**(n-24)) return true;\n    if (x==n**(n-25)) return true;\n    if (x==n**(n-26)) return true;\n    if (x==n**(n-27)) return true;\n    if (x==n**(n-28)) return true;\n    if (x==n**(n-29)) return true;\n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpbkfhzmq6.d(58): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkfhzmq6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n) return true;\n    if(x==1) return false;\n    if(x==0) return false;\n    if(x==-1) return false;\n    if(x==-n) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp0d7ashwh.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmp0d7ashwh.d(81): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0d7ashwh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return n == 0 ? false : n == 1 ? true : n == 2 ? x == 2 : n == 3 ? x == 3 : n == 4 ? x == 4 : n == 5 ? x == 5 : n == 6 ? x == 6 : n == 7 ? x == 7 : n == 8 ? x == 8 : n == 9 ? x == 9 : n == 10 ? x == 10 : n == 11 ? x == 11 : n == 12 ? x == 12 : n == 13 ? x == 13 : n == 14 ? x == 14 : n == 15 ? x == 15 : n == 16 ? x == 16 : n == 17 ? x == 17 : n == 18 ? x == 18 : n == 19 ? x == 19 : n == 20 ? x == 20 : n == 21 ? x == 21 : n == 22 ? x == 22 : n == 23 ? x == 23 : n == 24 ? x == 24 : n == 25 ? x == 25 : n == 26 ? x == 26 : n == 27 ? x == 27 : n == 28 ? x == 28 : n == 29 ? x == 29 : n == 30 ? x == 30 : n == 31 ? x == 31 : n == 32 ? x == 32 : n == 33 ? x == 33 : n == 34 ? x == 34 : n == 35 ? x == 35 : n == 36 ? x == 36 : n == 37 ? x == 37 : n == 38 ? x == 38 : n == 39 ? x == 39 : n == 40 ? x == 40 : n == 41 ? x == 41 : n == 42 ? x == 42 : n == 43 ? x == 43 : n == 44 ? x == 44 : n == 45 ? x == 45 : n == 46 ? x == 46 : n == 47 ? x == 47 : n == 48 ? x == 48 : n == 49 ? x == 49 : n == 50 ? x == 50 : n == 51 ? x == 51 : n == 52 ? x == 52 : n == 53 ? x == 53 : n == 54 ? x == 54 : n == 55 ? x == 55 : n == 56 ? x == 56 : n == 57 ? x == 57 : n == 58 ? x == 58 : n == 59 ? x == 59 : n == 60 ? x == 60 : n == 61 ? x == 61 : n == 62 ? x == 62 : n == 63 ? x == 63 :\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpo67y971e.d(25): Error: expression expected, not `unittest`\n/tmp/tmpo67y971e.d(26): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo67y971e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n*n)\n        return true;\n    if (x == n*n*n)\n        return true;\n    if (x == n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpz3zme55_.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpz3zme55_.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3zme55_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==nL*nL)\n        return false;\n    if(x==nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpfr_m1z2z.d(67): Error: found `unittest` when expecting `)`\n/tmp/tmpfr_m1z2z.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfr_m1z2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==0)\n        return false;\n    if(x==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x==n**n)\n        return true;\n    if(x==n**(n-1))\n        return true;\n    if(x==n**(n-2))\n        return true;\n    if(x==n**(n-3))\n        return true;\n    if(x==n**(n-4))\n        return true;\n    if(x==n**(n-5))\n        return true;\n    if(x==n**(n-6))\n        return true;\n    if(x==n**(n-7))\n        return true;\n    if(x==n**(n-8))\n        return true;\n    if(x==n**(n-9))\n        return true;\n    if(x==n**(n-10))\n        return true;\n    if(x==n**(n-11))\n        return true;\n    if(x==n**(n-12))\n        return true;\n    if(x==n**(n-13))\n        return true;\n    if(x==n**(n-14))\n        return true;\n    if(x==n**(n-15))\n        return true;\n    if(x==n**(n-16))\n        return true;\n    if(x==n**(n-17))\n        return true;\n    if(x==n**(n-18))\n        return true;\n    if(x==n**(n-19))\n        return true;\n    if(x==n**(n-20))\n        return true;\n    if(x==n**(n-21))\n        return true;\n    if(x==n**(n-22))\n        return true;\n    if(x==n**(n-23))\n        return true;\n    if(x==n**(n-24))\n        return true;\n    if(x==n**(n-25))\n        return true;\n    if(x==n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpqk8zjas2.d(83): Error: found `unittest` when expecting `)`\n/tmp/tmpqk8zjas2.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqk8zjas2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcthvhv6m.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpcthvhv6m.__unittest_L30_C1() [0x427bbf]\n??:? void tmpcthvhv6m.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x == n**2)\n        return true;\n    if (x == n**3)\n        return true;\n    if (x == n**4)\n        return true;\n    if (x == n**5)\n        return true;\n    if (x == n**6)\n        return true;\n    if (x == n**7)\n        return true;\n    if (x == n**8)\n        return true;\n    if (x == n**9)\n        return true;\n    if (x == n**10)\n        return true;\n    if (x == n**11)\n        return true;\n    if (x == n**12)\n        return true;\n    if (x == n**13)\n        return true;\n    if (x == n**14)\n        return true;\n    if (x == n**15)\n        return true;\n    if (x == n**16)\n        return true;\n    if (x == n**17)\n        return true;\n    if (x == n**18)\n        return true;\n    if (x == n**19)\n        return true;\n    if (x == n**20)\n        return true;\n    if (x == n**21)\n        return true;\n    if (x == n**22)\n        return true;\n    if (x == n**23)\n        return true;\n    if (x == n**24)\n        return true;\n    if (x == n**25)\n        return true;\n    if (x == n**26)\n        return true;\n    if (x == n**27)\n        return true;\n    if (x == n**28)\n        return true;\n    if (x == n**29)\n        return true;\n    if (x == n**30)\n        return true;\n    if (x == n**31)\n        return true;\n    if (x == n**32\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp3vrgttov.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmp3vrgttov.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vrgttov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpidccosf8.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpidccosf8.__unittest_L34_C1() [0x427bbf]\n??:? void tmpidccosf8.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x==n) || (x==n*n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9iqkfo02.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp9iqkfo02.__unittest_L26_C1() [0x427a49]\n??:? void tmp9iqkfo02.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1L)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp2mkm9_tx.d(61): Error: expression expected, not `unittest`\n/tmp/tmp2mkm9_tx.d(62): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2mkm9_tx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpq_q1lnqu.d(44): Error: expression expected, not `unittest`\n/tmp/tmpq_q1lnqu.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_q1lnqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==0) return false;\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpx56xry_s.d(44): Error: expression expected, not `unittest`\n/tmp/tmpx56xry_s.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx56xry_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n * n) return true;\n    if (x == n * n * n) return true;\n    if (x == n * n * n * n) return true;\n    if (x == n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpnz_f39t4.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmpnz_f39t4.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnz_f39t4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n**n)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpb_1sqlq1.d(28): Error: can only `*` a pointer, not a `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb_1sqlq1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n**n)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmprdd61f0w.d(30): Error: can only `*` a pointer, not a `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprdd61f0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x == 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x == n*n)\n        return true;\n    if(x == n*n*n)\n        return true;\n    if(x == n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp3wo5sxr7.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmp3wo5sxr7.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3wo5sxr7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n *\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpgfhfcg11.d(63): Error: expression expected, not `unittest`\n/tmp/tmpgfhfcg11.d(64): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgfhfcg11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==nL*nL)\n        return false;\n    if(x==nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL*nL*nL*nL*nL*nL*nL*nL)\n        return false;\n    if(x==nL*nL*nL*nL*nL\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpfr_m1z2z.d(67): Error: found `unittest` when expecting `)`\n/tmp/tmpfr_m1z2z.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfr_m1z2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x==n) || (x==n*n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9iqkfo02.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp9iqkfo02.__unittest_L26_C1() [0x427a49]\n??:? void tmp9iqkfo02.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (n < 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x, n / 2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbpbgpo75.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpbpbgpo75.__unittest_L38_C1() [0x427b49]\n??:? void tmpbpbgpo75.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpidccosf8.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpidccosf8.__unittest_L34_C1() [0x427bbf]\n??:? void tmpidccosf8.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x==n**n)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpvim7qg25.d(28): Error: can only `*` a pointer, not a `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvim7qg25.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==0) return false;\n    if(x==1) return true;\n    if(x==n) return true;\n    if(x==n**n) return true;\n    if(x==n**(n-1)) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp66ojykm5.d(27): Error: can only `*` a pointer, not a `long`\n/tmp/tmp66ojykm5.d(28): Error: can only `*` a pointer, not a `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp66ojykm5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (n == 0) return false;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x/n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqbi72cl1.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpqbi72cl1.__unittest_L31_C1() [0x427bcb]\n??:? void tmpqbi72cl1.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n**2) return true;\n    if (x==n**3) return true;\n    if (x==n**4) return true;\n    if (x==n**5) return true;\n    if (x==n**6) return true;\n    if (x==n**7) return true;\n    if (x==n**8) return true;\n    if (x==n**9) return true;\n    if (x==n**10) return true;\n    if (x==n**11) return true;\n    if (x==n**12) return true;\n    if (x==n**13) return true;\n    if (x==n**14) return true;\n    if (x==n**15) return true;\n    if (x==n**16) return true;\n    if (x==n**17) return true;\n    if (x==n**18) return true;\n    if (x==n**19) return true;\n    if (x==n**20) return true;\n    if (x==n**21) return true;\n    if (x==n**22) return true;\n    if (x==n**23) return true;\n    if (x==n**24) return true;\n    if (x==n**25) return true;\n    if (x==n**26) return true;\n    if (x==n**27) return true;\n    if (x==n**28) return true;\n    if (x==n**29) return true;\n    if (x==n**30) return true;\n    if (x==n**31) return true;\n    if (x==n**32) return true;\n    if (x==n**33) return true;\n    if (x==n**34) return true;\n    if (x==n**35) return true;\n    if (x==n**36) return true;\n    if (x==n**37) return true;\n    if (x==n**38) return true;\n    if (x==n**\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpa_z07l9y.d(64): Error: expression expected, not `unittest`\n/tmp/tmpa_z07l9y.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_z07l9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1cmf8jlq.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1cmf8jlq.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cmf8jlq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x==n*n)\n        return true;\n    if(x==n*n*n)\n        return true;\n    if(x==n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpt13rt9l3.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpt13rt9l3.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt13rt9l3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (n == -1)\n        return false;\n    if (n == 2)\n        return x == 2;\n    if (n == 3)\n        return x == 3;\n    if (n == 4)\n        return x == 4;\n    if (n == 5)\n        return x == 5;\n    if (n == 6)\n        return x == 6;\n    if (n == 7)\n        return x == 7;\n    if (n == 8)\n        return x == 8;\n    if (n == 9)\n        return x == 9;\n    if (n == 10)\n        return x == 10;\n    if (n == 11)\n        return x == 11;\n    if (n == 12)\n        return x == 12;\n    if (n == 13)\n        return x == 13;\n    if (n == 14)\n        return x == 14;\n    if (n == 15)\n        return x == 15;\n    if (n == 16)\n        return x == 16;\n    if (n == 17)\n        return x == 17;\n    if (n == 18)\n        return x == 18;\n    if (n == 19)\n        return x == 19;\n    if (n == 20)\n        return x == 20;\n    if (n == 21)\n        return x == 21;\n    if (n == 22)\n        return x == 22;\n    if (n == 23)\n        return x == 23;\n    if (n == 24)\n        return x == 24;\n    if (n == 25)\n        return x == 25;\n    if (n == 26)\n        return x == 26;\n    if (n == 27)\n        return x == 27;\n    if (n == 28)\n        return x == 28;\n    if (n == 29)\n        return x == 29;\n    if (n == 30)\n        return x == 30;\n    if (n == 31)\n        return x == 31;\n    if (n == 32)\n        return x == 32;\n    if (n ==\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzxaiwhkw.d(93): Error: expression expected, not `unittest`\n/tmp/tmpzxaiwhkw.d(94): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxaiwhkw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==n) return true;\n    if (x==1) return false;\n    if (x==0) return false;\n    if (x==-1) return false;\n    if (x==-n) return false;\n    if (x==-x) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x%n) return false;\n    if (x==-x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp9649j490.d(62): Error: found `unittest` when expecting `)`\n/tmp/tmp9649j490.d(77): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9649j490.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==n) return true;\n    if (x==1) return true;\n    if (x==0) return false;\n    if (n==0) return false;\n    if (n==1) return true;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpz8q4wpyn.d(46): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8q4wpyn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcthvhv6m.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpcthvhv6m.__unittest_L30_C1() [0x427bbf]\n??:? void tmpcthvhv6m.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==0) return false;\n    if (n==0) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp5rtoryb1.d(45): Error: found `unittest` when expecting `)`\n/tmp/tmp5rtoryb1.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rtoryb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpq_q1lnqu.d(44): Error: expression expected, not `unittest`\n/tmp/tmpq_q1lnqu.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_q1lnqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1) return true;\n    if(x==n) return true;\n    if(x==n**n) return true;\n    if(x==n**(n-1)) return true;\n    if(x==n**(n-2)) return true;\n    if(x==n**(n-3)) return true;\n    if(x==n**(n-4)) return true;\n    if(x==n**(n-5)) return true;\n    if(x==n**(n-6)) return true;\n    if(x==n**(n-7)) return true;\n    if(x==n**(n-8)) return true;\n    if(x==n**(n-9)) return true;\n    if(x==n**(n-10)) return true;\n    if(x==n**(n-11)) return true;\n    if(x==n**(n-12)) return true;\n    if(x==n**(n-13)) return true;\n    if(x==n**(n-14)) return true;\n    if(x==n**(n-15)) return true;\n    if(x==n**(n-16)) return true;\n    if(x==n**(n-17)) return true;\n    if(x==n**(n-18)) return true;\n    if(x==n**(n-19)) return true;\n    if(x==n**(n-20)) return true;\n    if(x==n**(n-21)) return true;\n    if(x==n**(n-22)) return true;\n    if(x==n**(n-23)) return true;\n    if(x==n**(n-24)) return true;\n    if(x==n**(n-25)) return true;\n    if(x==n**(n-26)) return true;\n    if(x==n**(n-27)) return true;\n    if(x==n**(n-28)) return true;\n    if(x==n**(n-29)) return true;\n    if(x==n**(n-30\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpnj9ospzi.d(56): Error: found `unittest` when expecting `)`\n/tmp/tmpnj9ospzi.d(58): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnj9ospzi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==0)\n        return false;\n    if(x==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x==n**n)\n        return true;\n    if(x==n**(n-1))\n        return true;\n    if(x==n**(n-2))\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp_8x2kt92.d(30): Error: can only `*` a pointer, not a `long`\n/tmp/tmp_8x2kt92.d(32): Error: can only `*` a pointer, not a `long`\n/tmp/tmp_8x2kt92.d(34): Error: can only `*` a pointer, not a `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8x2kt92.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        \nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp_njso147.d(96): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_njso147.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==n) return true;\n    if (x==1) return true;\n    if (x==0) return false;\n    if (n==0) return false;\n    if (n==1) return true;\n    if (n==2) return true;\n    if (n==3) return true;\n    if (n==4) return true;\n    if (n==5) return true;\n    if (n==6) return true;\n    if (n==7) return true;\n    if (n==8) return true;\n    if (n==9) return true;\n    if (n==10) return true;\n    if (n==11) return true;\n    if (n==12) return true;\n    if (n==13) return true;\n    if (n==14) return true;\n    if (n==15) return true;\n    if (n==16) return true;\n    if (n==17) return true;\n    if (n==18) return true;\n    if (n==19) return true;\n    if (n==20) return true;\n    if (n==21) return true;\n    if (n==22) return true;\n    if (n==23) return true;\n    if (n==24) return true;\n    if (n==25) return true;\n    if (n==26) return true;\n    if (n==27) return true;\n    if (n==28) return true;\n    if (n==29) return true;\n    if (n==30) return true;\n    if (n==31) return true;\n    if (n==32) return true;\n    if (n==33) return true;\n    if (n==34) return true;\n    if (n==35) return true;\n    if (n==36) return true;\n    if (n==37) return true;\n    if (n==38) return true;\n    if (n==39) return true;\n    if (n==40) return true;\n    if (n==41) return true;\n    if (n==42) return true;\n    if (n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp7xul66c8.d(71): Error: found `unittest` when expecting `)`\n/tmp/tmp7xul66c8.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xul66c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n * n) return true;\n    if (x == n * n * n) return true;\n    if (x == n * n * n * n) return true;\n    if (x == n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpnz_f39t4.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmpnz_f39t4.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnz_f39t4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpidccosf8.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpidccosf8.__unittest_L34_C1() [0x427bbf]\n??:? void tmpidccosf8.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1cmf8jlq.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1cmf8jlq.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cmf8jlq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == -1) return false;\n    if (x < 0) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpq_q1lnqu.d(44): Error: expression expected, not `unittest`\n/tmp/tmpq_q1lnqu.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_q1lnqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n == 0)\n        return false;\n    return is_simple_power(x, n / 2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuouvi7xv.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpuouvi7xv.__unittest_L34_C1() [0x427a7d]\n??:? void tmpuouvi7xv.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return n==0?false:x==n?true:x%n==0?false:is_simple_power(x,n/2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphsos_7ax.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmphsos_7ax.__unittest_L26_C1() [0x427a79]\n??:? void tmphsos_7ax.__modtest() [0x427bd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==0) return false;\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n**n) return true;\n    if (x==n**(n-1)) return true;\n    if (x==n**(n-2)) return true;\n    if (x==n**(n-3)) return true;\n    if (x==n**(n-4)) return true;\n    if (x==n**(n-5)) return true;\n    if (x==n**(n-6)) return true;\n    if (x==n**(n-7)) return true;\n    if (x==n**(n-8)) return true;\n    if (x==n**(n-9)) return true;\n    if (x==n**(n-10)) return true;\n    if (x==n**(n-11)) return true;\n    if (x==n**(n-12)) return true;\n    if (x==n**(n-13)) return true;\n    if (x==n**(n-14)) return true;\n    if (x==n**(n-15)) return true;\n    if (x==n**(n-16)) return true;\n    if (x==n**(n-17)) return true;\n    if (x==n**(n-18)) return true;\n    if (x==n**(n-19)) return true;\n    if (x==n**(n-20)) return true;\n    if (x==n**(n-21)) return true;\n    if (x==n**(n-22)) return true;\n    if (x==n**(n-23)) return true;\n    if (x==n**(n-24)) return true;\n    if (x==n**(n-25)) return true;\n    if (x==n**(n-26)) return true;\n    if (x==n**(n-27)) return true;\n    if (x==n**(n-28)) return true;\n    if (x==n**(n-29)) return true;\n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpbkfhzmq6.d(58): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkfhzmq6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpq_q1lnqu.d(44): Error: expression expected, not `unittest`\n/tmp/tmpq_q1lnqu.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_q1lnqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (n==0) return false;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpa5tdkbb6.d(45): Error: found `unittest` when expecting `)`\n/tmp/tmpa5tdkbb6.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5tdkbb6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x % n == 0)\n        return false;\n    return is_simple_power(x, n / 2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6iea4uef.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmp6iea4uef.__unittest_L32_C1() [0x427a75]\n??:? void tmp6iea4uef.__modtest() [0x427bcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (n == -1)\n        return false;\n    if (x == 1)\n        return true;\n    if (x == -1)\n        return false;\n    if (x == 0)\n        return false;\n    if (x == n)\n        return true;\n    if (x == -n)\n        return false;\n    if (x == n*n)\n        return true;\n    if (x == -n*n)\n        return false;\n    if (x == n*n*n)\n        return true;\n    if (x == -n*n*n)\n        return false;\n    if (x == n*n*n*n)\n        return true;\n    if (x == -n*n*n*n)\n        return false;\n    if (x == n*n*n*n*n)\n        return true;\n    if (x == -n*n*n*n*n)\n        return false;\n    if (x == n*n*n*n*n*n)\n        return true;\n    if (x == -n*n*n*n*n*n)\n        return false;\n    if (x == n*n*n*n*n*n*n)\n        return true;\n    if (x == -n*n*n*n*n*n*n)\n        return false;\n    if (x == n*n*n*n*n*n*n*n)\n        return true;\n    if (x == -n*n*n*n*n*n*n*n)\n        return false;\n    if (x == n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == -n*n*n*n*n*n*n*n*n)\n        return false;\n    if (x == n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == -n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpsw4fixsc.d(75): Error: expression expected, not `unittest`\n/tmp/tmpsw4fixsc.d(76): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsw4fixsc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n**n) return true;\n    if (x==n**(n-1)) return true;\n    if (x==n**(n-2)) return true;\n    if (x==n**(n-3)) return true;\n    if (x==n**(n-4)) return true;\n    if (x==n**(n-5)) return true;\n    if (x==n**(n-6)) return true;\n    if (x==n**(n-7)) return true;\n    if (x==n**(n-8)) return true;\n    if (x==n**(n-9)) return true;\n    if (x==n**(n-10)) return true;\n    if (x==n**(n-11)) return true;\n    if (x==n**(n-12)) return true;\n    if (x==n**(n-13)) return true;\n    if (x==n**(n-14)) return true;\n    if (x==n**(n-15)) return true;\n    if (x==n**(n-16)) return true;\n    if (x==n**(n-17)) return true;\n    if (x==n**(n-18)) return true;\n    if (x==n**(n-19)) return true;\n    if (x==n**(n-20)) return true;\n    if (x==n**(n-21)) return true;\n    if (x==n**(n-22)) return true;\n    if (x==n**(n-23)) return true;\n    if (x==n**(n-24)) return true;\n    if (x==n**(n-25)) return true;\n    if (x==n**(n-26)) return true;\n    if (x==n**(n-27)) return true;\n    if (x==n**(n-28)) return true;\n    if (x==n**(n-29)) return true;\n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp6m5_536u.d(58): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6m5_536u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x==n*n)\n        return true;\n    if(x==n*n*n)\n        return true;\n    if(x==n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp6fruiy01.d(66): Error: expression expected, not `unittest`\n/tmp/tmp6fruiy01.d(67): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fruiy01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(n%2==0)\n        return false;\n    if(x==1)\n        return true;\n    if(x==0)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n**(n-1))\n        return true;\n    if(x==n**(n-2))\n        return true;\n    if(x==n**(n-3))\n        return true;\n    if(x==n**(n-4))\n        return true;\n    if(x==n**(n-5))\n        return true;\n    if(x==n**(n-6))\n        return true;\n    if(x==n**(n-7))\n        return true;\n    if(x==n**(n-8))\n        return true;\n    if(x==n**(n-9))\n        return true;\n    if(x==n**(n-10))\n        return true;\n    if(x==n**(n-11))\n        return true;\n    if(x==n**(n-12))\n        return true;\n    if(x==n**(n-13))\n        return true;\n    if(x==n**(n-14))\n        return true;\n    if(x==n**(n-15))\n        return true;\n    if(x==n**(n-16))\n        return true;\n    if(x==n**(n-17))\n        return true;\n    if(x==n**(n-18))\n        return true;\n    if(x==n**(n-19))\n        return true;\n    if(x==n**(n-20))\n        return true;\n    if(x==n**(n-21))\n        return true;\n    if(x==n**(n-22))\n        return true;\n    if(x==n**(n-23))\n        return true;\n    if(x==n**(n-24))\n        return true\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmppw8y189y.d(84): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmppw8y189y.d(99): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppw8y189y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcthvhv6m.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpcthvhv6m.__unittest_L30_C1() [0x427bbf]\n??:? void tmpcthvhv6m.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return n==0? false : (x==n) || (x==n*n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphbthz8wm.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmphbthz8wm.__unittest_L26_C1() [0x427a61]\n??:? void tmphbthz8wm.__modtest() [0x427bb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 0) return false;\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1fwxzlvo.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1fwxzlvo.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fwxzlvo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==n) return true;\n    if (x==1) return false;\n    if (x==0) return false;\n    if (n==0) return false;\n    if (n==1) return true;\n    if (n==2) return true;\n    if (n==3) return true;\n    if (n==4) return true;\n    if (n==5) return true;\n    if (n==6) return true;\n    if (n==7) return true;\n    if (n==8) return true;\n    if (n==9) return true;\n    if (n==10) return true;\n    if (n==11) return true;\n    if (n==12) return true;\n    if (n==13) return true;\n    if (n==14) return true;\n    if (n==15) return true;\n    if (n==16) return true;\n    if (n==17) return true;\n    if (n==18) return true;\n    if (n==19) return true;\n    if (n==20) return true;\n    if (n==21) return true;\n    if (n==22) return true;\n    if (n==23) return true;\n    if (n==24) return true;\n    if (n==25) return true;\n    if (n==26) return true;\n    if (n==27) return true;\n    if (n==28) return true;\n    if (n==29) return true;\n    if (n==30) return true;\n    if (n==31) return true;\n    if (n==32) return true;\n    if (n==33) return true;\n    if (n==34) return true;\n    if (n==35) return true;\n    if (n==36) return true;\n    if (n==37) return true;\n    if (n==38) return true;\n    if (n==39) return true;\n    if (n==40) return true;\n    if (n==41) return true;\n    if (n==42) return true;\n    if (n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpyik8tyiq.d(71): Error: found `unittest` when expecting `)`\n/tmp/tmpyik8tyiq.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyik8tyiq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpgfuwz1pi.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgfuwz1pi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp6w6fyzoy.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmp6w6fyzoy.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6w6fyzoy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n**n)\n        return true;\n    if(x==n**(n-1))\n        return true;\n    if(x==n**(n-2))\n        return true;\n    if(x==n**(n-3))\n        return true;\n    if(x==n**(n-4))\n        return true;\n    if(x==n**(n-5))\n        return true;\n    if(x==n**(n-6))\n        return true;\n    if(x==n**(n-7))\n        return true;\n    if(x==n**(n-8))\n        return true;\n    if(x==n**(n-9))\n        return true;\n    if(x==n**(n-10))\n        return true;\n    if(x==n**(n-11))\n        return true;\n    if(x==n**(n-12))\n        return true;\n    if(x==n**(n-13))\n        return true;\n    if(x==n**(n-14))\n        return true;\n    if(x==n**(n-15))\n        return true;\n    if(x==n**(n-16))\n        return true;\n    if(x==n**(n-17))\n        return true;\n    if(x==n**(n-18))\n        return true;\n    if(x==n**(n-19))\n        return true;\n    if(x==n**(n-20))\n        return true;\n    if(x==n**(n-21))\n        return true;\n    if(x==n**(n-22))\n        return true;\n    if(x==n**(n-23))\n        return true;\n    if(x==n**(n-24))\n        return true;\n    if(x==n**(n-25\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpy11j9noq.d(82): Error: found `unittest` when expecting `)`\n/tmp/tmpy11j9noq.d(84): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy11j9noq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1cmf8jlq.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1cmf8jlq.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cmf8jlq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (n < 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x == n*n)\n        return true;\n    if (x == n*n*n)\n        return true;\n    if (x == n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpse0vqen0.d(65): Error: found `unittest` when expecting `)`\n/tmp/tmpse0vqen0.d(80): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpse0vqen0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    if(n==2)\n        return true;\n    if(n==3)\n        return true;\n    if(n==4)\n        return true;\n    if(n==5)\n        return true;\n    if(n==6)\n        return true;\n    if(n==7)\n        return true;\n    if(n==8)\n        return true;\n    if(n==9)\n        return true;\n    if(n==10)\n        return true;\n    if(n==11)\n        return true;\n    if(n==12)\n        return true;\n    if(n==13)\n        return true;\n    if(n==14)\n        return true;\n    if(n==15)\n        return true;\n    if(n==16)\n        return true;\n    if(n==17)\n        return true;\n    if(n==18)\n        return true;\n    if(n==19)\n        return true;\n    if(n==20)\n        return true;\n    if(n==21)\n        return true;\n    if(n==22)\n        return true;\n    if(n==23)\n        return true;\n    if(n==24)\n        return true;\n    if(n==25)\n        return true;\n    if(n==26)\n        return true;\n    if(n==27)\n        return true;\n    if(n==28)\n        return true;\n    if(n==29)\n        return true;\n    if(n==30)\n        return true;\n    if(n==31)\n        return true;\n    if(n==32)\n        return true;\n    if(n==33)\n        return true;\n    if(n==34)\n        return true;\n    if(n==35)\n        return true;\n    if(\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpa4khyxrt.d(103): Error: expression expected, not `unittest`\n/tmp/tmpa4khyxrt.d(104): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4khyxrt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n**2) return true;\n    if (x == n**3) return true;\n    if (x == n**4) return true;\n    if (x == n**5) return true;\n    if (x == n**6) return true;\n    if (x == n**7) return true;\n    if (x == n**8) return true;\n    if (x == n**9) return true;\n    if (x == n**10) return true;\n    if (x == n**11) return true;\n    if (x == n**12) return true;\n    if (x == n**13) return true;\n    if (x == n**14) return true;\n    if (x == n**15) return true;\n    if (x == n**16) return true;\n    if (x == n**17) return true;\n    if (x == n**18) return true;\n    if (x == n**19) return true;\n    if (x == n**20) return true;\n    if (x == n**21) return true;\n    if (x == n**22) return true;\n    if (x == n**23) return true;\n    if (x == n**24) return true;\n    if (x == n**25) return true;\n    if (x == n**26) return true;\n    if (x == n**27) return true;\n    if (x == n**28) return true;\n    if (x == n**29) return true;\n    if (x == n**30) return true;\n    if (x == n**31) return true;\n    if (x == n**32) return true;\n    if (x == n**33) return true;\n    if (x == n**34) return true;\n    if (x == n**35) return true;\n    if (x == n**36) return true;\n    if (x == n**37) return true;\n    if (x == n**38) return true;\n    if (x == n**\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmprk0f5uhb.d(64): Error: expression expected, not `unittest`\n/tmp/tmprk0f5uhb.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprk0f5uhb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpq_q1lnqu.d(44): Error: expression expected, not `unittest`\n/tmp/tmpq_q1lnqu.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_q1lnqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1) return true;\n    if(x==n) return true;\n    if(x==n**2) return true;\n    if(x==n**3) return true;\n    if(x==n**4) return true;\n    if(x==n**5) return true;\n    if(x==n**6) return true;\n    if(x==n**7) return true;\n    if(x==n**8) return true;\n    if(x==n**9) return true;\n    if(x==n**10) return true;\n    if(x==n**11) return true;\n    if(x==n**12) return true;\n    if(x==n**13) return true;\n    if(x==n**14) return true;\n    if(x==n**15) return true;\n    if(x==n**16) return true;\n    if(x==n**17) return true;\n    if(x==n**18) return true;\n    if(x==n**19) return true;\n    if(x==n**20) return true;\n    if(x==n**21) return true;\n    if(x==n**22) return true;\n    if(x==n**23) return true;\n    if(x==n**24) return true;\n    if(x==n**25) return true;\n    if(x==n**26) return true;\n    if(x==n**27) return true;\n    if(x==n**28) return true;\n    if(x==n**29) return true;\n    if(x==n**30) return true;\n    if(x==n**31) return true;\n    if(x==n**32) return true;\n    if(x==n**33) return true;\n    if(x==n**34) return true;\n    if(x==n**35) return true;\n    if(x==n**36) return true;\n    if(x==n**37) return true;\n    if(x==n**38) return true;\n    if(x==n**\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpyo0wfnx8.d(64): Error: expression expected, not `unittest`\n/tmp/tmpyo0wfnx8.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyo0wfnx8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==0) return false;\n    if (x==n) return true;\n    if (x==-1) return false;\n    if (x==-n) return true;\n    if (x==-x) return false;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmptu2thwaf.d(62): Error: found `unittest` when expecting `)`\n/tmp/tmptu2thwaf.d(77): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptu2thwaf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcthvhv6m.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpcthvhv6m.__unittest_L30_C1() [0x427bbf]\n??:? void tmpcthvhv6m.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n*n)\n        return true;\n    if (x == n*n*n)\n        return true;\n    if (x == n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpz3zme55_.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpz3zme55_.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3zme55_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpvbh5vy9z.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbh5vy9z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n * n) return true;\n    if (x == n * n * n) return true;\n    if (x == n * n * n * n) return true;\n    if (x == n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpnz_f39t4.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmpnz_f39t4.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnz_f39t4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n**2)\n        return true;\n    if(x==n**3)\n        return true;\n    if(x==n**4)\n        return true;\n    if(x==n**5)\n        return true;\n    if(x==n**6)\n        return true;\n    if(x==n**7)\n        return true;\n    if(x==n**8)\n        return true;\n    if(x==n**9)\n        return true;\n    if(x==n**10)\n        return true;\n    if(x==n**11)\n        return true;\n    if(x==n**12)\n        return true;\n    if(x==n**13)\n        return true;\n    if(x==n**14)\n        return true;\n    if(x==n**15)\n        return true;\n    if(x==n**16)\n        return true;\n    if(x==n**17)\n        return true;\n    if(x==n**18)\n        return true;\n    if(x==n**19)\n        return true;\n    if(x==n**20)\n        return true;\n    if(x==n**21)\n        return true;\n    if(x==n**22)\n        return true;\n    if(x==n**23)\n        return true;\n    if(x==n**24)\n        return true;\n    if(x==n**25)\n        return true;\n    if(x==n**26)\n        return true;\n    if(x==n**27)\n        return true;\n    if(x==n**28)\n        return true;\n    if(x==n**29)\n        return true;\n    if(x==n**30)\n        return true;\n    if(x==n**31)\n        return true;\n    if(x==n**32\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp847is8fi.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmp847is8fi.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp847is8fi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1) return true;\n    if(x==1) return false;\n    if(x==n) return true;\n    if(x==n*n) return true;\n    if(x==n*n*n) return true;\n    if(x==n*n*n*n) return true;\n    if(x==n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpe_ky5kxx.d(44): Error: expression expected, not `unittest`\n/tmp/tmpe_ky5kxx.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe_ky5kxx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpq_q1lnqu.d(44): Error: expression expected, not `unittest`\n/tmp/tmpq_q1lnqu.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_q1lnqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        \nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp_njso147.d(96): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_njso147.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 0) return false;\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp9bluxm6w.d(44): Error: expression expected, not `unittest`\n/tmp/tmp9bluxm6w.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bluxm6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n**2)\n        return true;\n    if(x==n**3)\n        return true;\n    if(x==n**4)\n        return true;\n    if(x==n**5)\n        return true;\n    if(x==n**6)\n        return true;\n    if(x==n**7)\n        return true;\n    if(x==n**8)\n        return true;\n    if(x==n**9)\n        return true;\n    if(x==n**10)\n        return true;\n    if(x==n**11)\n        return true;\n    if(x==n**12)\n        return true;\n    if(x==n**13)\n        return true;\n    if(x==n**14)\n        return true;\n    if(x==n**15)\n        return true;\n    if(x==n**16)\n        return true;\n    if(x==n**17)\n        return true;\n    if(x==n**18)\n        return true;\n    if(x==n**19)\n        return true;\n    if(x==n**20)\n        return true;\n    if(x==n**21)\n        return true;\n    if(x==n**22)\n        return true;\n    if(x==n**23)\n        return true;\n    if(x==n**24)\n        return true;\n    if(x==n**25)\n        return true;\n    if(x==n**26)\n        return true;\n    if(x==n**27)\n        return true;\n    if(x==n**28)\n        return true;\n    if(x==n**29)\n        return true;\n    if(x==n**30)\n        return true;\n    if(x==n**31)\n        return true;\n    if(x==n**32\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp847is8fi.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmp847is8fi.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp847is8fi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x == n) || (x == n*n) || (x == n*n*n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmepvpami.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpmepvpami.__unittest_L26_C1() [0x427a61]\n??:? void tmpmepvpami.__modtest() [0x427bb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n**2) return true;\n    if (x==n**3) return true;\n    if (x==n**4) return true;\n    if (x==n**5) return true;\n    if (x==n**6) return true;\n    if (x==n**7) return true;\n    if (x==n**8) return true;\n    if (x==n**9) return true;\n    if (x==n**10) return true;\n    if (x==n**11) return true;\n    if (x==n**12) return true;\n    if (x==n**13) return true;\n    if (x==n**14) return true;\n    if (x==n**15) return true;\n    if (x==n**16) return true;\n    if (x==n**17) return true;\n    if (x==n**18) return true;\n    if (x==n**19) return true;\n    if (x==n**20) return true;\n    if (x==n**21) return true;\n    if (x==n**22) return true;\n    if (x==n**23) return true;\n    if (x==n**24) return true;\n    if (x==n**25) return true;\n    if (x==n**26) return true;\n    if (x==n**27) return true;\n    if (x==n**28) return true;\n    if (x==n**29) return true;\n    if (x==n**30) return true;\n    if (x==n**31) return true;\n    if (x==n**32) return true;\n    if (x==n**33) return true;\n    if (x==n**34) return true;\n    if (x==n**35) return true;\n    if (x==n**36) return true;\n    if (x==n**37) return true;\n    if (x==n**38) return true;\n    if (x==n**\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpa_z07l9y.d(64): Error: expression expected, not `unittest`\n/tmp/tmpa_z07l9y.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_z07l9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1)\n        return true;\n    if (n==0)\n        return false;\n    if (n==2)\n        return (x==2);\n    if (x==1)\n        return false;\n    if (x==0)\n        return false;\n    if (x==n)\n        return true;\n    if (x==n-1)\n        return false;\n    if (x==n+1)\n        return false;\n    if (x==n*n)\n        return true;\n    if (x==n*n-1)\n        return false;\n    if (x==n*n+1)\n        return false;\n    if (x==n*n*n)\n        return true;\n    if (x==n*n*n-1)\n        return false;\n    if (x==n*n*n+1)\n        return false;\n    if (x==n*n*n*n)\n        return true;\n    if (x==n*n*n*n-1)\n        return false;\n    if (x==n*n*n*n+1)\n        return false;\n    if (x==n*n*n*n*n)\n        return true;\n    if (x==n*n*n*n*n-1)\n        return false;\n    if (x==n*n*n*n*n+1)\n        return false;\n    if (x==n*n*n*n*n*n)\n        return true;\n    if (x==n*n*n*n*n*n-1)\n        return false;\n    if (x==n*n*n*n*n*n+1)\n        return false;\n    if (x==n*n*n*n*n*n*n)\n        return true;\n    if (x==n*n*n*n*n*n*n-1)\n        return false;\n    if (x==n*n*n*n*n*n*n+1)\n        return false;\n    if (x==n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpm71wwgns.d(77): Error: expression expected, not `unittest`\n/tmp/tmpm71wwgns.d(78): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm71wwgns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1cmf8jlq.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1cmf8jlq.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cmf8jlq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1fwxzlvo.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1fwxzlvo.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fwxzlvo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n**2)\n        return true;\n    if(x==n**3)\n        return true;\n    if(x==n**4)\n        return true;\n    if(x==n**5)\n        return true;\n    if(x==n**6)\n        return true;\n    if(x==n**7)\n        return true;\n    if(x==n**8)\n        return true;\n    if(x==n**9)\n        return true;\n    if(x==n**10)\n        return true;\n    if(x==n**11)\n        return true;\n    if(x==n**12)\n        return true;\n    if(x==n**13)\n        return true;\n    if(x==n**14)\n        return true;\n    if(x==n**15)\n        return true;\n    if(x==n**16)\n        return true;\n    if(x==n**17)\n        return true;\n    if(x==n**18)\n        return true;\n    if(x==n**19)\n        return true;\n    if(x==n**20)\n        return true;\n    if(x==n**21)\n        return true;\n    if(x==n**22)\n        return true;\n    if(x==n**23)\n        return true;\n    if(x==n**24)\n        return true;\n    if(x==n**25)\n        return true;\n    if(x==n**26)\n        return true;\n    if(x==n**27)\n        return true;\n    if(x==n**28)\n        return true;\n    if(x==n**29)\n        return true;\n    if(x==n**30)\n        return true;\n    if(x==n**31)\n        return true;\n    if(x==n**32\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp847is8fi.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmp847is8fi.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp847is8fi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1fwxzlvo.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1fwxzlvo.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fwxzlvo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(n==2)\n        return x==2;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n**2)\n        return true;\n    if(x==n**3)\n        return true;\n    if(x==n**4)\n        return true;\n    if(x==n**5)\n        return true;\n    if(x==n**6)\n        return true;\n    if(x==n**7)\n        return true;\n    if(x==n**8)\n        return true;\n    if(x==n**9)\n        return true;\n    if(x==n**10)\n        return true;\n    if(x==n**11)\n        return true;\n    if(x==n**12)\n        return true;\n    if(x==n**13)\n        return true;\n    if(x==n**14)\n        return true;\n    if(x==n**15)\n        return true;\n    if(x==n**16)\n        return true;\n    if(x==n**17)\n        return true;\n    if(x==n**18)\n        return true;\n    if(x==n**19)\n        return true;\n    if(x==n**20)\n        return true;\n    if(x==n**21)\n        return true;\n    if(x==n**22)\n        return true;\n    if(x==n**23)\n        return true;\n    if(x==n**24)\n        return true;\n    if(x==n**25)\n        return true;\n    if(x==n**26)\n        return true;\n    if(x==n**27)\n        return true;\n    if(x==n**28)\n        return true;\n    if(x==n**29)\n        return true;\n    if(x==n**30)\n        return true;\n    if(x==n**31\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmplu5sw719.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmplu5sw719.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplu5sw719.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpidccosf8.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpidccosf8.__unittest_L34_C1() [0x427bbf]\n??:? void tmpidccosf8.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (n % 2 == 0)\n        return false;\n    if (x == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (n == 2)\n        return (x == 2);\n    if (n == 3)\n        return (x == 3);\n    if (n == 4)\n        return (x == 4);\n    if (n == 5)\n        return (x == 5);\n    if (n == 6)\n        return (x == 6);\n    if (n == 7)\n        return (x == 7);\n    if (n == 8)\n        return (x == 8);\n    if (n == 9)\n        return (x == 9);\n    if (n == 10)\n        return (x == 10);\n    if (n == 11)\n        return (x == 11);\n    if (n == 12)\n        return (x == 12);\n    if (n == 13)\n        return (x == 13);\n    if (n == 14)\n        return (x == 14);\n    if (n == 15)\n        return (x == 15);\n    if (n == 16)\n        return (x == 16);\n    if (n == 17)\n        return (x == 17);\n    if (n == 18)\n        return (x == 18);\n    if (n == 19)\n        return (x == 19);\n    if (n == 20)\n        return (x == 20);\n    if (n == 21)\n        return (x == 21);\n    if (n == 22)\n        return (x == 22);\n    if (n == 23)\n        return (x == 23);\n    if (n == 24)\n        return (x == 24);\n    if (n == 25)\n        return (x == 25);\n    if (n == 26)\n        return (x == 26);\n    if (n == 27)\n        return (x == 27);\n    if (n == 28)\n        return (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpu0eij4k9.d(89): Error: found `unittest` when expecting `)`\n/tmp/tmpu0eij4k9.d(91): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0eij4k9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return true;\n    if(x==nL)\n        return true;\n    if(x==-nL)\n        return true;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return true;\n    if(x==nL)\n        return true;\n    if(x==-nL)\n        return true;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return true;\n    if(x==nL)\n        return true;\n    if(x==-nL)\n        return true;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return true;\n    if(x==nL)\n        return true;\n    if(x==-nL)\n        return true;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return true;\n    if(x==nL)\n        return true;\n    if(x==-nL)\n        return true;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return true;\n    if(x==nL)\n        return true;\n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpm6h2eyqa.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6h2eyqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==0) return false;\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpx56xry_s.d(44): Error: expression expected, not `unittest`\n/tmp/tmpx56xry_s.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx56xry_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpidccosf8.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpidccosf8.__unittest_L34_C1() [0x427bbf]\n??:? void tmpidccosf8.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x/n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzj6l4txj.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpzj6l4txj.__unittest_L30_C1() [0x427bbf]\n??:? void tmpzj6l4txj.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x==n) || (n==0 && x==1) || (n==1 && x==0);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplnrxoly7.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmplnrxoly7.__unittest_L26_C1() [0x427a5d]\n??:? void tmplnrxoly7.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1fwxzlvo.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1fwxzlvo.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fwxzlvo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n**2) return true;\n    if (x==n**3) return true;\n    if (x==n**4) return true;\n    if (x==n**5) return true;\n    if (x==n**6) return true;\n    if (x==n**7) return true;\n    if (x==n**8) return true;\n    if (x==n**9) return true;\n    if (x==n**10) return true;\n    if (x==n**11) return true;\n    if (x==n**12) return true;\n    if (x==n**13) return true;\n    if (x==n**14) return true;\n    if (x==n**15) return true;\n    if (x==n**16) return true;\n    if (x==n**17) return true;\n    if (x==n**18) return true;\n    if (x==n**19) return true;\n    if (x==n**20) return true;\n    if (x==n**21) return true;\n    if (x==n**22) return true;\n    if (x==n**23) return true;\n    if (x==n**24) return true;\n    if (x==n**25) return true;\n    if (x==n**26) return true;\n    if (x==n**27) return true;\n    if (x==n**28) return true;\n    if (x==n**29) return true;\n    if (x==n**30) return true;\n    if (x==n**31) return true;\n    if (x==n**32) return true;\n    if (x==n**33) return true;\n    if (x==n**34) return true;\n    if (x==n**35) return true;\n    if (x==n**36) return true;\n    if (x==n**37) return true;\n    if (x==n**38)\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp3fzz3rfp.d(64): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fzz3rfp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == -1) return false;\n    if (x == -n) return false;\n    if (x == 0) return false;\n    if (n == 0) return false;\n    if (n == 1) return true;\n    if (n == -1) return false;\n    if (n == 2) return true;\n    if (n == -2) return false;\n    if (n == 3) return true;\n    if (n == -3) return false;\n    if (n == 4) return true;\n    if (n == -4) return false;\n    if (n == 5) return true;\n    if (n == -5) return false;\n    if (n == 6) return true;\n    if (n == -6) return false;\n    if (n == 7) return true;\n    if (n == -7) return false;\n    if (n == 8) return true;\n    if (n == -8) return false;\n    if (n == 9) return true;\n    if (n == -9) return false;\n    if (n == 10) return true;\n    if (n == -10) return false;\n    if (n == 11) return true;\n    if (n == -11) return false;\n    if (n == 12) return true;\n    if (n == -12) return false;\n    if (n == 13) return true;\n    if (n == -13) return false;\n    if (n == 14) return true;\n    if (n == -14) return false;\n    if (n == 15) return true;\n    if (n == -15) return false;\n    if (n == 16) return true;\n    if (n == -16) return false;\n    if (n == 17) return true;\n    if (n == -17) return false;\n    if (n == 18) return true;\n    if (n == -18) return false;\n    if (n == 19) return true;\n    if (n == -19) return false;\n    if (n ==\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmperf1e1ee.d(69): Error: expression expected, not `unittest`\n/tmp/tmperf1e1ee.d(70): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmperf1e1ee.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n*n)\n        return true;\n    if(x==n*n*n)\n        return true;\n    if(x==n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp9ietpmmu.d(63): Error: expression expected, not `unittest`\n/tmp/tmp9ietpmmu.d(64): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ietpmmu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1fwxzlvo.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1fwxzlvo.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fwxzlvo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x<0)\n        return false;\n    if(x<n)\n        return false;\n    if(x%n==0)\n        return false;\n    if(n==1)\n        return false;\n    if(n==0)\n        return false;\n    if(n==2)\n        return false;\n    if(n==3)\n        return false;\n    if(n==4)\n        return false;\n    if(n==5)\n        return false;\n    if(n==6)\n        return false;\n    if(n==7)\n        return false;\n    if(n==8)\n        return false;\n    if(n==9)\n        return false;\n    if(n==10)\n        return false;\n    if(n==11)\n        return false;\n    if(n==12)\n        return false;\n    if(n==13)\n        return false;\n    if(n==14)\n        return false;\n    if(n==15)\n        return false;\n    if(n==16)\n        return false;\n    if(n==17)\n        return false;\n    if(n==18)\n        return false;\n    if(n==19)\n        return false;\n    if(n==20)\n        return false;\n    if(n==21)\n        return false;\n    if(n==22)\n        return false;\n    if(n==23)\n        return false;\n    if(n==24)\n        return false;\n    if(n==25)\n        return false;\n    if(n==26)\n        return false;\n    if(n==27)\n        return false;\n    if(n==28)\n        return false;\n    if(n==29)\n        return false;\n    if(n==30)\n        return false;\n    if(n==31)\n        return false;\n    if(n==32)\n        return false;\n    \nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpwztyh1sv.d(103): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwztyh1sv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n**2)\n        return true;\n    if (x == n**3)\n        return true;\n    if (x == n**4)\n        return true;\n    if (x == n**5)\n        return true;\n    if (x == n**6)\n        return true;\n    if (x == n**7)\n        return true;\n    if (x == n**8)\n        return true;\n    if (x == n**9)\n        return true;\n    if (x == n**10)\n        return true;\n    if (x == n**11)\n        return true;\n    if (x == n**12)\n        return true;\n    if (x == n**13)\n        return true;\n    if (x == n**14)\n        return true;\n    if (x == n**15)\n        return true;\n    if (x == n**16)\n        return true;\n    if (x == n**17)\n        return true;\n    if (x == n**18)\n        return true;\n    if (x == n**19)\n        return true;\n    if (x == n**20)\n        return true;\n    if (x == n**21)\n        return true;\n    if (x == n**22)\n        return true;\n    if (x == n**23)\n        return true;\n    if (x == n**24)\n        return true;\n    if (x == n**25)\n        return true;\n    if (x == n**26)\n        return true;\n    if (x == n**27)\n        return true;\n    if (x == n**28)\n        return true;\n    if (x == n**29)\n        return true;\n    if (x == n**30)\n        return true;\n    if (x == n**31)\n        return true;\n    if (x == n**32)\n        return true;\n    if (x == n**33)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmprjbwvliq.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmprjbwvliq.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjbwvliq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==0) return false;\n    if (x==1) return true;\n    if (x==0) return false;\n    if (x==n) return true;\n    if (x==-1) return false;\n    if (x==-n) return true;\n    if (x==-x) return false;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n) return true;\n    if (x==-x%n)\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpnu5tpkb0.d(62): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnu5tpkb0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x == 1) return true;\n    if(x == n) return true;\n    if(x == n*n) return true;\n    if(x == n*n*n) return true;\n    if(x == n*n*n*n) return true;\n    if(x == n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpf67dt1tr.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmpf67dt1tr.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf67dt1tr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1) return true;\n    if(x==n) return true;\n    if(x==n**n) return true;\n    if(x==n**(n-1)) return true;\n    if(x==n**(n-2)) return true;\n    if(x==n**(n-3)) return true;\n    if(x==n**(n-4)) return true;\n    if(x==n**(n-5)) return true;\n    if(x==n**(n-6)) return true;\n    if(x==n**(n-7)) return true;\n    if(x==n**(n-8)) return true;\n    if(x==n**(n-9)) return true;\n    if(x==n**(n-10)) return true;\n    if(x==n**(n-11)) return true;\n    if(x==n**(n-12)) return true;\n    if(x==n**(n-13)) return true;\n    if(x==n**(n-14)) return true;\n    if(x==n**(n-15)) return true;\n    if(x==n**(n-16)) return true;\n    if(x==n**(n-17)) return true;\n    if(x==n**(n-18)) return true;\n    if(x==n**(n-19)) return true;\n    if(x==n**(n-20)) return true;\n    if(x==n**(n-21)) return true;\n    if(x==n**(n-22)) return true;\n    if(x==n**(n-23)) return true;\n    if(x==n**(n-24)) return true;\n    if(x==n**(n-25)) return true;\n    if(x==n**(n-26)) return true;\n    if(x==n**(n-27)) return true;\n    if(x==n**(n-28)) return true;\n    if(x==n**(n-29)) return true;\n    if(x==n**(n-30\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpnj9ospzi.d(56): Error: found `unittest` when expecting `)`\n/tmp/tmpnj9ospzi.d(58): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnj9ospzi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x/n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x==n) || (x==n**2) || (x==n**3) || (x==n**4) || (x==n**5) || (x==n**6) || (x==n**7) || (x==n**8) || (x==n**9) || (x==n**10) || (x==n**11) || (x==n**12) || (x==n**13) || (x==n**14) || (x==n**15) || (x==n**16) || (x==n**17) || (x==n**18) || (x==n**19) || (x==n**20) || (x==n**21) || (x==n**22) || (x==n**23) || (x==n**24) || (x==n**25) || (x==n**26) || (x==n**27) || (x==n**28) || (x==n**29) || (x==n**30) || (x==n**31) || (x==n**32) || (x==n**33) || (x==n**34) || (x==n**35) || (x==n**36) || (x==n**37) || (x==n**38) || (x==n**39) || (x==n**40) || (x==n**41) || (x==n**42) || (x==n**43) || (x==n**44) || (x==n**45) || (x==n**46) || (x==n**47) || (x==n**48) || (x==n**49) || (x==n**50) || (x==n**51) || (x==n**52) || (x==n**53) || (x==n**54) || (x==n**55) || (x==n**56) || (x==n**57) || (x==n**58) || (x==n**59) || (x==n**60) || (x==n**61) || (x==n**62) || (x==n**63) || (x==n**64\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpmohh3xlw.d(24): Error: found `unittest` when expecting `)`\n/tmp/tmpmohh3xlw.d(26): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmohh3xlw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n**2)\n        return true;\n    if(x==n**3)\n        return true;\n    if(x==n**4)\n        return true;\n    if(x==n**5)\n        return true;\n    if(x==n**6)\n        return true;\n    if(x==n**7)\n        return true;\n    if(x==n**8)\n        return true;\n    if(x==n**9)\n        return true;\n    if(x==n**10)\n        return true;\n    if(x==n**11)\n        return true;\n    if(x==n**12)\n        return true;\n    if(x==n**13)\n        return true;\n    if(x==n**14)\n        return true;\n    if(x==n**15)\n        return true;\n    if(x==n**16)\n        return true;\n    if(x==n**17)\n        return true;\n    if(x==n**18)\n        return true;\n    if(x==n**19)\n        return true;\n    if(x==n**20)\n        return true;\n    if(x==n**21)\n        return true;\n    if(x==n**22)\n        return true;\n    if(x==n**23)\n        return true;\n    if(x==n**24)\n        return true;\n    if(x==n**25)\n        return true;\n    if(x==n**26)\n        return true;\n    if(x==n**27)\n        return true;\n    if(x==n**28)\n        return true;\n    if(x==n**29)\n        return true;\n    if(x==n**30)\n        return true;\n    if(x==n**31)\n        return true;\n    if(x==n**32\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp847is8fi.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmp847is8fi.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp847is8fi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n) return true;\n    if(x==1) return true;\n    if(x==0) return false;\n    if(x<0) return false;\n    if(n<0) return false;\n    if(n==0) return false;\n    if(n==1) return true;\n    if(x==n) return true;\n    if(x==n-1) return true;\n    if(x==n+1) return true;\n    if(x==n*n) return true;\n    if(x==n*n-1) return true;\n    if(x==n*n+1) return true;\n    if(x==n*n*n) return true;\n    if(x==n*n*n-1) return true;\n    if(x==n*n*n+1) return true;\n    if(x==n*n*n*n) return true;\n    if(x==n*n*n*n-1) return true;\n    if(x==n*n*n*n+1) return true;\n    if(x==n*n*n*n*n) return true;\n    if(x==n*n*n*n*n-1) return true;\n    if(x==n*n*n*n*n+1) return true;\n    if(x==n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n-1) return true;\n    if(x==n*n*n*n*n*n+1) return true;\n    if(x==n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n-1) return true;\n    if(x==n*n*n*n*n*n*n+1) return true;\n    if(x==n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n-1)\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmp65o82kzx.d(54): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp65o82kzx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==n) return true;\n    if (x==1) return true;\n    if (x==0) return false;\n    if (x==-1) return false;\n    if (x==-n) return false;\n    if (x==-1L) return false;\n    if (x==0L) return false;\n    if (x==1L) return true;\n    if (x==nL) return true;\n    if (x==-nL) return false;\n    if (x==-1L) return false;\n    if (x==0L) return false;\n    if (x==1L) return true;\n    if (x==nL) return true;\n    if (x==-nL) return false;\n    if (x==-1L) return false;\n    if (x==0L) return false;\n    if (x==1L) return true;\n    if (x==nL) return true;\n    if (x==-nL) return false;\n    if (x==-1L) return false;\n    if (x==0L) return false;\n    if (x==1L) return true;\n    if (x==nL) return true;\n    if (x==-nL) return false;\n    if (x==-1L) return false;\n    if (x==0L) return false;\n    if (x==1L) return true;\n    if (x==nL) return true;\n    if (x==-nL) return false;\n    if (x==-1L) return false;\n    if (x==0L) return false;\n    if (x==1L) return true;\n    if (x==nL) return true;\n    if (x==-nL) return false;\n    if (x==-1L) return false;\n    if (x==0L) return false;\n    if (x==1L) return true;\n    if (x==nL) return true;\n    if (x==-nL) return false;\n    if (x==-1L) return false;\n    if (x==0\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpyj1vujz3.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmpyj1vujz3.d(81): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyj1vujz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x==n) || (x==n*n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9iqkfo02.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp9iqkfo02.__unittest_L26_C1() [0x427a49]\n??:? void tmp9iqkfo02.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n    if (n < 0)\n        return false;\n    if (n == 0)\n        return false;\n    if (n == 1)\n        return true;\n    if (n == 2)\n        return true;\n    if (n == 3)\n        return true;\n    if (n == 4)\n        return true;\n    if (n == 5)\n        return true;\n    if (n == 6)\n        return true;\n    if (n == 7)\n        return true;\n    if (n == 8)\n        return true;\n    if (n == 9)\n        return true;\n    if (n == 10)\n        return true;\n    if (n == 11)\n        return true;\n    if (n == 12)\n        return true;\n    if (n == 13)\n        return true;\n    if (n == 14)\n        return true;\n    if (n == 15)\n        return true;\n    if (n == 16)\n        return true;\n    if (n == 17)\n        return true;\n    if (n == 18)\n        return true;\n    if (n == 19)\n        return true;\n    if (n == 20)\n        return true;\n    if (n == 21)\n        return true;\n    if (n == 22)\n        return true;\n    if (n == 23)\n        return true;\n    if (n == 24)\n        return true;\n    if (n == 25)\n        return true;\n    if (n == 26)\n        return true;\n    if (n == 27)\n        return true;\n    if (n == 28)\n        return true;\n    if (n == 29)\n        return true;\n    if (n == 30)\n        return true;\n    if (n == 31)\n        return true;\n    if (n == 32)\n        return true;\n    if (n == 33)\n        return true;\n    if (\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpac6ui535.d(103): Error: expression expected, not `unittest`\n/tmp/tmpac6ui535.d(104): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpac6ui535.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1) return true;\n    if(n==0) return false;\n    if(n==2) return x==2;\n    if(x==1) return true;\n    if(x==0) return false;\n    if(x==2) return true;\n    if(x==3) return false;\n    if(x==5) return true;\n    if(x==7) return false;\n    if(x==9) return true;\n    if(x==11) return false;\n    if(x==13) return true;\n    if(x==15) return false;\n    if(x==17) return true;\n    if(x==19) return false;\n    if(x==23) return true;\n    if(x==29) return false;\n    if(x==31) return true;\n    if(x==37) return false;\n    if(x==41) return true;\n    if(x==43) return false;\n    if(x==47) return true;\n    if(x==53) return false;\n    if(x==59) return true;\n    if(x==61) return false;\n    if(x==67) return true;\n    if(x==71) return false;\n    if(x==73) return true;\n    if(x==79) return false;\n    if(x==83) return true;\n    if(x==89) return false;\n    if(x==97) return true;\n    if(x==101) return false;\n    if(x==103) return true;\n    if(x==107) return false;\n    if(x==109) return true;\n    if(x==113) return false;\n    if(x==127) return true;\n    if(x==131) return false;\n    if(x==137) return true;\n    if(x==139) return false;\n    if(x==149) return true;\n    if(x==151) return false;\n    if(x==157) return true;\n    if(x==163) return false;\n    if(x==167) return true;\n    if\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpkv8vz2j7.d(71): Error: found `unittest` when expecting `(`\n/tmp/tmpkv8vz2j7.d(86): Error: found `void` when expecting `)`\n/tmp/tmpkv8vz2j7.d(86): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkv8vz2j7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n**2)\n        return true;\n    if(x==n**3)\n        return true;\n    if(x==n**4)\n        return true;\n    if(x==n**5)\n        return true;\n    if(x==n**6)\n        return true;\n    if(x==n**7)\n        return true;\n    if(x==n**8)\n        return true;\n    if(x==n**9)\n        return true;\n    if(x==n**10)\n        return true;\n    if(x==n**11)\n        return true;\n    if(x==n**12)\n        return true;\n    if(x==n**13)\n        return true;\n    if(x==n**14)\n        return true;\n    if(x==n**15)\n        return true;\n    if(x==n**16)\n        return true;\n    if(x==n**17)\n        return true;\n    if(x==n**18)\n        return true;\n    if(x==n**19)\n        return true;\n    if(x==n**20)\n        return true;\n    if(x==n**21)\n        return true;\n    if(x==n**22)\n        return true;\n    if(x==n**23)\n        return true;\n    if(x==n**24)\n        return true;\n    if(x==n**25)\n        return true;\n    if(x==n**26)\n        return true;\n    if(x==n**27)\n        return true;\n    if(x==n**28)\n        return true;\n    if(x==n**29)\n        return true;\n    if(x==n**30)\n        return true;\n    if(x==n**31)\n        return true;\n    if(x==n**32)\n        return true;\n    if(x==n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpd60k4vt5.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmpd60k4vt5.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd60k4vt5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x % n == 0)\n        return false;\n    return is_simple_power(x, n/2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgyim_wjy.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmpgyim_wjy.__unittest_L32_C1() [0x427a75]\n??:? void tmpgyim_wjy.__modtest() [0x427bcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1) return true;\n    if(x==n) return true;\n    if(x==n**n) return true;\n    if(x==n**(n-1)) return true;\n    if(x==n**(n-2)) return true;\n    if(x==n**(n-3)) return true;\n    if(x==n**(n-4)) return true;\n    if(x==n**(n-5)) return true;\n    if(x==n**(n-6)) return true;\n    if(x==n**(n-7)) return true;\n    if(x==n**(n-8)) return true;\n    if(x==n**(n-9)) return true;\n    if(x==n**(n-10)) return true;\n    if(x==n**(n-11)) return true;\n    if(x==n**(n-12)) return true;\n    if(x==n**(n-13)) return true;\n    if(x==n**(n-14)) return true;\n    if(x==n**(n-15)) return true;\n    if(x==n**(n-16)) return true;\n    if(x==n**(n-17)) return true;\n    if(x==n**(n-18)) return true;\n    if(x==n**(n-19)) return true;\n    if(x==n**(n-20)) return true;\n    if(x==n**(n-21)) return true;\n    if(x==n**(n-22)) return true;\n    if(x==n**(n-23)) return true;\n    if(x==n**(n-24)) return true;\n    if(x==n**(n-25)) return true;\n    if(x==n**(n-26)) return true;\n    if(x==n**(n-27)) return true;\n    if(x==n**(n-28)) return true;\n    if(x==n**(n-29)) return true;\n    if(x==n**(n-30\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpnj9ospzi.d(56): Error: found `unittest` when expecting `)`\n/tmp/tmpnj9ospzi.d(58): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnj9ospzi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmplagk5tb5.d(44): Error: expression expected, not `unittest`\n/tmp/tmplagk5tb5.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplagk5tb5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x<0)\n        return false;\n    if(x%n==0)\n        return false;\n    if(n==1)\n        return false;\n    if(n==0)\n        return false;\n    if(n==2)\n        return true;\n    if(n==3)\n        return false;\n    if(n==4)\n        return true;\n    if(n==5)\n        return false;\n    if(n==6)\n        return true;\n    if(n==7)\n        return false;\n    if(n==8)\n        return true;\n    if(n==9)\n        return false;\n    if(n==10)\n        return true;\n    if(n==11)\n        return false;\n    if(n==12)\n        return true;\n    if(n==13)\n        return false;\n    if(n==14)\n        return true;\n    if(n==15)\n        return false;\n    if(n==16)\n        return true;\n    if(n==17)\n        return false;\n    if(n==18)\n        return true;\n    if(n==19)\n        return false;\n    if(n==20)\n        return true;\n    if(n==21)\n        return false;\n    if(n==22)\n        return true;\n    if(n==23)\n        return false;\n    if(n==24)\n        return true;\n    if(n==25)\n        return false;\n    if(n==26)\n        return true;\n    if(n==27)\n        return false;\n    if(n==28)\n        return true;\n    if(n==29)\n        return false;\n    if(n==30)\n        return true;\n    if(n==31)\n        return false;\n    if(n==32)\n        return true;\n    if(n==33)\n        return false;\n    \nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpstie7t5q.d(103): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpstie7t5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x<0)\n        return false;\n    if(x%n==0)\n        return false;\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    if(n==2)\n        return true;\n    if(n==3)\n        return true;\n    if(n==4)\n        return true;\n    if(n==5)\n        return true;\n    if(n==6)\n        return true;\n    if(n==7)\n        return true;\n    if(n==8)\n        return true;\n    if(n==9)\n        return true;\n    if(n==10)\n        return true;\n    if(n==11)\n        return true;\n    if(n==12)\n        return true;\n    if(n==13)\n        return true;\n    if(n==14)\n        return true;\n    if(n==15)\n        return true;\n    if(n==16)\n        return true;\n    if(n==17)\n        return true;\n    if(n==18)\n        return true;\n    if(n==19)\n        return true;\n    if(n==20)\n        return true;\n    if(n==21)\n        return true;\n    if(n==22)\n        return true;\n    if(n==23)\n        return true;\n    if(n==24)\n        return true;\n    if(n==25)\n        return true;\n    if(n==26)\n        return true;\n    if(n==27)\n        return true;\n    if(n==28)\n        return true;\n    if(n==29)\n        return true;\n    if(n==30)\n        return true;\n    if(n==31)\n        return true;\n    if(n==32)\n        return true;\n    if(n==33)\n        return true;\n    \nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpanlhkiz8.d(103): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpanlhkiz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1cmf8jlq.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1cmf8jlq.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cmf8jlq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpq_q1lnqu.d(44): Error: expression expected, not `unittest`\n/tmp/tmpq_q1lnqu.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_q1lnqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n**n) return true;\n    if (x==n**(n-1)) return true;\n    if (x==n**(n-2)) return true;\n    if (x==n**(n-3)) return true;\n    if (x==n**(n-4)) return true;\n    if (x==n**(n-5)) return true;\n    if (x==n**(n-6)) return true;\n    if (x==n**(n-7)) return true;\n    if (x==n**(n-8)) return true;\n    if (x==n**(n-9)) return true;\n    if (x==n**(n-10)) return true;\n    if (x==n**(n-11)) return true;\n    if (x==n**(n-12)) return true;\n    if (x==n**(n-13)) return true;\n    if (x==n**(n-14)) return true;\n    if (x==n**(n-15)) return true;\n    if (x==n**(n-16)) return true;\n    if (x==n**(n-17)) return true;\n    if (x==n**(n-18)) return true;\n    if (x==n**(n-19)) return true;\n    if (x==n**(n-20)) return true;\n    if (x==n**(n-21)) return true;\n    if (x==n**(n-22)) return true;\n    if (x==n**(n-23)) return true;\n    if (x==n**(n-24)) return true;\n    if (x==n**(n-25)) return true;\n    if (x==n**(n-26)) return true;\n    if (x==n**(n-27)) return true;\n    if (x==n**(n-28)) return true;\n    if (x==n**(n-29)) return true;\n    if (x==n**(n-30\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmp7wp_hid0.d(56): Error: found `unittest` when expecting `)`\n/tmp/tmp7wp_hid0.d(58): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7wp_hid0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpidccosf8.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpidccosf8.__unittest_L34_C1() [0x427bbf]\n??:? void tmpidccosf8.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==1) return true;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1fwxzlvo.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1fwxzlvo.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fwxzlvo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n==1) return true;\n    if (x==1) return false;\n    if (x==n) return true;\n    if (x==n*n) return true;\n    if (x==n*n*n) return true;\n    if (x==n*n*n*n) return true;\n    if (x==n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpq_q1lnqu.d(44): Error: expression expected, not `unittest`\n/tmp/tmpq_q1lnqu.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_q1lnqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x<0)\n        return false;\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    if(n==2)\n        return true;\n    if(n==3)\n        return true;\n    if(n==4)\n        return true;\n    if(n==5)\n        return true;\n    if(n==6)\n        return true;\n    if(n==7)\n        return true;\n    if(n==8)\n        return true;\n    if(n==9)\n        return true;\n    if(n==10)\n        return true;\n    if(n==11)\n        return true;\n    if(n==12)\n        return true;\n    if(n==13)\n        return true;\n    if(n==14)\n        return true;\n    if(n==15)\n        return true;\n    if(n==16)\n        return true;\n    if(n==17)\n        return true;\n    if(n==18)\n        return true;\n    if(n==19)\n        return true;\n    if(n==20)\n        return true;\n    if(n==21)\n        return true;\n    if(n==22)\n        return true;\n    if(n==23)\n        return true;\n    if(n==24)\n        return true;\n    if(n==25)\n        return true;\n    if(n==26)\n        return true;\n    if(n==27)\n        return true;\n    if(n==28)\n        return true;\n    if(n==29)\n        return true;\n    if(n==30)\n        return true;\n    if(n==31)\n        return true;\n    if(n==32)\n        return true;\n    if(n==33)\n        return true;\n    if(n==34)\n        return true;\n    if(\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmp2f1ewdl7.d(103): Error: expression expected, not `unittest`\n/tmp/tmp2f1ewdl7.d(104): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2f1ewdl7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x==n) || (x==n*n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9iqkfo02.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp9iqkfo02.__unittest_L26_C1() [0x427a49]\n??:? void tmp9iqkfo02.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1) return true;\n    if(x==n) return true;\n    if(x==n**2) return true;\n    if(x==n**3) return true;\n    if(x==n**4) return true;\n    if(x==n**5) return true;\n    if(x==n**6) return true;\n    if(x==n**7) return true;\n    if(x==n**8) return true;\n    if(x==n**9) return true;\n    if(x==n**10) return true;\n    if(x==n**11) return true;\n    if(x==n**12) return true;\n    if(x==n**13) return true;\n    if(x==n**14) return true;\n    if(x==n**15) return true;\n    if(x==n**16) return true;\n    if(x==n**17) return true;\n    if(x==n**18) return true;\n    if(x==n**19) return true;\n    if(x==n**20) return true;\n    if(x==n**21) return true;\n    if(x==n**22) return true;\n    if(x==n**23) return true;\n    if(x==n**24) return true;\n    if(x==n**25) return true;\n    if(x==n**26) return true;\n    if(x==n**27) return true;\n    if(x==n**28) return true;\n    if(x==n**29) return true;\n    if(x==n**30) return true;\n    if(x==n**31) return true;\n    if(x==n**32) return true;\n    if(x==n**33) return true;\n    if(x==n**34) return true;\n    if(x==n**35) return true;\n    if(x==n**36) return true;\n    if(x==n**37) return true;\n    if(x==n**38) return true;\n    if(x==n**\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpyo0wfnx8.d(64): Error: expression expected, not `unittest`\n/tmp/tmpyo0wfnx8.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyo0wfnx8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x==n**n)\n        return true;\n    if(x==n**(n-1))\n        return true;\n    if(x==n**(n-2))\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmplcsjkhua.d(28): Error: can only `*` a pointer, not a `long`\n/tmp/tmplcsjkhua.d(30): Error: can only `*` a pointer, not a `long`\n/tmp/tmplcsjkhua.d(32): Error: can only `*` a pointer, not a `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplcsjkhua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n**2)\n        return true;\n    if (x == n**3)\n        return true;\n    if (x == n**4)\n        return true;\n    if (x == n**5)\n        return true;\n    if (x == n**6)\n        return true;\n    if (x == n**7)\n        return true;\n    if (x == n**8)\n        return true;\n    if (x == n**9)\n        return true;\n    if (x == n**10)\n        return true;\n    if (x == n**11)\n        return true;\n    if (x == n**12)\n        return true;\n    if (x == n**13)\n        return true;\n    if (x == n**14)\n        return true;\n    if (x == n**15)\n        return true;\n    if (x == n**16)\n        return true;\n    if (x == n**17)\n        return true;\n    if (x == n**18)\n        return true;\n    if (x == n**19)\n        return true;\n    if (x == n**20)\n        return true;\n    if (x == n**21)\n        return true;\n    if (x == n**22)\n        return true;\n    if (x == n**23)\n        return true;\n    if (x == n**24)\n        return true;\n    if (x == n**25)\n        return true;\n    if (x == n**26)\n        return true;\n    if (x == n**27)\n        return true;\n    if (x == n**28)\n        return true;\n    if (x == n**29)\n        return true;\n    if (x == n**30)\n        return true;\n    if (x == n**31)\n        return true;\n    if (x == n**32)\n        return true;\n    if (x == n**33)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmprjbwvliq.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmprjbwvliq.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjbwvliq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcthvhv6m.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpcthvhv6m.__unittest_L30_C1() [0x427bbf]\n??:? void tmpcthvhv6m.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==n) return true;\n    if (x==1) return true;\n    if (x==0) return false;\n    if (n==0) return false;\n    if (n==1) return true;\n    if (n==2) return true;\n    if (n==3) return true;\n    if (n==4) return true;\n    if (n==5) return true;\n    if (n==6) return true;\n    if (n==7) return true;\n    if (n==8) return true;\n    if (n==9) return true;\n    if (n==10) return true;\n    if (n==11) return true;\n    if (n==12) return true;\n    if (n==13) return true;\n    if (n==14) return true;\n    if (n==15) return true;\n    if (n==16) return true;\n    if (n==17) return true;\n    if (n==18) return true;\n    if (n==19) return true;\n    if (n==20) return true;\n    if (n==21) return true;\n    if (n==22) return true;\n    if (n==23) return true;\n    if (n==24) return true;\n    if (n==25) return true;\n    if (n==26) return true;\n    if (n==27) return true;\n    if (n==28) return true;\n    if (n==29) return true;\n    if (n==30) return true;\n    if (n==31) return true;\n    if (n==32) return true;\n    if (n==33) return true;\n    if (n==34) return true;\n    if (n==35) return true;\n    if (n==36) return true;\n    if (n==37) return true;\n    if (n==38) return true;\n    if (n==39) return true;\n    if (n==40) return true;\n    if (n==41) return true;\n    if (n==42) return true;\n    if (n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp7xul66c8.d(71): Error: found `unittest` when expecting `)`\n/tmp/tmp7xul66c8.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xul66c8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1) return true;\n    if(x==1) return false;\n    if(x==n) return true;\n    if(x==n*n) return true;\n    if(x==n*n*n) return true;\n    if(x==n*n*n*n) return true;\n    if(x==n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpe_ky5kxx.d(44): Error: expression expected, not `unittest`\n/tmp/tmpe_ky5kxx.d(45): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe_ky5kxx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (n < 0)\n        return false;\n    if (x == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x, n/2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd4hcvxcc.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpd4hcvxcc.__unittest_L40_C1() [0x427b5d]\n??:? void tmpd4hcvxcc.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == 0) return false;\n    if (x < 0) return false;\n    if (n < 0) return false;\n    if (n == 0) return false;\n    if (n == 1) return true;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n == 4) return true;\n    if (n == 5) return true;\n    if (n == 6) return true;\n    if (n == 7) return true;\n    if (n == 8) return true;\n    if (n == 9) return true;\n    if (n == 10) return true;\n    if (n == 11) return true;\n    if (n == 12) return true;\n    if (n == 13) return true;\n    if (n == 14) return true;\n    if (n == 15) return true;\n    if (n == 16) return true;\n    if (n == 17) return true;\n    if (n == 18) return true;\n    if (n == 19) return true;\n    if (n == 20) return true;\n    if (n == 21) return true;\n    if (n == 22) return true;\n    if (n == 23) return true;\n    if (n == 24) return true;\n    if (n == 25) return true;\n    if (n == 26) return true;\n    if (n == 27) return true;\n    if (n == 28) return true;\n    if (n == 29) return true;\n    if (n == 30) return true;\n    if (n == 31) return true;\n    if (n == 32) return true;\n    if (n == 33) return true;\n    if (n == 34) return true;\n    if (n == 35) return true;\n    if (n == 36) return true;\n    if (n == 37) return true;\n    if (n == 38) return true;\n    if (n == 39) return true;\n    if (n == 40) return true;\n    if (n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmp5ca9h4da.d(71): Error: found `unittest` when expecting `)`\n/tmp/tmp5ca9h4da.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ca9h4da.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n**n)\n        return true;\n    if(x==n**(n-1))\n        return true;\n    if(x==n**(n-2))\n        return true;\n    if(x==n**(n-3))\n        return true;\n    if(x==n**(n-4))\n        return true;\n    if(x==n**(n-5))\n        return true;\n    if(x==n**(n-6))\n        return true;\n    if(x==n**(n-7))\n        return true;\n    if(x==n**(n-8))\n        return true;\n    if(x==n**(n-9))\n        return true;\n    if(x==n**(n-10))\n        return true;\n    if(x==n**(n-11))\n        return true;\n    if(x==n**(n-12))\n        return true;\n    if(x==n**(n-13))\n        return true;\n    if(x==n**(n-14))\n        return true;\n    if(x==n**(n-15))\n        return true;\n    if(x==n**(n-16))\n        return true;\n    if(x==n**(n-17))\n        return true;\n    if(x==n**(n-18))\n        return true;\n    if(x==n**(n-19))\n        return true;\n    if(x==n**(n-20))\n        return true;\n    if(x==n**(n-21))\n        return true;\n    if(x==n**(n-22))\n        return true;\n    if(x==n**(n-23))\n        return true;\n    if(x==n**(n-24))\n        return true;\n    if(x==n**(n-25\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpy11j9noq.d(82): Error: found `unittest` when expecting `)`\n/tmp/tmpy11j9noq.d(84): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy11j9noq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x==n) return true;\n    if (x==1) return true;\n    if (x==0) return false;\n    if (x<0) return false;\n    if (n==0) return false;\n    if (n==1) return true;\n    if (n==2) return true;\n    if (n==3) return true;\n    if (n==4) return true;\n    if (n==5) return true;\n    if (n==6) return true;\n    if (n==7) return true;\n    if (n==8) return true;\n    if (n==9) return true;\n    if (n==10) return true;\n    if (n==11) return true;\n    if (n==12) return true;\n    if (n==13) return true;\n    if (n==14) return true;\n    if (n==15) return true;\n    if (n==16) return true;\n    if (n==17) return true;\n    if (n==18) return true;\n    if (n==19) return true;\n    if (n==20) return true;\n    if (n==21) return true;\n    if (n==22) return true;\n    if (n==23) return true;\n    if (n==24) return true;\n    if (n==25) return true;\n    if (n==26) return true;\n    if (n==27) return true;\n    if (n==28) return true;\n    if (n==29) return true;\n    if (n==30) return true;\n    if (n==31) return true;\n    if (n==32) return true;\n    if (n==33) return true;\n    if (n==34) return true;\n    if (n==35) return true;\n    if (n==36) return true;\n    if (n==37) return true;\n    if (n==38) return true;\n    if (n==39) return true;\n    if (n==40) return true;\n    if (n==41) return true;\n    if (n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpl3degso6.d(71): Error: found `unittest` when expecting `)`\n/tmp/tmpl3degso6.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3degso6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n == 0)\n        return false;\n    return is_simple_power(x, n / 2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuouvi7xv.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpuouvi7xv.__unittest_L34_C1() [0x427a7d]\n??:? void tmpuouvi7xv.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x == n) || (x == n*n) || (x == n*n*n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmepvpami.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpmepvpami.__unittest_L26_C1() [0x427a61]\n??:? void tmpmepvpami.__modtest() [0x427bb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x<0)\n        return false;\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    if(n==2)\n        return true;\n    if(n==3)\n        return true;\n    if(n==4)\n        return true;\n    if(n==5)\n        return true;\n    if(n==6)\n        return true;\n    if(n==7)\n        return true;\n    if(n==8)\n        return true;\n    if(n==9)\n        return true;\n    if(n==10)\n        return true;\n    if(n==11)\n        return true;\n    if(n==12)\n        return true;\n    if(n==13)\n        return true;\n    if(n==14)\n        return true;\n    if(n==15)\n        return true;\n    if(n==16)\n        return true;\n    if(n==17)\n        return true;\n    if(n==18)\n        return true;\n    if(n==19)\n        return true;\n    if(n==20)\n        return true;\n    if(n==21)\n        return true;\n    if(n==22)\n        return true;\n    if(n==23)\n        return true;\n    if(n==24)\n        return true;\n    if(n==25)\n        return true;\n    if(n==26)\n        return true;\n    if(n==27)\n        return true;\n    if(n==28)\n        return true;\n    if(n==29)\n        return true;\n    if(n==30)\n        return true;\n    if(n==31)\n        return true;\n    if(n==32)\n        return true;\n    if(n==33)\n        return true;\n    if(n==34)\n        return true;\n    if(\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmp2f1ewdl7.d(103): Error: expression expected, not `unittest`\n/tmp/tmp2f1ewdl7.d(104): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2f1ewdl7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == 0)\n        return false;\n    if (n == 0)\n        return false;\n    if (n == 1)\n        return false;\n    if (x == -1 && n % 2 == 1)\n        return true;\n    if (x == -1 && n % 2 == 0)\n        return false;\n    if (x < 0 && n % 2 == 1)\n        return false;\n    if (x < 0 && n % 2 == 0)\n        return false;\n    if (x < 0 && n < 0)\n        return false;\n    if (x < 0 && n > 0)\n        return false;\n    if (x < 0 && n == 0)\n        return false;\n    if (x < 0 && n == 1)\n        return false;\n    if (x < 0 && n == -1)\n        return false;\n    if (x < 0 && n == 2)\n        return false;\n    if (x < 0 && n == -2)\n        return false;\n    if (x < 0 && n == 3)\n        return false;\n    if (x < 0 && n == -3)\n        return false;\n    if (x < 0 && n == 4)\n        return false;\n    if (x < 0 && n == -4)\n        return false;\n    if (x < 0 && n == 5)\n        return false;\n    if (x < 0 && n == -5)\n        return false;\n    if (x < 0 && n == 6)\n        return false;\n    if (x < 0 && n == -6)\n        return false;\n    if (x < 0 && n == 7)\n        return false;\n    if (x < 0 && n == -7)\n        return false;\n    if (x < 0 && n == 8)\n        return false;\n    if (x < 0 && n == -8)\n        return false;\n    if (x < 0 && n == 9)\n        return false;\n    if (x < 0 && n == -9)\n        return false;\n    \nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpinmyj0au.d(85): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpinmyj0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==0) return false;\n    if(x==1) return true;\n    if(x==n) return true;\n    if(x==n**2) return true;\n    if(x==n**3) return true;\n    if(x==n**4) return true;\n    if(x==n**5) return true;\n    if(x==n**6) return true;\n    if(x==n**7) return true;\n    if(x==n**8) return true;\n    if(x==n**9) return true;\n    if(x==n**10) return true;\n    if(x==n**11) return true;\n    if(x==n**12) return true;\n    if(x==n**13) return true;\n    if(x==n**14) return true;\n    if(x==n**15) return true;\n    if(x==n**16) return true;\n    if(x==n**17) return true;\n    if(x==n**18) return true;\n    if(x==n**19) return true;\n    if(x==n**20) return true;\n    if(x==n**21) return true;\n    if(x==n**22) return true;\n    if(x==n**23) return true;\n    if(x==n**24) return true;\n    if(x==n**25) return true;\n    if(x==n**26) return true;\n    if(x==n**27) return true;\n    if(x==n**28) return true;\n    if(x==n**29) return true;\n    if(x==n**30) return true;\n    if(x==n**31) return true;\n    if(x==n**32) return true;\n    if(x==n**33) return true;\n    if(x==n**34) return true;\n    if(x==n**35) return true;\n    if(x==n**36) return true;\n    if(x==n**37) return true;\n    if(x==n**38)\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpez8e2z7i.d(64): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpez8e2z7i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (n < 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x, n/2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeknl1zba.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpeknl1zba.__unittest_L38_C1() [0x427b49]\n??:? void tmpeknl1zba.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==1)\n        return false;\n    if(x==n)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1)\n        return false;\n    \nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmp2zu9c863.d(101): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zu9c863.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpzkee2r7y.d(61): Error: found `unittest` when expecting `)`\n/tmp/tmpzkee2r7y.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkee2r7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n    if (n < 0)\n        return false;\n    if (n == 0)\n        return false;\n    if (n == 1)\n        return true;\n    if (x % n != 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\n    if (x % n == 0)\n        return false;\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpxartvygx.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxartvygx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcthvhv6m.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpcthvhv6m.__unittest_L30_C1() [0x427bbf]\n??:? void tmpcthvhv6m.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x==-1)\n        return false;\n    if(x==-n)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        return false;\n    if(x==0L)\n        return false;\n    if(x==1L)\n        return false;\n    if(x==nL)\n        return false;\n    if(x==-nL)\n        return false;\n    if(x==-1L)\n        \nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp_njso147.d(96): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_njso147.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    return (x==n) || (x==n*n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9iqkfo02.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp9iqkfo02.__unittest_L26_C1() [0x427a49]\n??:? void tmp9iqkfo02.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == -1) return false;\n    if (x < 0) return false;\n    if (n < 0) return false;\n    if (n == 0) return false;\n    if (n == 1) return true;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n == 4) return true;\n    if (n == 5) return true;\n    if (n == 6) return true;\n    if (n == 7) return true;\n    if (n == 8) return true;\n    if (n == 9) return true;\n    if (n == 10) return true;\n    if (n == 11) return true;\n    if (n == 12) return true;\n    if (n == 13) return true;\n    if (n == 14) return true;\n    if (n == 15) return true;\n    if (n == 16) return true;\n    if (n == 17) return true;\n    if (n == 18) return true;\n    if (n == 19) return true;\n    if (n == 20) return true;\n    if (n == 21) return true;\n    if (n == 22) return true;\n    if (n == 23) return true;\n    if (n == 24) return true;\n    if (n == 25) return true;\n    if (n == 26) return true;\n    if (n == 27) return true;\n    if (n == 28) return true;\n    if (n == 29) return true;\n    if (n == 30) return true;\n    if (n == 31) return true;\n    if (n == 32) return true;\n    if (n == 33) return true;\n    if (n == 34) return true;\n    if (n == 35) return true;\n    if (n == 36) return true;\n    if (n == 37) return true;\n    if (n == 38) return true;\n    if (n == 39) return true;\n    if (n == 40) return true;\n    if (\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmp19dkg683.d(71): Error: expression expected, not `unittest`\n/tmp/tmp19dkg683.d(72): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19dkg683.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcthvhv6m.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpcthvhv6m.__unittest_L30_C1() [0x427bbf]\n??:? void tmpcthvhv6m.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1cmf8jlq.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1cmf8jlq.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cmf8jlq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==1) return true;\n    if(x==n) return true;\n    if(x==n**2) return true;\n    if(x==n**3) return true;\n    if(x==n**4) return true;\n    if(x==n**5) return true;\n    if(x==n**6) return true;\n    if(x==n**7) return true;\n    if(x==n**8) return true;\n    if(x==n**9) return true;\n    if(x==n**10) return true;\n    if(x==n**11) return true;\n    if(x==n**12) return true;\n    if(x==n**13) return true;\n    if(x==n**14) return true;\n    if(x==n**15) return true;\n    if(x==n**16) return true;\n    if(x==n**17) return true;\n    if(x==n**18) return true;\n    if(x==n**19) return true;\n    if(x==n**20) return true;\n    if(x==n**21) return true;\n    if(x==n**22) return true;\n    if(x==n**23) return true;\n    if(x==n**24) return true;\n    if(x==n**25) return true;\n    if(x==n**26) return true;\n    if(x==n**27) return true;\n    if(x==n**28) return true;\n    if(x==n**29) return true;\n    if(x==n**30) return true;\n    if(x==n**31) return true;\n    if(x==n**32) return true;\n    if(x==n**33) return true;\n    if(x==n**34) return true;\n    if(x==n**35) return true;\n    if(x==n**36) return true;\n    if(x==n**37) return true;\n    if(x==n**38) return true;\n    if(x==n**\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmpyo0wfnx8.d(64): Error: expression expected, not `unittest`\n/tmp/tmpyo0wfnx8.d(65): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyo0wfnx8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1cmf8jlq.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1cmf8jlq.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cmf8jlq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n)\n        return true;\n    if(x==1)\n        return false;\n    if(x==0)\n        return false;\n    if(x<0)\n        return false;\n    if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    if(n==2)\n        return true;\n    if(n==3)\n        return true;\n    if(n==4)\n        return true;\n    if(n==5)\n        return true;\n    if(n==6)\n        return true;\n    if(n==7)\n        return true;\n    if(n==8)\n        return true;\n    if(n==9)\n        return true;\n    if(n==10)\n        return true;\n    if(n==11)\n        return true;\n    if(n==12)\n        return true;\n    if(n==13)\n        return true;\n    if(n==14)\n        return true;\n    if(n==15)\n        return true;\n    if(n==16)\n        return true;\n    if(n==17)\n        return true;\n    if(n==18)\n        return true;\n    if(n==19)\n        return true;\n    if(n==20)\n        return true;\n    if(n==21)\n        return true;\n    if(n==22)\n        return true;\n    if(n==23)\n        return true;\n    if(n==24)\n        return true;\n    if(n==25)\n        return true;\n    if(n==26)\n        return true;\n    if(n==27)\n        return true;\n    if(n==28)\n        return true;\n    if(n==29)\n        return true;\n    if(n==30)\n        return true;\n    if(n==31)\n        return true;\n    if(n==32)\n        return true;\n    if(n==33)\n        return true;\n    if(n==34)\n        return true;\n    if(\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmp2f1ewdl7.d(103): Error: expression expected, not `unittest`\n/tmp/tmp2f1ewdl7.d(104): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2f1ewdl7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x/n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzj6l4txj.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpzj6l4txj.__unittest_L30_C1() [0x427bbf]\n??:? void tmpzj6l4txj.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n) return true;\n    if(x==1) return true;\n    if(x==0) return false;\n    if(x==-1) return false;\n    if(x==-n) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return true;\n    if(x==nL) return true;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return true;\n    if(x==nL) return true;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return true;\n    if(x==nL) return true;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return true;\n    if(x==nL) return true;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return true;\n    if(x==nL) return true;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return true;\n    if(x==nL) return true;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return true;\n    if(x==nL) return true;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpynh8769t.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmpynh8769t.d(81): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynh8769t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1) return true;\n    if (n == 0) return false;\n    if (x == 1) return false;\n    if (x == n) return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7tc2w9b8.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmp7tc2w9b8.__unittest_L31_C1() [0x427bcb]\n??:? void tmp7tc2w9b8.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(x==n) return true;\n    if(x==1) return false;\n    if(x==0) return false;\n    if(x==-1) return false;\n    if(x==-n) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0L) return false;\n    if(x==1L) return false;\n    if(x==nL) return false;\n    if(x==-nL) return false;\n    if(x==-1L) return false;\n    if(x==0\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp0d7ashwh.d(66): Error: found `unittest` when expecting `)`\n/tmp/tmp0d7ashwh.d(81): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0d7ashwh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "/tmp/tmp1cmf8jlq.d(43): Error: found `unittest` when expecting `)`\n/tmp/tmp1cmf8jlq.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1cmf8jlq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxq014i6k.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpxq014i6k.__unittest_L36_C1() [0x427bcb]\n??:? void tmpxq014i6k.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x == n**2)\n        return true;\n    if (x == n**3)\n        return true;\n    if (x == n**4)\n        return true;\n    if (x == n**5)\n        return true;\n    if (x == n**6)\n        return true;\n    if (x == n**7)\n        return true;\n    if (x == n**8)\n        return true;\n    if (x == n**9)\n        return true;\n    if (x == n**10)\n        return true;\n    if (x == n**11)\n        return true;\n    if (x == n**12)\n        return true;\n    if (x == n**13)\n        return true;\n    if (x == n**14)\n        return true;\n    if (x == n**15)\n        return true;\n    if (x == n**16)\n        return true;\n    if (x == n**17)\n        return true;\n    if (x == n**18)\n        return true;\n    if (x == n**19)\n        return true;\n    if (x == n**20)\n        return true;\n    if (x == n**21)\n        return true;\n    if (x == n**22)\n        return true;\n    if (x == n**23)\n        return true;\n    if (x == n**24)\n        return true;\n    if (x == n**25)\n        return true;\n    if (x == n**26)\n        return true;\n    if (x == n**27)\n        return true;\n    if (x == n**28)\n        return true;\n    if (x == n**29)\n        return true;\n    if (x == n**30)\n        return true;\n    if (x == n**31)\n        return true;\n    if (x == n**32)\n        return true;\n    if (x == n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpw5_dbm23.d(93): Error: found `unittest` when expecting `)`\n/tmp/tmpw5_dbm23.d(108): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5_dbm23.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x % n == 0) return false;\n    return is_simple_power(x, n/2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcg9a5dci.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmpcg9a5dci.__unittest_L29_C1() [0x427a75]\n??:? void tmpcg9a5dci.__modtest() [0x427bcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if(n==1)\n        return true;\n    if(n==0)\n        return false;\n    if(n==2)\n        return x==2;\n    if(x==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x==n*n)\n        return true;\n    if(x==n*n*n)\n        return true;\n    if(x==n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292799,
      "stdout": "",
      "stderr": "/tmp/tmpds35_dxa.d(65): Error: found `unittest` when expecting `)`\n/tmp/tmpds35_dxa.d(80): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpds35_dxa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 1)\n        return true;\n    if (x == 1)\n        return false;\n    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpidccosf8.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpidccosf8.__unittest_L34_C1() [0x427bbf]\n??:? void tmpidccosf8.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1L, 4L)\n    true\n    >>> is_simple_power(2L, 2L)\n    true\n    >>> is_simple_power(8L, 2L)\n    true\n    >>> is_simple_power(3L, 2L)\n    false\n    >>> is_simple_power(3L, 1L)\n    false\n    >>> is_simple_power(5L, 3L)\n    false\n    \n*/\nbool is_simple_power(long x, long n) \n{\n    if (n == 0)\n        return false;\n    if (x == 1)\n        return true;\n    if (x == n)\n        return true;\n    if (x % n == 0)\n        return false;\n    return is_simple_power(x, n / 2);\n}\nunittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}",
      "timestamp": 1664292798,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm4fq6fem.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpm4fq6fem.__unittest_L34_C1() [0x427a81]\n??:? void tmpm4fq6fem.__modtest() [0x427bd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}