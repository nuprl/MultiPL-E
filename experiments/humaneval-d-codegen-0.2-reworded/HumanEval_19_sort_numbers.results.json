{
  "name": "HumanEval_19_sort_numbers",
  "language": "d",
  "prompt": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n",
  "tests": "unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    n = numbers.length();\n    m = n / 2;\n    \n    for (i = 0; i < m; i++) {\n        for (j = i; j < n; j++) {\n            if (numbers[i] > numbers[j]) {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < m; i++) {\n        result += numbers[i];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp2qthiwgs.d(15): Error: no property `length` for type `string`\n/tmp/tmp2qthiwgs.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp2qthiwgs.d(23): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp2qthiwgs.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qthiwgs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpv970jq7z.d(15): Error: no property `length` for type `string`\n/tmp/tmpv970jq7z.d(17): Error: no property `length` for type `string`\n/tmp/tmpv970jq7z.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpv970jq7z.d(23): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpv970jq7z.d(28): Error: no property `length` for type `string`\n/tmp/tmpv970jq7z.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv970jq7z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k;\n    string result;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmprmi7lxn8.d(14): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(16): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmprmi7lxn8.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmprmi7lxn8.d(26): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmi7lxn8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while (i < numbers.length())\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '1')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '2')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '3')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '4')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '5')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '6')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '7')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '8')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '9')\n        {\n            i++;\n            continue;\n        }\n        count = 0;\n        while (count < 9)\n        {\n            if (numbers[i] == ' ')\n            {\n                i++;\n                continue;\n            }\n            if (numbers[i] == '0')\n            {\n                i++;\n                continue;\n            }\n            if (numbers[i] == '1')\n            {\n                i++;\n                continue;\n            }\n            if (numbers[i] == '2')\n            {\n                i++;\n                continue;\n            }\n            if (numbers[i] == '3')\n            {\n                i++;\n                continue;\n            }\n            if (numbers[i] == '4')\n            {\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpiyvmgvqi.d(104): Error: found `unittest` instead of statement\n/tmp/tmpiyvmgvqi.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpiyvmgvqi.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpiyvmgvqi.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiyvmgvqi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp3cahamuh.d(104): Error: found `unittest` instead of statement\n/tmp/tmp3cahamuh.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cahamuh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int n = numbers.length();\n    int num = 0;\n    while(i < n)\n    {\n        num = stoi(numbers.substr(i, 1));\n        if(num < 10)\n        {\n            result += to_string(num);\n            i++;\n        }\n        else\n        {\n            result += numbers.substr(j, i-j);\n            j = i;\n        }\n    }\n    result += numbers.substr(j, i-j);\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmps28sbax1.d(15): Error: no property `length` for type `string`\n/tmp/tmps28sbax1.d(19): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmps28sbax1.d(22): Error: undefined identifier `to_string`\n/tmp/tmps28sbax1.d(27): Error: no property `substr` for type `string`\n/tmp/tmps28sbax1.d(31): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps28sbax1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string output = \"\";\n    for (int i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        int num = numbers[i] - '0';\n        int j = i + 1;\n        while (j < numbers.length() && numbers[j] != ' ') {\n            j++;\n        }\n        if (j - i > 1) {\n            int temp = num;\n            num = numbers[j] - '0';\n            numbers[j] = temp + '0';\n        }\n        output += to_string(num);\n        output += \" \";\n        i = j - 1;\n    }\n    return output;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp8_b4n302.d(13): Error: no property `length` for type `string`\n/tmp/tmp8_b4n302.d(19): Error: no property `length` for type `string`\n/tmp/tmp8_b4n302.d(25): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp8_b4n302.d(27): Error: undefined identifier `to_string`\n/tmp/tmp8_b4n302.d(28): Error: slice `output` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_b4n302.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        if (numbers[i] > numbers[j]) {\n            char temp = numbers[i];\n            numbers[i] = numbers[j];\n            numbers[j] = temp;\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpbl_qcd40.d(14): Error: no property `length` for type `string`\n/tmp/tmpbl_qcd40.d(17): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpbl_qcd40.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpbl_qcd40.d(21): Error: no property `length` for type `string`\n/tmp/tmpbl_qcd40.d(22): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbl_qcd40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int m = 0;\n    int count = 0;\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpx33zijv9.d(104): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpx33zijv9.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpx33zijv9.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpx33zijv9.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx33zijv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpeadaqark.d(14): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(16): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpeadaqark.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpeadaqark.d(26): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeadaqark.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j]) {\n                numbers[i] = numbers[i] + numbers[j];\n                numbers[j] = numbers[i] - numbers[j];\n                numbers[i] = numbers[i] - numbers[j];\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j]) {\n                numbers[i] = numbers[i] + numbers[j];\n                numbers[j] = numbers[i] - numbers[j];\n                numbers[i] = numbers[i] - numbers[j];\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j]) {\n                numbers[i] = numbers[i] + numbers[j];\n                numbers[j] = numbers[i] - numbers[j];\n                numbers[i] = numbers[i] - numbers[j];\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpi4qs057z.d(66): Error: found `unittest` instead of statement\n/tmp/tmpi4qs057z.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpi4qs057z.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpi4qs057z.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4qs057z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k, n;\n    for (i = 0, j = 0, n = numbers.length(); i < n; i++) {\n        if (isdigit(numbers[i])) {\n            result += numbers[i];\n            j++;\n        }\n    }\n    for (k = 0; k < j; k++) {\n        for (i = 0; i < j - 1; i++) {\n            if (atoi(result.substr(i, 1).c_str()) > atoi(result.substr(i + 1, 1).c_str())) {\n                string temp = result.substr(i, 1);\n                result.erase(i, 1);\n                result.insert(i + 1, temp);\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpl9olcqys.d(14): Error: no property `length` for type `string`\n/tmp/tmpl9olcqys.d(15): Error: undefined identifier `isdigit`\n/tmp/tmpl9olcqys.d(16): Error: slice `result` is not mutable\n/tmp/tmpl9olcqys.d(22): Error: undefined identifier `atoi`, did you mean function `atan`?\n/tmp/tmpl9olcqys.d(22): Error: undefined identifier `atoi`, did you mean function `atan`?\n/tmp/tmpl9olcqys.d(23): Error: no property `substr` for type `string`\n/tmp/tmpl9olcqys.d(24): Error: no property `erase` for type `string`\n/tmp/tmpl9olcqys.d(25): Error: no property `insert` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl9olcqys.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] < numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpq5i7rikg.d(92): Error: found `unittest` instead of statement\n/tmp/tmpq5i7rikg.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5i7rikg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    int number_count = numbers.length();\n    int number_index = 0;\n    int number_value = 0;\n    int number_value_next = 0;\n    int number_value_previous = 0;\n    int number_value_next_previous = 0;\n    int number_value_previous_next = 0;\n    int number_value_previous_next_previous = 0;\n    int number_value_previous_previous = 0;\n    int number_value_next_previous_previous = 0;\n    int number_value_next_previous_next = 0;\n    int number_value_next_previous_next_previous = 0;\n    int number_value_next_previous_next_next = 0;\n    int number_value_next_previous_next_next_previous = 0;\n    int number_value_next_previous_next_next_next = 0;\n    int number_value_next_previous_next_next_next_previous = 0;\n    int number_value_next_previous_next_next_next_next = 0;\n    int number_value_next_previous_next_next_next_next_previous = 0;\n    int number_value_next_previous_next_next_next_next_next = 0;\n    int number_value_next_previous_next_next_next_next_next_previous = 0;\n    int number_value_next_previous_next_next_next_next_next_next = 0;\n    int number_value_next_previous_next_next_next_next_next_next_previous = 0;\n    int number_value_next_previous_next_next_next_next_next_next_next = 0;\n    int number_value_next_previous_next_next_next_next_next_next_next_previous = 0;\n    int number_value_next_previous_next_next_next_next_next_next_next_next = 0;\n    int number_value_next_\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpfoium8ej.d(40): Error: semicolon expected, not `unittest`\n/tmp/tmpfoium8ej.d(40): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfoium8ej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    n = numbers.length();\n    m = n/2;\n    for(i=0; i<m; i++)\n    {\n        for(j=i; j<n-1; j++)\n        {\n            if(numbers[i] > numbers[j+1])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j+1];\n                numbers[j+1] = temp;\n            }\n        }\n    }\n    for(i=0; i<n; i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpbpaenqet.d(15): Error: no property `length` for type `string`\n/tmp/tmpbpaenqet.d(24): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpbpaenqet.d(25): Error: cannot modify `immutable` expression `numbers[cast(ulong)(j + 1)]`\n/tmp/tmpbpaenqet.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbpaenqet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while(i < n)\n    {\n        while(j < n && numbers[j] != ' ')\n        {\n            j++;\n        }\n        while(k < n && numbers[k] != ' ')\n        {\n            k++;\n        }\n        if(j < k)\n        {\n            result += numbers[i];\n            result += numbers[j];\n            result += numbers[k];\n            i = j + 1;\n            j = k + 1;\n        }\n        else if(j == k)\n        {\n            result += numbers[i];\n            result += numbers[j];\n            i = j + 1;\n        }\n        else if(j > k)\n        {\n            result += numbers[i];\n            result += numbers[k];\n            i = k + 1;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpd7p5izqg.d(16): Error: no property `length` for type `string`\n/tmp/tmpd7p5izqg.d(29): Error: slice `result` is not mutable\n/tmp/tmpd7p5izqg.d(30): Error: slice `result` is not mutable\n/tmp/tmpd7p5izqg.d(31): Error: slice `result` is not mutable\n/tmp/tmpd7p5izqg.d(37): Error: slice `result` is not mutable\n/tmp/tmpd7p5izqg.d(38): Error: slice `result` is not mutable\n/tmp/tmpd7p5izqg.d(43): Error: slice `result` is not mutable\n/tmp/tmpd7p5izqg.d(44): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7p5izqg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '1')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '2')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '3')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '4')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '5')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '6')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '7')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '8')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '9')\n        {\n            i++;\n            continue;\n        }\n        result += numbers[i];\n        i++;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp8hoeah8r.d(16): Error: no property `length` for type `string`\n/tmp/tmp8hoeah8r.d(74): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hoeah8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            for (k = j + 1; k < numbers.length(); k++)\n            {\n                if (numbers[k] == ' ')\n                {\n                    continue;\n                }\n                \n                for (l = k + 1; l < numbers.length(); l++)\n                {\n                    if (numbers[l] == ' ')\n                    {\n                        continue;\n                    }\n                    \n                    for (m = l + 1; m < numbers.length(); m++)\n                    {\n                        if (numbers[m] == ' ')\n                        {\n                            continue;\n                        }\n                        \n                        for (n = m + 1; n < numbers.length(); n++)\n                        {\n                            if (numbers[n] == ' ')\n                            {\n                                continue;\n                            }\n                            \n                            for (p = n + 1; p < numbers.length(); p++)\n                            {\n                                if (numbers[p] == ' ')\n                                {\n                                    continue;\n                                }\n                                \n                                for (q = p + 1; q < numbers.length(); q++)\n                                {\n                                    if (numbers[q] == ' ')\n                                    {\n                                        continue;\n                                    }\n                                    \n                                    for (r = q + 1; r < numbers.length(); r++)\n                                    {\n                                        if (numbers[r] == ' ')\n                                        {\n                                            continue;\n                                        }\n                                        \n                                        for (s = r + 1; s < numbers.length(); s++)\n                                        {\n                               \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpcztyiyxl.d(81): Error: found `unittest` instead of statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expectin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        for (k = 0; k < numbers.length(); k++) {\n            if (numbers[k] > numbers[k+1]) {\n                string temp = numbers[k];\n                numbers[k] = numbers[k+1];\n                numbers[k+1] = temp;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp3bvfeeh4.d(14): Error: no property `length` for type `string`\n/tmp/tmp3bvfeeh4.d(15): Error: no property `length` for type `string`\n/tmp/tmp3bvfeeh4.d(17): Error: cannot implicitly convert expression `numbers[cast(ulong)k]` of type `immutable(char)` to `string`\n/tmp/tmp3bvfeeh4.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmp3bvfeeh4.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)(k + 1)]`\n/tmp/tmp3bvfeeh4.d(23): Error: no property `length` for type `string`\n/tmp/tmp3bvfeeh4.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3bvfeeh4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            result.push_back(numbers[i]);\n        }\n    }\n    \n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    \n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    \n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    \n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    \n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    \n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    \n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    \n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmph7085oq2.d(87): Error: found `unittest` instead of statement\n/tmp/tmph7085oq2.d(97): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph7085oq2.d(97): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7085oq2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < numbers.length())\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpgzbj47ee.d(103): Error: unterminated character constant\n/tmp/tmpgzbj47ee.d(104): Error: found `unittest` when expecting `)`\n/tmp/tmpgzbj47ee.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgzbj47ee.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzbj47ee.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for(i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for(j = i+1; j < numbers.length(); j++)\n        {\n            if(numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if(numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for(i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for(j = i+1; j < numbers.length(); j++)\n        {\n            if(numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if(numbers[i] < numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for(i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for(j = i+1; j < numbers.length(); j++)\n        {\n            if(numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if(numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for(i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzyt173i.d(92): Error: found `unittest` instead of statement\n/tmp/tmpuzyt173i.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzyt173i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            for (k = j + 1; k < numbers.length(); k++)\n            {\n                if (numbers[k] == ' ')\n                {\n                    continue;\n                }\n                \n                for (l = k + 1; l < numbers.length(); l++)\n                {\n                    if (numbers[l] == ' ')\n                    {\n                        continue;\n                    }\n                    \n                    for (m = l + 1; m < numbers.length(); m++)\n                    {\n                        if (numbers[m] == ' ')\n                        {\n                            continue;\n                        }\n                        \n                        for (n = m + 1; n < numbers.length(); n++)\n                        {\n                            if (numbers[n] == ' ')\n                            {\n                                continue;\n                            }\n                            \n                            for (p = n + 1; p < numbers.length(); p++)\n                            {\n                                if (numbers[p] == ' ')\n                                {\n                                    continue;\n                                }\n                                \n                                for (q = p + 1; q < numbers.length(); q++)\n                                {\n                                    if (numbers[q] == ' ')\n                                    {\n                                        continue;\n                                    }\n                                    \n                                    for (r = q + 1; r < numbers.length(); r++)\n                                    {\n                                        if (numbers[r] == ' ')\n                                        {\n                                            continue;\n                                        }\n                                        \n                                        for (s = r + 1; s < numbers.length(); s++)\n                                        {\n                               \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpcztyiyxl.d(81): Error: found `unittest` instead of statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcztyiyxl.d(91): Error: found `End of File` when expectin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i+1; j < numbers.length(); j++) {\n            if (numbers[i] > numbers[j]) {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmphzf2paw1.d(14): Error: no property `length` for type `string`\n/tmp/tmphzf2paw1.d(15): Error: no property `length` for type `string`\n/tmp/tmphzf2paw1.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmphzf2paw1.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmphzf2paw1.d(23): Error: no property `length` for type `string`\n/tmp/tmphzf2paw1.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphzf2paw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    n = numbers.length();\n    for (i = 0; i < n; i++) {\n        for (j = i+1; j < n; j++) {\n            if (numbers[i] > numbers[j]) {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < n; i++) {\n        result += numbers[i];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpjf2wtsoe.d(15): Error: no property `length` for type `string`\n/tmp/tmpjf2wtsoe.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpjf2wtsoe.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpjf2wtsoe.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjf2wtsoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while(i < n)\n    {\n        while(i < n && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while(i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while(i < n && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while(i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        k = i;\n        while(i < n && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while(i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while(i < n && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while(i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        j = i;\n        while(i < n && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while(i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while(i < n && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while(i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        if(k < j)\n        {\n            result.erase(k, j - k);\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpamadmo6e.d(16): Error: no property `length` for type `string`\n/tmp/tmpamadmo6e.d(29): Error: slice `result` is not mutable\n/tmp/tmpamadmo6e.d(47): Error: slice `result` is not mutable\n/tmp/tmpamadmo6e.d(65): Error: slice `result` is not mutable\n/tmp/tmpamadmo6e.d(74): Error: no property `erase` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpamadmo6e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] < numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp5bjqtwak.d(83): Error: found `unittest` when expecting `(`\n/tmp/tmp5bjqtwak.d(93): Error: found `void` when expecting `)`\n/tmp/tmp5bjqtwak.d(93): Error: found `{` when expecting `;` following statement\n/tmp/tmp5bjqtwak.d(93): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5bjqtwak.d(93): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bjqtwak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    for (int i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        int number = numbers[i] - '0';\n        if (i == 0) {\n            result += number;\n        }\n        else if (number < result[result.length() - 1]) {\n            result[result.length() - 1] = number;\n        }\n        else {\n            result += number;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmptuc_v7xy.d(13): Error: no property `length` for type `string`\n/tmp/tmptuc_v7xy.d(19): Error: incompatible types for `(result) += (number)`: `string` and `int`\n/tmp/tmptuc_v7xy.d(21): Error: no property `length` for type `string`\n/tmp/tmptuc_v7xy.d(22): Error: no property `length` for type `string`\n/tmp/tmptuc_v7xy.d(25): Error: incompatible types for `(result) += (number)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuc_v7xy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] >= '0' && numbers[i] <= '9')\n        {\n            result.push_back(numbers[i]);\n            k = numbers[i] - '0';\n            for (j = i + 1; j < numbers.length(); j++)\n            {\n                if (numbers[j] >= '0' && numbers[j] <= '9')\n                {\n                    if (k > numbers[j] - '0')\n                    {\n                        k = numbers[j] - '0';\n                    }\n                }\n            }\n            for (j = i + 1; j < numbers.length(); j++)\n            {\n                if (numbers[j] >= '0' && numbers[j] <= '9')\n                {\n                    if (k < numbers[j] - '0')\n                    {\n                        k = numbers[j] - '0';\n                    }\n                }\n            }\n            for (j = i + 1; j < numbers.length(); j++)\n            {\n                if (numbers[j] >= '0' && numbers[j] <= '9')\n                {\n                    if (k > numbers[j] - '0')\n                    {\n                        k = numbers[j] - '0';\n                    }\n                }\n            }\n            for (j = i + 1; j < numbers.length(); j++)\n            {\n                if (numbers[j] >= '0' && numbers[j] <= '9')\n                {\n                    if (k < numbers[j] - '0')\n                    {\n                        k = numbers[j] - '0';\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpoycj3lb4.d(14): Error: no property `length` for type `string`\n/tmp/tmpoycj3lb4.d(18): Error: no property `push_back` for type `string`\n/tmp/tmpoycj3lb4.d(20): Error: no property `length` for type `string`\n/tmp/tmpoycj3lb4.d(30): Error: no property `length` for type `string`\n/tmp/tmpoycj3lb4.d(40): Error: no property `length` for type `string`\n/tmp/tmpoycj3lb4.d(50): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoycj3lb4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    for (int i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        if (numbers[i] == '0')\n            result += '0';\n        else if (numbers[i] == '1')\n            result += '1';\n        else if (numbers[i] == '2')\n            result += '2';\n        else if (numbers[i] == '3')\n            result += '3';\n        else if (numbers[i] == '4')\n            result += '4';\n        else if (numbers[i] == '5')\n            result += '5';\n        else if (numbers[i] == '6')\n            result += '6';\n        else if (numbers[i] == '7')\n            result += '7';\n        else if (numbers[i] == '8')\n            result += '8';\n        else if (numbers[i] == '9')\n            result += '9';\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmphcdoogs3.d(13): Error: no property `length` for type `string`\n/tmp/tmphcdoogs3.d(18): Error: slice `result` is not mutable\n/tmp/tmphcdoogs3.d(20): Error: slice `result` is not mutable\n/tmp/tmphcdoogs3.d(22): Error: slice `result` is not mutable\n/tmp/tmphcdoogs3.d(24): Error: slice `result` is not mutable\n/tmp/tmphcdoogs3.d(26): Error: slice `result` is not mutable\n/tmp/tmphcdoogs3.d(28): Error: slice `result` is not mutable\n/tmp/tmphcdoogs3.d(30): Error: slice `result` is not mutable\n/tmp/tmphcdoogs3.d(32): Error: slice `result` is not mutable\n/tmp/tmphcdoogs3.d(34): Error: slice `result` is not mutable\n/tmp/tmphcdoogs3.d(36): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphcdoogs3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j;\n    int nums[10];\n    for (i = 0; i < 10; i++)\n        nums[i] = 0;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = 0; j < 10; j++)\n        {\n            if (numbers[i] == 'zero' + j)\n                nums[j] = 0;\n            else if (numbers[i] == 'one' + j)\n                nums[j] = 1;\n            else if (numbers[i] == 'two' + j)\n                nums[j] = 2;\n            else if (numbers[i] == 'three' + j)\n                nums[j] = 3;\n            else if (numbers[i] == 'four' + j)\n                nums[j] = 4;\n            else if (numbers[i] == 'five' + j)\n                nums[j] = 5;\n            else if (numbers[i] == 'six' + j)\n                nums[j] = 6;\n            else if (numbers[i] == 'seven' + j)\n                nums[j] = 7;\n            else if (numbers[i] == 'eight' + j)\n                nums[j] = 8;\n            else if (numbers[i] == 'nine' + j)\n                nums[j] = 9;\n        }\n    }\n    for (i = 0; i < 10; i++)\n    {\n        for (j = 0; j < 10; j++)\n        {\n            if (nums[i] < nums[j])\n            {\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n    for (i = 0; i < 10; i++)\n    {\n        result += nums[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpcpe_weii.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[10] nums`\n/tmp/tmpcpe_weii.d(21): Error: unterminated character constant\n/tmp/tmpcpe_weii.d(21): Error: found `ero` when expecting `)`\n/tmp/tmpcpe_weii.d(21): Error: unterminated character constant\n/tmp/tmpcpe_weii.d(21): Error: found `)` when expecting `;` following statement\n/tmp/tmpcpe_weii.d(23): Error: found `else` without a corresponding `if`, `version` or `debug` statement\n/tmp/tmpcpe_weii.d(23): Error: unterminated character constant\n/tmp/tmpcpe_weii.d(23): Error: unterminated character constant\n/tmp/tmpcpe_weii.d(25): Error: found `else` without a corresponding `if`, `version` or `debug` statement\n/tmp/tmpcpe_weii.d(25): Error: unterminated character constant\n/tmp/tmpcpe_weii.d(25): Error: unterminated character constant\n/tmp/tmpcpe_weii.d(27): Error: found `else` without a corresponding `if`, `version` or `debug` statement\n/tmp/tmpcpe_weii.d(27): Error: unterminated character constant\n/tmp/tmpcpe_weii.d(27): Erro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        while (i < n && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while (i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < n && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while (i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpx7xg9mi6.d(15): Error: no property `length` for type `string`\n/tmp/tmpx7xg9mi6.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7xg9mi6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] < numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp5bjqtwak.d(83): Error: found `unittest` when expecting `(`\n/tmp/tmp5bjqtwak.d(93): Error: found `void` when expecting `)`\n/tmp/tmp5bjqtwak.d(93): Error: found `{` when expecting `;` following statement\n/tmp/tmp5bjqtwak.d(93): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5bjqtwak.d(93): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bjqtwak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n;\n    string result;\n    n = numbers.length();\n    for (i = 0; i < n; i++) {\n        for (j = i+1; j < n; j++) {\n            if (numbers[i] > numbers[j]) {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    result = \"\";\n    for (i = 0; i < n; i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpmcg7khut.d(14): Error: no property `length` for type `string`\n/tmp/tmpmcg7khut.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpmcg7khut.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpmcg7khut.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcg7khut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpeadaqark.d(14): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(16): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpeadaqark.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpeadaqark.d(26): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeadaqark.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n) {\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpkrvg3fm8.d(92): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkrvg3fm8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        while (i < n && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while (i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < n && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while (i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpx7xg9mi6.d(15): Error: no property `length` for type `string`\n/tmp/tmpx7xg9mi6.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7xg9mi6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k, n;\n    for (i = 0, j = 0, n = 0; i < numbers.length(); i++) {\n        if (numbers[i] >= '0' && numbers[i] <= '9') {\n            n = n * 10 + numbers[i] - '0';\n        } else {\n            result += numbers[j++];\n            result += numbers[i];\n        }\n    }\n    for (k = 0; k < n; k++) {\n        result += numbers[k];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpxjf_l4jx.d(14): Error: no property `length` for type `string`\n/tmp/tmpxjf_l4jx.d(18): Error: slice `result` is not mutable\n/tmp/tmpxjf_l4jx.d(19): Error: slice `result` is not mutable\n/tmp/tmpxjf_l4jx.d(23): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjf_l4jx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i+1; j < numbers.length(); j++) {\n            if (numbers[i] > numbers[j]) {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp5h9z7np9.d(15): Error: no property `length` for type `string`\n/tmp/tmp5h9z7np9.d(16): Error: no property `length` for type `string`\n/tmp/tmp5h9z7np9.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp5h9z7np9.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp5h9z7np9.d(25): Error: no property `length` for type `string`\n/tmp/tmp5h9z7np9.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5h9z7np9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[i] > numbers[j]) {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpxowh1v0h.d(14): Error: no property `length` for type `string`\n/tmp/tmpxowh1v0h.d(15): Error: no property `length` for type `string`\n/tmp/tmpxowh1v0h.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpxowh1v0h.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpxowh1v0h.d(23): Error: no property `length` for type `string`\n/tmp/tmpxowh1v0h.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxowh1v0h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        for (k = i; k <= j; k++) {\n            if (numbers[k] > numbers[k + 1]) {\n                char temp = numbers[k];\n                numbers[k] = numbers[k + 1];\n                numbers[k + 1] = temp;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmppn_kvxoz.d(14): Error: no property `length` for type `string`\n/tmp/tmppn_kvxoz.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmppn_kvxoz.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)(k + 1)]`\n/tmp/tmppn_kvxoz.d(23): Error: no property `length` for type `string`\n/tmp/tmppn_kvxoz.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppn_kvxoz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            n = stoi(numbers.substr(i, numbers.length()));\n            i = numbers.length();\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            n = stoi(numbers.substr(i, numbers.length()));\n            i = numbers.length();\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            n = stoi(numbers.substr(i, numbers.length()));\n            i = numbers.length();\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            n = stoi(numbers.substr(i, numbers.length()));\n            i = numbers.length();\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            n = stoi(numbers.substr(i, numbers.length()));\n            i = numbers.length();\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            n = stoi(numbers.substr(i, numbers.length()));\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpzwio6yu_.d(90): Error: found `unittest` instead of statement\n/tmp/tmpzwio6yu_.d(100): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzwio6yu_.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwio6yu_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp2nufi8d2.d(105): Error: expression expected, not `unittest`\n/tmp/tmp2nufi8d2.d(106): Error: found `{` when expecting `)`\n/tmp/tmp2nufi8d2.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nufi8d2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int m = 0;\n    int temp = 0;\n    while(i < n)\n    {\n        while(j < n && numbers[j] != ' ')\n        {\n            j++;\n        }\n        while(k < n && numbers[k] != ' ')\n        {\n            k++;\n        }\n        if(j < k)\n        {\n            temp = numbers[i];\n            numbers[i] = numbers[j];\n            numbers[j] = temp;\n            i++;\n            j++;\n        }\n        else if(j == k)\n        {\n            i++;\n            j++;\n        }\n        else if(j > k)\n        {\n            temp = numbers[i];\n            numbers[i] = numbers[k];\n            numbers[k] = temp;\n            i++;\n            k++;\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpyd2mu314.d(16): Error: no property `length` for type `string`\n/tmp/tmpyd2mu314.d(32): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpyd2mu314.d(33): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpyd2mu314.d(45): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpyd2mu314.d(46): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmpyd2mu314.d(53): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyd2mu314.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = 0;\n    int m = 0;\n    int temp = 0;\n    while (i < numbers.length())\n    {\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            n = stoi(numbers.substr(j, i - j));\n            j = i;\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            m = stoi(numbers.substr(j, i - j));\n            j = i;\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        if (n < m)\n        {\n            temp = n;\n            n = m;\n            m = temp;\n        }\n        if (n < m)\n        {\n            temp = n;\n            n = m;\n            m = temp;\n        }\n        if (n < m)\n        {\n            temp = n;\n            n = m;\n            m = temp;\n        }\n        if (n < m)\n        {\n            temp = n;\n            n = m;\n            m = temp;\n        }\n        if (n < m)\n        {\n            temp = n;\n            n = m;\n            m = temp;\n        }\n        if (n < m)\n        {\n            temp = n;\n            n = m;\n            m = temp;\n        }\n        if (n < m)\n        {\n            temp = n;\n            n = m;\n            m = temp;\n        }\n        if\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmphr43o60v.d(92): Error: found `unittest` when expecting `(`\n/tmp/tmphr43o60v.d(102): Error: found `void` when expecting `)`\n/tmp/tmphr43o60v.d(102): Error: found `{` when expecting `;` following statement\n/tmp/tmphr43o60v.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphr43o60v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k;\n    string result;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmprmi7lxn8.d(14): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(16): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmprmi7lxn8.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmprmi7lxn8.d(26): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmi7lxn8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while(i < numbers.length())\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpyjhfuoyc.d(105): Error: found `unittest` when expecting `)`\n/tmp/tmpyjhfuoyc.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyjhfuoyc.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyjhfuoyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k;\n    string result;\n    for(i=0; i<numbers.length(); i++)\n    {\n        for(j=i+1; j<numbers.length(); j++)\n        {\n            if(numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for(i=0; i<numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpwo21u73p.d(14): Error: no property `length` for type `string`\n/tmp/tmpwo21u73p.d(16): Error: no property `length` for type `string`\n/tmp/tmpwo21u73p.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpwo21u73p.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpwo21u73p.d(26): Error: no property `length` for type `string`\n/tmp/tmpwo21u73p.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwo21u73p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int n = numbers.length();\n    int k = 0;\n    int m = 0;\n    int temp = 0;\n    while(i < n)\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpwab2xobe.d(104): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpwab2xobe.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwab2xobe.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwab2xobe.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwab2xobe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while (i < numbers.length())\n    {\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            count++;\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        if (count > 0)\n        {\n            result += numbers[j];\n            result += numbers[k];\n            count = 0;\n            j = i;\n            k = i;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp4rujsiof.d(17): Error: no property `length` for type `string`\n/tmp/tmp4rujsiof.d(19): Error: no property `length` for type `string`\n/tmp/tmp4rujsiof.d(23): Error: no property `length` for type `string`\n/tmp/tmp4rujsiof.d(27): Error: no property `length` for type `string`\n/tmp/tmp4rujsiof.d(32): Error: no property `length` for type `string`\n/tmp/tmp4rujsiof.d(38): Error: slice `result` is not mutable\n/tmp/tmp4rujsiof.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4rujsiof.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            for (k = j + 1; k < numbers.length(); k++)\n            {\n                if (numbers[k] == ' ')\n                {\n                    continue;\n                }\n                \n                if (numbers[i] > numbers[j] && numbers[i] > numbers[k])\n                {\n                    temp = numbers[i];\n                    numbers[i] = numbers[j];\n                    numbers[j] = numbers[k];\n                    numbers[k] = temp;\n                }\n                else if (numbers[i] > numbers[j] && numbers[i] > numbers[k])\n                {\n                    temp = numbers[i];\n                    numbers[i] = numbers[k];\n                    numbers[k] = temp;\n                }\n                else if (numbers[j] > numbers[k] && numbers[j] > numbers[i])\n                {\n                    temp = numbers[j];\n                    numbers[j] = numbers[k];\n                    numbers[k] = temp;\n                }\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        result += numbers[i];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpzgkgkj30.d(15): Error: no property `length` for type `string`\n/tmp/tmpzgkgkj30.d(22): Error: no property `length` for type `string`\n/tmp/tmpzgkgkj30.d(29): Error: no property `length` for type `string`\n/tmp/tmpzgkgkj30.d(39): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpzgkgkj30.d(40): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpzgkgkj30.d(41): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmpzgkgkj30.d(46): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpzgkgkj30.d(47): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmpzgkgkj30.d(52): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpzgkgkj30.d(53): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmpzgkgkj30.d(59): Error: no property `length` for type `string`\n/tmp/tmpzgkgkj30.d(66): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        if (numbers[i] > numbers[j]) {\n            char temp = numbers[i];\n            numbers[i] = numbers[j];\n            numbers[j] = temp;\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpbl_qcd40.d(14): Error: no property `length` for type `string`\n/tmp/tmpbl_qcd40.d(17): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpbl_qcd40.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpbl_qcd40.d(21): Error: no property `length` for type `string`\n/tmp/tmpbl_qcd40.d(22): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbl_qcd40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < numbers.length())\n    {\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' '\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp99b_ky1j.d(81): Error: found `unittest` when expecting `)`\n/tmp/tmp99b_ky1j.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp99b_ky1j.d(91): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp99b_ky1j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = 0, k = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        if (numbers[i] >= '0' && numbers[i] <= '9') {\n            result += numbers[i];\n            k++;\n        }\n        if (k == 1) {\n            j = i;\n        }\n    }\n    for (i = j; i < result.length(); i++) {\n        result[i] = result[i+1];\n    }\n    result[result.length()-1] = ' ';\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmppooj37sx.d(14): Error: no property `length` for type `string`\n/tmp/tmppooj37sx.d(19): Error: slice `result` is not mutable\n/tmp/tmppooj37sx.d(26): Error: no property `length` for type `string`\n/tmp/tmppooj37sx.d(27): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmppooj37sx.d(29): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppooj37sx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k, n;\n    n = numbers.length();\n    for (i = 0; i < n; i++) {\n        for (j = i+1; j < n; j++) {\n            if (numbers[i] > numbers[j]) {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpxyx3crtr.d(14): Error: no property `length` for type `string`\n/tmp/tmpxyx3crtr.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpxyx3crtr.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpxyx3crtr.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyx3crtr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                break;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                break;\n            }\n            \n            if (numbers[i] < numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                break;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpwrgpp6py.d(92): Error: found `unittest` instead of statement\n/tmp/tmpwrgpp6py.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrgpp6py.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            n = stoi(numbers.substr(i, numbers.length() - i));\n            i = numbers.length();\n            result += to_string(n);\n        }\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpgmligpta.d(15): Error: no property `length` for type `string`\n/tmp/tmpgmligpta.d(23): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpgmligpta.d(24): Error: no property `length` for type `string`\n/tmp/tmpgmligpta.d(25): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmligpta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    stringstream ss(numbers);\n    int number;\n    while(ss >> number)\n    {\n        result += to_string(number) + \" \";\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpkhtih37q.d(13): Error: undefined identifier `stringstream`\n/tmp/tmpkhtih37q.d(13): Error: `numbers` is used as a type\n/tmp/tmpkhtih37q.d(17): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhtih37q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpeadaqark.d(14): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(16): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpeadaqark.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpeadaqark.d(26): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeadaqark.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = 0, k = 0; i < numbers.length(); i++) {\n        if (numbers[i] >= '0' && numbers[i] <= '9') {\n            result += numbers[i];\n            k++;\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == '\\n') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == '\\t') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == '\\r') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == '\\b') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == '\\f') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == '\\v') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == '\\a') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == '\\0') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == '\\1') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpgkhgnkg2.d(78): Error: found `unittest` instead of statement\n/tmp/tmpgkhgnkg2.d(88): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgkhgnkg2.d(88): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgkhgnkg2.d(88): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkhgnkg2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] < numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp5bjqtwak.d(83): Error: found `unittest` when expecting `(`\n/tmp/tmp5bjqtwak.d(93): Error: found `void` when expecting `)`\n/tmp/tmp5bjqtwak.d(93): Error: found `{` when expecting `;` following statement\n/tmp/tmp5bjqtwak.d(93): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5bjqtwak.d(93): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bjqtwak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = 0;\n    int m = 0;\n    int temp = 0;\n    while(i < numbers.length())\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpbcyn5z9s.d(104): Error: found `unittest` instead of statement\n/tmp/tmpbcyn5z9s.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpbcyn5z9s.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcyn5z9s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '1')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '2')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '3')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '4')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '5')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '6')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '7')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '8')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '9')\n        {\n            i++;\n            continue;\n        }\n        result += numbers[i];\n        i++;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpg1q0puwq.d(16): Error: no property `length` for type `string`\n/tmp/tmpg1q0puwq.d(74): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1q0puwq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            for (k = j + 1; k < numbers.length(); k++) {\n                if (numbers[k] == ' ') {\n                    continue;\n                }\n                \n                for (l = k + 1; l < numbers.length(); l++) {\n                    if (numbers[l] == ' ') {\n                        continue;\n                    }\n                    \n                    for (m = l + 1; m < numbers.length(); m++) {\n                        if (numbers[m] == ' ') {\n                            continue;\n                        }\n                        \n                        for (n = m + 1; n < numbers.length(); n++) {\n                            if (numbers[n] == ' ') {\n                                continue;\n                            }\n                            \n                            for (p = n + 1; p < numbers.length(); p++) {\n                                if (numbers[p] == ' ') {\n                                    continue;\n                                }\n                                \n                                for (q = p + 1; q < numbers.length(); q++) {\n                                    if (numbers[q] == ' ') {\n                                        continue;\n                                    }\n                                    \n                                    for (r = q + 1; r < numbers.length(); r++) {\n                                        if (numbers[r] == ' ') {\n                                            continue;\n                                        }\n                                        \n                                        for (s = r + 1; s < numbers.length(); s++) {\n                                            if (numbers[s] == ' ') {\n                                                continue;\n                                            }\n                                            \n                                            for (t = s + 1; t\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpyisjpl7m.d(66): Error: found `unittest` when expecting `;` following `for` condition\n/tmp/tmpyisjpl7m.d(76): Error: found `void` when expecting `)`\n/tmp/tmpyisjpl7m.d(76): Error: found `{` when expecting `;` following statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statem",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int n = numbers.length();\n    int num = 0;\n    int num2 = 0;\n    while (i < n)\n    {\n        num = numbers[i] - '0';\n        while (j < n)\n        {\n            num2 = numbers[j] - '0';\n            if (num < num2)\n            {\n                result.push_back(numbers[j]);\n                result.push_back(numbers[i]);\n                break;\n            }\n            else if (num > num2)\n            {\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n                break;\n            }\n            j++;\n        }\n        i++;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpqh6gz7m5.d(15): Error: no property `length` for type `string`\n/tmp/tmpqh6gz7m5.d(26): Error: no property `push_back` for type `string`\n/tmp/tmpqh6gz7m5.d(27): Error: no property `push_back` for type `string`\n/tmp/tmpqh6gz7m5.d(32): Error: no property `push_back` for type `string`\n/tmp/tmpqh6gz7m5.d(33): Error: no property `push_back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqh6gz7m5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i] == ' ')\n            continue;\n        if(numbers[i] == '0')\n            result += \"zero \";\n        else if(numbers[i] == '1')\n            result += \"one \";\n        else if(numbers[i] == '2')\n            result += \"two \";\n        else if(numbers[i] == '3')\n            result += \"three \";\n        else if(numbers[i] == '4')\n            result += \"four \";\n        else if(numbers[i] == '5')\n            result += \"five \";\n        else if(numbers[i] == '6')\n            result += \"six \";\n        else if(numbers[i] == '7')\n            result += \"seven \";\n        else if(numbers[i] == '8')\n            result += \"eight \";\n        else if(numbers[i] == '9')\n            result += \"nine \";\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp5dw_1ugt.d(13): Error: no property `length` for type `string`\n/tmp/tmp5dw_1ugt.d(18): Error: slice `result` is not mutable\n/tmp/tmp5dw_1ugt.d(20): Error: slice `result` is not mutable\n/tmp/tmp5dw_1ugt.d(22): Error: slice `result` is not mutable\n/tmp/tmp5dw_1ugt.d(24): Error: slice `result` is not mutable\n/tmp/tmp5dw_1ugt.d(26): Error: slice `result` is not mutable\n/tmp/tmp5dw_1ugt.d(28): Error: slice `result` is not mutable\n/tmp/tmp5dw_1ugt.d(30): Error: slice `result` is not mutable\n/tmp/tmp5dw_1ugt.d(32): Error: slice `result` is not mutable\n/tmp/tmp5dw_1ugt.d(34): Error: slice `result` is not mutable\n/tmp/tmp5dw_1ugt.d(36): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dw_1ugt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string output;\n    int i, j, k;\n    for(i = 0; i < numbers.length(); i++)\n    {\n        for(j = i; j < numbers.length(); j++)\n        {\n            if(numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for(i = 0; i < numbers.length(); i++)\n    {\n        output += numbers[i];\n    }\n    return output;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpqtcbfyqs.d(14): Error: no property `length` for type `string`\n/tmp/tmpqtcbfyqs.d(16): Error: no property `length` for type `string`\n/tmp/tmpqtcbfyqs.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpqtcbfyqs.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpqtcbfyqs.d(26): Error: no property `length` for type `string`\n/tmp/tmpqtcbfyqs.d(28): Error: slice `output` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqtcbfyqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k;\n    string result;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i+1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmps61kizb1.d(14): Error: no property `length` for type `string`\n/tmp/tmps61kizb1.d(16): Error: no property `length` for type `string`\n/tmp/tmps61kizb1.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmps61kizb1.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmps61kizb1.d(26): Error: no property `length` for type `string`\n/tmp/tmps61kizb1.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps61kizb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i;\n    int j;\n    int k;\n    int n;\n    int m;\n    int temp;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        n = numbers[i] - '0';\n        \n        if (n < 0 || n > 9)\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            m = numbers[j] - '0';\n            \n            if (m < 0 || m > 9)\n            {\n                continue;\n            }\n            \n            if (n < m)\n            {\n                temp = n;\n                n = m;\n                m = temp;\n            }\n            \n            for (k = j + 1; k < numbers.length(); k++)\n            {\n                if (numbers[k] == ' ')\n                {\n                    continue;\n                }\n                \n                m = numbers[k] - '0';\n                \n                if (m < 0 || m > 9)\n                {\n                    continue;\n                }\n                \n                if (n < m)\n                {\n                    temp = n;\n                    n = m;\n                    m = temp;\n                }\n                \n                if (n > m)\n                {\n                    temp = n;\n                    n = m;\n                    m = temp;\n                }\n            }\n            \n            if (n != m)\n            {\n                temp = n;\n                n = m;\n                m = temp;\n            }\n            \n            if (n != m)\n            {\n                temp = n;\n                n = m;\n                m = temp;\n            }\n            \n            if (n != m)\n            {\n                temp = n;\n                n = m;\n                m = temp;\n            }\n            \n            if (n != m)\n            {\n                temp = n;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp5a2j9mcv.d(108): Error: found `unittest` instead of statement\n/tmp/tmp5a2j9mcv.d(118): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5a2j9mcv.d(118): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5a2j9mcv.d(118): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5a2j9mcv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j]) {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            if (numbers[i] < numbers[j]) {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j]) {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp_rbdcq12.d(77): Error: found `unittest` instead of statement\n/tmp/tmp_rbdcq12.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_rbdcq12.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_rbdcq12.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_rbdcq12.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j]) {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            if (numbers[i] < numbers[j]) {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j]) {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpni5ji3zi.d(75): Error: found `unittest` when expecting `;` following `for` condition\n/tmp/tmpni5ji3zi.d(85): Error: found `void` when expecting `)`\n/tmp/tmpni5ji3zi.d(85): Error: found `{` when expecting `;` following statement\n/tmp/tmpni5ji3zi.d(85): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpni5ji3zi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        for (k = i; k <= j; k++) {\n            if (numbers[k] > numbers[k + 1]) {\n                char temp = numbers[k];\n                numbers[k] = numbers[k + 1];\n                numbers[k + 1] = temp;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmppn_kvxoz.d(14): Error: no property `length` for type `string`\n/tmp/tmppn_kvxoz.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmppn_kvxoz.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)(k + 1)]`\n/tmp/tmppn_kvxoz.d(23): Error: no property `length` for type `string`\n/tmp/tmppn_kvxoz.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppn_kvxoz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    for (int i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') continue;\n        if (numbers[i] == '0') continue;\n        if (numbers[i] == '1') continue;\n        if (numbers[i] == '2') continue;\n        if (numbers[i] == '3') continue;\n        if (numbers[i] == '4') continue;\n        if (numbers[i] == '5') continue;\n        if (numbers[i] == '6') continue;\n        if (numbers[i] == '7') continue;\n        if (numbers[i] == '8') continue;\n        if (numbers[i] == '9') continue;\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp2_53wr71.d(13): Error: no property `length` for type `string`\n/tmp/tmp2_53wr71.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_53wr71.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l,\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpxq0tev7o.d(13): Error: no identifier for declarator `int`\n/tmp/tmpxq0tev7o.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxq0tev7o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while (i < numbers.length())\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpprdo0_kz.d(105): Error: found `unittest` when expecting `)`\n/tmp/tmpprdo0_kz.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpprdo0_kz.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprdo0_kz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i] == ' ')\n            continue;\n        int number = numbers[i] - '0';\n        int j = i;\n        while(j > 0 && numbers[j - 1] != ' ')\n        {\n            if(number > numbers[j - 1] - '0')\n            {\n                numbers[j] = numbers[j - 1];\n                numbers[j - 1] = number + '0';\n            }\n            else\n            {\n                numbers[j] = number + '0';\n                numbers[j - 1] = numbers[j - 1] - '0';\n            }\n            j--;\n        }\n        numbers[j] = number + '0';\n    }\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i] == ' ')\n            continue;\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpcsr2gfsw.d(13): Error: no property `length` for type `string`\n/tmp/tmpcsr2gfsw.d(23): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpcsr2gfsw.d(24): Error: cannot modify `immutable` expression `numbers[cast(ulong)(j - 1)]`\n/tmp/tmpcsr2gfsw.d(28): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpcsr2gfsw.d(29): Error: cannot modify `immutable` expression `numbers[cast(ulong)(j - 1)]`\n/tmp/tmpcsr2gfsw.d(33): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpcsr2gfsw.d(35): Error: no property `length` for type `string`\n/tmp/tmpcsr2gfsw.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcsr2gfsw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = 0;\n    int m = 0;\n    int temp = 0;\n    \n    while(i < numbers.length())\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        \n        if(numbers[i] == '0')\n        {\n            n = 0;\n            m = 0;\n            i++;\n            continue;\n        }\n        \n        if(numbers[i] == '1')\n        {\n            n = 1;\n            m = 0;\n            i++;\n            continue;\n        }\n        \n        if(numbers[i] == '2')\n        {\n            n = 2;\n            m = 0;\n            i++;\n            continue;\n        }\n        \n        if(numbers[i] == '3')\n        {\n            n = 3;\n            m = 0;\n            i++;\n            continue;\n        }\n        \n        if(numbers[i] == '4')\n        {\n            n = 4;\n            m = 0;\n            i++;\n            continue;\n        }\n        \n        if(numbers[i] == '5')\n        {\n            n = 5;\n            m = 0;\n            i++;\n            continue;\n        }\n        \n        if(numbers[i] == '6')\n        {\n            n = 6;\n            m = 0;\n            i++;\n            continue;\n        }\n        \n        if(numbers[i] == '7')\n        {\n            n = 7;\n            m = 0;\n            i++;\n            continue;\n        }\n        \n        if(numbers[i] == '8')\n        {\n            n = 8;\n            m = 0;\n            i++;\n            continue;\n        }\n        \n        if(numbers[i] == '9')\n        {\n            n = 9;\n            m = 0;\n            i++;\n            continue;\n        }\n        \n        if(n == 0)\n        \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp551a8p67.d(110): Error: found `unittest` instead of statement\n/tmp/tmp551a8p67.d(120): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp551a8p67.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for(i = 0; i < numbers.length(); i++)\n    {\n        for(j = i+1; j < numbers.length(); j++)\n        {\n            if(numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for(i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp3szhjmaj.d(14): Error: no property `length` for type `string`\n/tmp/tmp3szhjmaj.d(16): Error: no property `length` for type `string`\n/tmp/tmp3szhjmaj.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp3szhjmaj.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp3szhjmaj.d(26): Error: no property `length` for type `string`\n/tmp/tmp3szhjmaj.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3szhjmaj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpeadaqark.d(14): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(16): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpeadaqark.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpeadaqark.d(26): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeadaqark.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = 0, k = 0; i < numbers.length(); i++) {\n        if (numbers[i] >= '0' && numbers[i] <= '9') {\n            result += numbers[i];\n            k++;\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpv7vp48m8.d(80): Error: found `unittest` when expecting `(`\n/tmp/tmpv7vp48m8.d(90): Error: found `void` when expecting `)`\n/tmp/tmpv7vp48m8.d(90): Error: found `{` when expecting `;` following statement\n/tmp/tmpv7vp48m8.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv7vp48m8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    for (int i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        int num = stoi(numbers.substr(i, numbers.length() - i));\n        if (num == 9) {\n            result += \"nine \";\n        } else if (num == 8) {\n            result += \"eight \";\n        } else if (num == 7) {\n            result += \"seven \";\n        } else if (num == 6) {\n            result += \"six \";\n        } else if (num == 5) {\n            result += \"five \";\n        } else if (num == 4) {\n            result += \"four \";\n        } else if (num == 3) {\n            result += \"three \";\n        } else if (num == 2) {\n            result += \"two \";\n        } else if (num == 1) {\n            result += \"one \";\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp5c5gl27u.d(13): Error: no property `length` for type `string`\n/tmp/tmp5c5gl27u.d(17): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmp5c5gl27u.d(19): Error: slice `result` is not mutable\n/tmp/tmp5c5gl27u.d(21): Error: slice `result` is not mutable\n/tmp/tmp5c5gl27u.d(23): Error: slice `result` is not mutable\n/tmp/tmp5c5gl27u.d(25): Error: slice `result` is not mutable\n/tmp/tmp5c5gl27u.d(27): Error: slice `result` is not mutable\n/tmp/tmp5c5gl27u.d(29): Error: slice `result` is not mutable\n/tmp/tmp5c5gl27u.d(31): Error: slice `result` is not mutable\n/tmp/tmp5c5gl27u.d(33): Error: slice `result` is not mutable\n/tmp/tmp5c5gl27u.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5c5gl27u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n) {\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpkrvg3fm8.d(92): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkrvg3fm8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        while (i < n && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while (i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < n && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while (i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpx7xg9mi6.d(15): Error: no property `length` for type `string`\n/tmp/tmpx7xg9mi6.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx7xg9mi6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        if (numbers[i] > numbers[j]) {\n            char temp = numbers[i];\n            numbers[i] = numbers[j];\n            numbers[j] = temp;\n        }\n    }\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        if (numbers[i] > numbers[j]) {\n            char temp = numbers[i];\n            numbers[i] = numbers[j];\n            numbers[j] = temp;\n        }\n    }\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        if (numbers[i] > numbers[j]) {\n            char temp = numbers[i];\n            numbers[i] = numbers[j];\n            numbers[j] = temp;\n        }\n    }\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        if (numbers[i] > numbers[j]) {\n            char temp = numbers[i];\n            numbers[i] = numbers[j];\n            numbers[j] = temp;\n        }\n    }\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        if (numbers[i] > numbers[j]) {\n            char temp = numbers[i];\n            numbers[i] = numbers[j];\n            numbers[j] = temp;\n        }\n    }\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        if (numbers[i] > numbers[j]) {\n            char temp = numbers[i];\n            numbers[i] = numbers[j];\n            numbers[j] = temp;\n        }\n    }\n    for (i = 0, j = numbers.length() - 1; i <\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpqugvvpf4.d(57): Error: expression expected, not `unittest`\n/tmp/tmpqugvvpf4.d(58): Error: found `{` when expecting `;` following `for` condition\n/tmp/tmpqugvvpf4.d(59): Error: expression expected, not `alias`\n/tmp/tmpqugvvpf4.d(59): Error: found `candidate` when expecting `)`\n/tmp/tmpqugvvpf4.d(59): Error: found `=` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqugvvpf4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    n = numbers.length();\n    \n    for (i = 0; i < n; i++)\n    {\n        for (j = i + 1; j < n; j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < n; i++)\n    {\n        result += numbers[i];\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpodbagddl.d(15): Error: no property `length` for type `string`\n/tmp/tmpodbagddl.d(24): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpodbagddl.d(25): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpodbagddl.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpodbagddl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k, l;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[i] > numbers[j]) {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp1w5peoce.d(14): Error: no property `length` for type `string`\n/tmp/tmp1w5peoce.d(15): Error: no property `length` for type `string`\n/tmp/tmp1w5peoce.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp1w5peoce.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp1w5peoce.d(23): Error: no property `length` for type `string`\n/tmp/tmp1w5peoce.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1w5peoce.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < numbers.length())\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp69grefv3.d(104): Error: found `unittest` instead of statement\n/tmp/tmp69grefv3.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69grefv3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] == numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] == numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] == numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] == numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpcphtc_wa.d(81): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcphtc_wa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k;\n    string result;\n    for(i = 0; i < numbers.length(); i++)\n    {\n        for(j = i+1; j < numbers.length(); j++)\n        {\n            if(numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for(i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpleu1u1_p.d(14): Error: no property `length` for type `string`\n/tmp/tmpleu1u1_p.d(16): Error: no property `length` for type `string`\n/tmp/tmpleu1u1_p.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpleu1u1_p.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpleu1u1_p.d(26): Error: no property `length` for type `string`\n/tmp/tmpleu1u1_p.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpleu1u1_p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int m = 0;\n    int temp = 0;\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpqto9kogc.d(104): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpqto9kogc.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqto9kogc.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqto9kogc.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqto9kogc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z;\n    string result;\n    \n    // convert string to array of ints\n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            numbers[i] = '0';\n        }\n    }\n    \n    // convert array to vector\n    vector<int> v;\n    for (i = 0; i < numbers.length(); i++) {\n        v.push_back(numbers[i] - '0');\n    }\n    \n    // sort vector\n    sort(v.begin(), v.end());\n    \n    // convert vector to string\n    for (i = 0; i < v.size(); i++) {\n        result += v[i];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmposr5kpzg.d(23): Error: found `>` when expecting `.` following int\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmposr5kpzg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while(i < n)\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp48r1_3ue.d(105): Error: expression expected, not `unittest`\n/tmp/tmp48r1_3ue.d(106): Error: found `{` when expecting `)`\n/tmp/tmp48r1_3ue.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48r1_3ue.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k;\n    string result;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[i] > numbers[j]) {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpqw0d4q8m.d(14): Error: no property `length` for type `string`\n/tmp/tmpqw0d4q8m.d(15): Error: no property `length` for type `string`\n/tmp/tmpqw0d4q8m.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpqw0d4q8m.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpqw0d4q8m.d(23): Error: no property `length` for type `string`\n/tmp/tmpqw0d4q8m.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqw0d4q8m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    n = numbers.length();\n    \n    for (i = 0; i < n; i++)\n    {\n        for (j = i + 1; j < n; j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < n; i++)\n    {\n        result += numbers[i];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpzceil8vp.d(15): Error: no property `length` for type `string`\n/tmp/tmpzceil8vp.d(24): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpzceil8vp.d(25): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpzceil8vp.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzceil8vp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    for (int i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        int number = numbers[i] - '0';\n        int j = i;\n        while (j > 0 && numbers[j - 1] != ' ') {\n            if (number > numbers[j - 1] - '0') {\n                numbers[j] = numbers[j - 1];\n                numbers[j - 1] = number + '0';\n                number = numbers[j] - '0';\n                j--;\n            } else {\n                break;\n            }\n        }\n        if (j < i) {\n            numbers[j] = numbers[i];\n            numbers[i] = number + '0';\n        }\n    }\n    for (int i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp88cf4bdz.d(13): Error: no property `length` for type `string`\n/tmp/tmp88cf4bdz.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp88cf4bdz.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)(j - 1)]`\n/tmp/tmp88cf4bdz.d(30): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp88cf4bdz.d(31): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp88cf4bdz.d(34): Error: no property `length` for type `string`\n/tmp/tmp88cf4bdz.d(38): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88cf4bdz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string output;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        while (j < n && numbers[j] != ' ')\n        {\n            j++;\n        }\n        if (j < n)\n        {\n            j++;\n        }\n        while (k < n && numbers[k] != ' ')\n        {\n            k++;\n        }\n        if (k < n)\n        {\n            k++;\n        }\n        if (i < k)\n        {\n            output += numbers[i];\n            output += numbers[k];\n            i = k;\n        }\n        else\n        {\n            output += numbers[k];\n            output += numbers[i];\n            k = i;\n        }\n        i = j;\n        j = k;\n    }\n    return output;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp4k_85hqz.d(16): Error: no property `length` for type `string`\n/tmp/tmp4k_85hqz.d(37): Error: slice `output` is not mutable\n/tmp/tmp4k_85hqz.d(38): Error: slice `output` is not mutable\n/tmp/tmp4k_85hqz.d(43): Error: slice `output` is not mutable\n/tmp/tmp4k_85hqz.d(44): Error: slice `output` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4k_85hqz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int m = 0;\n    int temp = 0;\n    while(i < n)\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmppy1zhfza.d(104): Error: found `unittest` when expecting `;` following statement\n/tmp/tmppy1zhfza.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppy1zhfza.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppy1zhfza.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy1zhfza.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    n = numbers.length();\n    m = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (numbers[i] >= '0' && numbers[i] <= '9')\n        {\n            m++;\n        }\n    }\n    \n    result = \"\";\n    for (i = 0; i < m; i++)\n    {\n        result += numbers[i];\n    }\n    \n    for (i = 0; i < m; i++)\n    {\n        for (j = i + 1; j < m; j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < m; i++)\n    {\n        result += numbers[i];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpl0rk0yak.d(15): Error: no property `length` for type `string`\n/tmp/tmpl0rk0yak.d(28): Error: slice `result` is not mutable\n/tmp/tmpl0rk0yak.d(38): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpl0rk0yak.d(39): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpl0rk0yak.d(46): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl0rk0yak.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] < numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp_0sng_nt.d(87): Error: expression expected, not `unittest`\n/tmp/tmp_0sng_nt.d(88): Error: found `{` when expecting `)`\n/tmp/tmp_0sng_nt.d(97): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0sng_nt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpcz_1zzuh.d(105): Error: found `unittest` when expecting `)`\n/tmp/tmpcz_1zzuh.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcz_1zzuh.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcz_1zzuh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n) {\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpkrvg3fm8.d(92): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkrvg3fm8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = 0; j < numbers.length(); j++) {\n            for (k = 0; k < numbers.length(); k++) {\n                if (numbers[i] < numbers[j] && numbers[i] < numbers[k]) {\n                    result += numbers[i];\n                    numbers[i] = numbers[j];\n                    numbers[j] = numbers[k];\n                    numbers[k] = result[result.length() - 1];\n                }\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp9ka7unjn.d(14): Error: no property `length` for type `string`\n/tmp/tmp9ka7unjn.d(15): Error: no property `length` for type `string`\n/tmp/tmp9ka7unjn.d(16): Error: no property `length` for type `string`\n/tmp/tmp9ka7unjn.d(18): Error: slice `result` is not mutable\n/tmp/tmp9ka7unjn.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp9ka7unjn.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp9ka7unjn.d(21): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ka7unjn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int temp;\n    while (i < n)\n    {\n        while (i < n && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while (i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < n && numbers[i] != ' ')\n        {\n            j = i;\n            while (j < n && numbers[j] != ' ')\n            {\n                j++;\n            }\n            temp = stoi(numbers.substr(i, j - i));\n            if (temp > k)\n            {\n                k = temp;\n            }\n            i = j;\n        }\n    }\n    result = \"\";\n    while (k >= 0)\n    {\n        result += to_string(k) + \" \";\n        k--;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpons50iql.d(16): Error: no property `length` for type `string`\n/tmp/tmpons50iql.d(35): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpons50iql.d(46): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpons50iql.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = 0, k = 0; i < numbers.length(); i++) {\n        if (numbers[i] >= '0' && numbers[i] <= '9') {\n            result += numbers[i];\n            k++;\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if (numbers[i] == ' ') {\n            if (k > 0) {\n                result += ' ';\n                k = 0;\n            }\n        }\n        else if\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpv7vp48m8.d(80): Error: found `unittest` when expecting `(`\n/tmp/tmpv7vp48m8.d(90): Error: found `void` when expecting `)`\n/tmp/tmpv7vp48m8.d(90): Error: found `{` when expecting `;` following statement\n/tmp/tmpv7vp48m8.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv7vp48m8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++) {\n        n = numbers[i] - '0';\n        for (j = i + 1; j < numbers.length(); j++) {\n            k = numbers[j] - '0';\n            if (k < n) {\n                numbers[j] = numbers[i];\n                numbers[i] = k + '0';\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpa0wqeskw.d(15): Error: no property `length` for type `string`\n/tmp/tmpa0wqeskw.d(17): Error: no property `length` for type `string`\n/tmp/tmpa0wqeskw.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpa0wqeskw.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpa0wqeskw.d(26): Error: no property `length` for type `string`\n/tmp/tmpa0wqeskw.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0wqeskw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k;\n    string result;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmprmi7lxn8.d(14): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(16): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmprmi7lxn8.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmprmi7lxn8.d(26): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmi7lxn8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for(i = 0; i < numbers.length(); i++)\n    {\n        for(j = i+1; j < numbers.length(); j++)\n        {\n            if(numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for(i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp3szhjmaj.d(14): Error: no property `length` for type `string`\n/tmp/tmp3szhjmaj.d(16): Error: no property `length` for type `string`\n/tmp/tmp3szhjmaj.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp3szhjmaj.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp3szhjmaj.d(26): Error: no property `length` for type `string`\n/tmp/tmp3szhjmaj.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3szhjmaj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z;\n    string output;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else if (numbers[i] >= '0' && numbers[i] <= '9')\n        {\n            numbers[i] = tolower(numbers[i]);\n        }\n        else\n        {\n            numbers[i] = ' ';\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else if (numbers[i] >= '0' && numbers[i] <= '9')\n        {\n            numbers[i] = tolower(numbers[i]);\n        }\n        else\n        {\n            numbers[i] = ' ';\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else if (numbers[i] >= '0' && numbers[i] <= '9')\n        {\n            numbers[i] = tolower(numbers[i]);\n        }\n        else\n        {\n            numbers[i] = ' ';\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else if (numbers[i] >= '0' && numbers[i] <= '9')\n        {\n            numbers[i] = tolower(numbers[i]);\n        }\n        else\n        {\n            numbers[i] = ' ';\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpm8zutpsw.d(81): Error: found `unittest` instead of statement\n/tmp/tmpm8zutpsw.d(91): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8zutpsw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k;\n    string result;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmprmi7lxn8.d(14): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(16): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmprmi7lxn8.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmprmi7lxn8.d(26): Error: no property `length` for type `string`\n/tmp/tmprmi7lxn8.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmi7lxn8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        for (k = 0; k < numbers.length(); k++) {\n            if (numbers[k] > numbers[k + 1]) {\n                string temp = numbers[k];\n                numbers[k] = numbers[k + 1];\n                numbers[k + 1] = temp;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpdz_w_icy.d(14): Error: no property `length` for type `string`\n/tmp/tmpdz_w_icy.d(15): Error: no property `length` for type `string`\n/tmp/tmpdz_w_icy.d(17): Error: cannot implicitly convert expression `numbers[cast(ulong)k]` of type `immutable(char)` to `string`\n/tmp/tmpdz_w_icy.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmpdz_w_icy.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)(k + 1)]`\n/tmp/tmpdz_w_icy.d(23): Error: no property `length` for type `string`\n/tmp/tmpdz_w_icy.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdz_w_icy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l,\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpxq0tev7o.d(13): Error: no identifier for declarator `int`\n/tmp/tmpxq0tev7o.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxq0tev7o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] > numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] < numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (numbers[i] > numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n            continue;\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n                continue;\n            \n            if (n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp9n96cfa8.d(83): Error: found `unittest` when expecting `)`\n/tmp/tmp9n96cfa8.d(93): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp9n96cfa8.d(93): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp9n96cfa8.d(93): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9n96cfa8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        for (k = 0; k < numbers.length(); k++) {\n            if (numbers[k] > numbers[k + 1]) {\n                string temp = numbers[k];\n                numbers[k] = numbers[k + 1];\n                numbers[k + 1] = temp;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpdz_w_icy.d(14): Error: no property `length` for type `string`\n/tmp/tmpdz_w_icy.d(15): Error: no property `length` for type `string`\n/tmp/tmpdz_w_icy.d(17): Error: cannot implicitly convert expression `numbers[cast(ulong)k]` of type `immutable(char)` to `string`\n/tmp/tmpdz_w_icy.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmpdz_w_icy.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)(k + 1)]`\n/tmp/tmpdz_w_icy.d(23): Error: no property `length` for type `string`\n/tmp/tmpdz_w_icy.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdz_w_icy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for(i = 0; i < numbers.length(); i++)\n    {\n        for(j = 0; j < numbers.length(); j++)\n        {\n            for(k = 0; k < numbers.length(); k++)\n            {\n                if(numbers[i] > numbers[j])\n                {\n                    if(numbers[i] > numbers[k])\n                    {\n                        if(numbers[j] > numbers[k])\n                        {\n                            result = numbers[i] + \" \" + numbers[j] + \" \" + numbers[k];\n                        }\n                        else\n                        {\n                            result = numbers[i] + \" \" + numbers[k] + \" \" + numbers[j];\n                        }\n                    }\n                    else\n                    {\n                        if(numbers[j] > numbers[k])\n                        {\n                            result = numbers[j] + \" \" + numbers[i] + \" \" + numbers[k];\n                        }\n                        else\n                        {\n                            result = numbers[k] + \" \" + numbers[i] + \" \" + numbers[j];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmppk8febyz.d(14): Error: no property `length` for type `string`\n/tmp/tmppk8febyz.d(16): Error: no property `length` for type `string`\n/tmp/tmppk8febyz.d(18): Error: no property `length` for type `string`\n/tmp/tmppk8febyz.d(26): Error: incompatible types for `(numbers[cast(ulong)i]) + (\" \")`: `immutable(char)` and `string`\n/tmp/tmppk8febyz.d(30): Error: incompatible types for `(numbers[cast(ulong)i]) + (\" \")`: `immutable(char)` and `string`\n/tmp/tmppk8febyz.d(37): Error: incompatible types for `(numbers[cast(ulong)j]) + (\" \")`: `immutable(char)` and `string`\n/tmp/tmppk8febyz.d(41): Error: incompatible types for `(numbers[cast(ulong)k]) + (\" \")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppk8febyz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int m = 0;\n    int temp = 0;\n    while(i < n)\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmppy1zhfza.d(104): Error: found `unittest` when expecting `;` following statement\n/tmp/tmppy1zhfza.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppy1zhfza.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppy1zhfza.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy1zhfza.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i+1; j < numbers.length(); j++) {\n            if (numbers[i] > numbers[j]) {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmphzf2paw1.d(14): Error: no property `length` for type `string`\n/tmp/tmphzf2paw1.d(15): Error: no property `length` for type `string`\n/tmp/tmphzf2paw1.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmphzf2paw1.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmphzf2paw1.d(23): Error: no property `length` for type `string`\n/tmp/tmphzf2paw1.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphzf2paw1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = 0;\n    int m = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp_g_gl5tq.d(85): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_g_gl5tq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        if (numbers[i] > numbers[j]) {\n            swap(numbers, i, j);\n        }\n    }\n    result = numbers;\n    return result;\n}\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp0xia2m_l.d(14): Error: no property `length` for type `string`\n/tmp/tmp0xia2m_l.d(16): Error: undefined identifier `swap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xia2m_l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int m = 0;\n    int temp = 0;\n    while(i < n)\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '0')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '1')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '2')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '3')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '4')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '5')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '6')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '7')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '8')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '9')\n        {\n            i++;\n            continue;\n        }\n        m = i;\n        while(i < n)\n        {\n            if(numbers[i] == ' ')\n            {\n                i++;\n                continue;\n            }\n            if(numbers[i] == '0')\n            {\n                i++;\n                continue;\n            }\n            if(numbers[i] == '1')\n            {\n                i++;\n                continue;\n            }\n            if(numbers[i] == '2')\n            {\n                i++;\n                continue;\n            }\n            if(numbers[i] == '3')\n            {\n                i++;\n                continue;\n            }\n            \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpru29h7yh.d(105): Error: found `unittest` instead of statement\n/tmp/tmpru29h7yh.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpru29h7yh.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpru29h7yh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = 0; j < numbers.length(); j++)\n        {\n            for (k = 0; k < numbers.length(); k++)\n            {\n                if (numbers[i] > numbers[j] && numbers[i] > numbers[k])\n                {\n                    result = numbers[j] + \" \" + numbers[k] + \" \" + numbers[i];\n                    numbers[j] = numbers[i];\n                    numbers[k] = numbers[j];\n                    numbers[i] = result;\n                }\n            }\n        }\n    }\n    return numbers;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp5il2ohdf.d(14): Error: no property `length` for type `string`\n/tmp/tmp5il2ohdf.d(16): Error: no property `length` for type `string`\n/tmp/tmp5il2ohdf.d(18): Error: no property `length` for type `string`\n/tmp/tmp5il2ohdf.d(22): Error: incompatible types for `(numbers[cast(ulong)j]) + (\" \")`: `immutable(char)` and `string`\n/tmp/tmp5il2ohdf.d(23): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp5il2ohdf.d(24): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmp5il2ohdf.d(25): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5il2ohdf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpl46w7cjh.d(85): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl46w7cjh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmp2nufi8d2.d(105): Error: expression expected, not `unittest`\n/tmp/tmp2nufi8d2.d(106): Error: found `{` when expecting `)`\n/tmp/tmp2nufi8d2.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nufi8d2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            if (numbers[i] > numbers[j]) {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            if (numbers[i] < numbers[j]) {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            if (numbers[i] > numbers[j]) {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            if (numbers[i]\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpwxr5dqb2.d(72): Error: found `unittest` when expecting `)`\n/tmp/tmpwxr5dqb2.d(82): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwxr5dqb2.d(82): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpwxr5dqb2.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxr5dqb2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpcz_1zzuh.d(105): Error: found `unittest` when expecting `)`\n/tmp/tmpcz_1zzuh.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcz_1zzuh.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcz_1zzuh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = 0; j < numbers.length(); j++) {\n            if (numbers[i] == numbers[j]) {\n                for (k = 0; k < numbers.length(); k++) {\n                    if (numbers[k] == numbers[j]) {\n                        numbers[k] = numbers[i];\n                        numbers[i] = numbers[j];\n                        numbers[j] = numbers[k];\n                    }\n                }\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmplsq5c1f3.d(14): Error: no property `length` for type `string`\n/tmp/tmplsq5c1f3.d(15): Error: no property `length` for type `string`\n/tmp/tmplsq5c1f3.d(17): Error: no property `length` for type `string`\n/tmp/tmplsq5c1f3.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmplsq5c1f3.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmplsq5c1f3.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmplsq5c1f3.d(27): Error: no property `length` for type `string`\n/tmp/tmplsq5c1f3.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplsq5c1f3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                result += numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = result[result.length() - 1];\n                result[result.length() - 1] = numbers[i];\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpw3rjbdmp.d(14): Error: no property `length` for type `string`\n/tmp/tmpw3rjbdmp.d(16): Error: no property `length` for type `string`\n/tmp/tmpw3rjbdmp.d(20): Error: slice `result` is not mutable\n/tmp/tmpw3rjbdmp.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpw3rjbdmp.d(22): Error: no property `length` for type `string`\n/tmp/tmpw3rjbdmp.d(23): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3rjbdmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = 0;\n    int m = 0;\n    int temp = 0;\n    while (i < numbers.length())\n    {\n        while (numbers[i] != ' ')\n        {\n            n = n * 10 + numbers[i] - '0';\n            i++;\n        }\n        i++;\n        while (numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (numbers[i] != ' ')\n        {\n            m = m * 10 + numbers[i] - '0';\n            i++;\n        }\n        i++;\n        while (numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (numbers[i] != ' ')\n        {\n            k = k * 10 + numbers[i] - '0';\n            i++;\n        }\n        i++;\n        while (numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (numbers[i] != ' ')\n        {\n            j = j * 10 + numbers[i] - '0';\n            i++;\n        }\n        i++;\n        while (numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (numbers[i] != ' ')\n        {\n            temp = numbers[i] - '0';\n            if (temp < n)\n            {\n                n = temp;\n            }\n            if (temp < m)\n            {\n                m = temp;\n            }\n            if (temp < k)\n            {\n                k = temp;\n            }\n            i++;\n        }\n        if (n < m)\n        {\n            if (n < k)\n            {\n                result = result + to_string(n) + \" \";\n            }\n            else\n            {\n                result = result + to_string(k) + \" \";\n            }\n        }\n        else\n        {\n            if (m < k)\n            {\n                result =\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmptjz6dnt4.d(94): Error: expression expected, not `unittest`\n/tmp/tmptjz6dnt4.d(95): Error: found `{` when expecting `;` following statement\n/tmp/tmptjz6dnt4.d(104): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmptjz6dnt4.d(104): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmptjz6dnt4.d(104): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjz6dnt4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while(i < numbers.length())\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '0')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '1')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '2')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '3')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '4')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '5')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '6')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '7')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '8')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '9')\n        {\n            i++;\n            continue;\n        }\n        count = 0;\n        while(count < numbers.length())\n        {\n            if(numbers[count] == ' ')\n            {\n                count++;\n                continue;\n            }\n            if(numbers[count] == '0')\n            {\n                count++;\n                continue;\n            }\n            if(numbers[count] == '1')\n            {\n                count++;\n                continue;\n            }\n            if(numbers[count] == '2')\n            {\n                count++;\n                continue;\n            }\n            if(numbers[count] == '3')\n            {\n                count++;\n                continue;\n            }\n            if(numbers[count] == '4')\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp_y05z1ji.d(104): Error: found `unittest` instead of statement\n/tmp/tmp_y05z1ji.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_y05z1ji.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_y05z1ji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[j] == ' ') {\n                continue;\n            }\n            \n            for (k = j + 1; k < numbers.length(); k++) {\n                if (numbers[k] == ' ') {\n                    continue;\n                }\n                \n                for (l = k + 1; l < numbers.length(); l++) {\n                    if (numbers[l] == ' ') {\n                        continue;\n                    }\n                    \n                    for (m = l + 1; m < numbers.length(); m++) {\n                        if (numbers[m] == ' ') {\n                            continue;\n                        }\n                        \n                        for (n = m + 1; n < numbers.length(); n++) {\n                            if (numbers[n] == ' ') {\n                                continue;\n                            }\n                            \n                            for (p = n + 1; p < numbers.length(); p++) {\n                                if (numbers[p] == ' ') {\n                                    continue;\n                                }\n                                \n                                for (q = p + 1; q < numbers.length(); q++) {\n                                    if (numbers[q] == ' ') {\n                                        continue;\n                                    }\n                                    \n                                    for (r = q + 1; r < numbers.length(); r++) {\n                                        if (numbers[r] == ' ') {\n                                            continue;\n                                        }\n                                        \n                                        for (s = r + 1; s < numbers.length(); s++) {\n                                            if (numbers[s] == ' ') {\n                                                continue;\n                                            }\n                                            \n                                            for (t = s + 1; t\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpyisjpl7m.d(66): Error: found `unittest` when expecting `;` following `for` condition\n/tmp/tmpyisjpl7m.d(76): Error: found `void` when expecting `)`\n/tmp/tmpyisjpl7m.d(76): Error: found `{` when expecting `;` following statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyisjpl7m.d(76): Error: found `End of File` when expecting `}` following compound statem",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m;\n    string s;\n    \n    n = numbers.length();\n    \n    for (i = 0; i < n; i++)\n    {\n        for (j = i+1; j < n; j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                m = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = m;\n            }\n        }\n    }\n    \n    for (i = 0; i < n; i++)\n    {\n        s += numbers[i];\n    }\n    \n    return s;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpczbpcfr5.d(15): Error: no property `length` for type `string`\n/tmp/tmpczbpcfr5.d(24): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpczbpcfr5.d(25): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpczbpcfr5.d(32): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpczbpcfr5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string output;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i + 1; j < numbers.length(); j++) {\n            for (k = j + 1; k < numbers.length(); k++) {\n                if (numbers[i] > numbers[j] && numbers[i] > numbers[k]) {\n                    output = numbers;\n                    numbers[i] = numbers[j];\n                    numbers[j] = numbers[k];\n                    numbers[k] = output[i];\n                }\n            }\n        }\n    }\n    return numbers;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpzd0djljr.d(14): Error: no property `length` for type `string`\n/tmp/tmpzd0djljr.d(15): Error: no property `length` for type `string`\n/tmp/tmpzd0djljr.d(16): Error: no property `length` for type `string`\n/tmp/tmpzd0djljr.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpzd0djljr.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpzd0djljr.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzd0djljr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n) {\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpkrvg3fm8.d(92): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkrvg3fm8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < numbers.length())\n    {\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            result += numbers[i];\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        if (i < numbers.length())\n        {\n            result += ' ';\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp9c_03ff7.d(16): Error: no property `length` for type `string`\n/tmp/tmp9c_03ff7.d(18): Error: no property `length` for type `string`\n/tmp/tmp9c_03ff7.d(22): Error: no property `length` for type `string`\n/tmp/tmp9c_03ff7.d(26): Error: no property `length` for type `string`\n/tmp/tmp9c_03ff7.d(28): Error: slice `result` is not mutable\n/tmp/tmp9c_03ff7.d(31): Error: no property `length` for type `string`\n/tmp/tmp9c_03ff7.d(35): Error: no property `length` for type `string`\n/tmp/tmp9c_03ff7.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9c_03ff7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[i] > numbers[j]) {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    \n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp6cbeluip.d(15): Error: no property `length` for type `string`\n/tmp/tmp6cbeluip.d(16): Error: no property `length` for type `string`\n/tmp/tmp6cbeluip.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp6cbeluip.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp6cbeluip.d(25): Error: no property `length` for type `string`\n/tmp/tmp6cbeluip.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cbeluip.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i + 1; j < numbers.length(); j++) {\n            for (k = j + 1; k < numbers.length(); k++) {\n                if (numbers[i] > numbers[j]) {\n                    if (numbers[j] > numbers[k]) {\n                        result = numbers[i] + \" \" + numbers[j] + \" \" + numbers[k];\n                        numbers[i] = numbers[j];\n                        numbers[j] = numbers[k];\n                        numbers[k] = result;\n                    }\n                    else {\n                        result = numbers[i] + \" \" + numbers[k] + \" \" + numbers[j];\n                        numbers[i] = numbers[k];\n                        numbers[k] = numbers[j];\n                        numbers[j] = result;\n                    }\n                }\n                else if (numbers[i] > numbers[j]) {\n                    result = numbers[j] + \" \" + numbers[i] + \" \" + numbers[k];\n                    numbers[j] = numbers[i];\n                    numbers[i] = numbers[k];\n                    numbers[k] = result;\n                }\n                else if (numbers[i] > numbers[k]) {\n                    result = numbers[k] + \" \" + numbers[i] + \" \" + numbers[j];\n                    numbers[k] = numbers[i];\n                    numbers[i] = numbers[j];\n                    numbers[j] = result;\n                }\n            }\n        }\n    }\n    return numbers;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp3xy2uoi9.d(14): Error: no property `length` for type `string`\n/tmp/tmp3xy2uoi9.d(15): Error: no property `length` for type `string`\n/tmp/tmp3xy2uoi9.d(16): Error: no property `length` for type `string`\n/tmp/tmp3xy2uoi9.d(19): Error: incompatible types for `(numbers[cast(ulong)i]) + (\" \")`: `immutable(char)` and `string`\n/tmp/tmp3xy2uoi9.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp3xy2uoi9.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp3xy2uoi9.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmp3xy2uoi9.d(25): Error: incompatible types for `(numbers[cast(ulong)i]) + (\" \")`: `immutable(char)` and `string`\n/tmp/tmp3xy2uoi9.d(26): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp3xy2uoi9.d(27): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmp3xy2uoi9.d(28): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp3xy2uoi9.d(32)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < numbers.length())\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp69grefv3.d(104): Error: found `unittest` instead of statement\n/tmp/tmp69grefv3.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69grefv3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i;\n    int j;\n    int k;\n    int n;\n    int m;\n    int temp;\n    \n    for(i=0;i<numbers.length();i++)\n    {\n        if(numbers[i]==' ')\n        {\n            continue;\n        }\n        else\n        {\n            n=numbers[i]-'0';\n            result.push_back(n);\n        }\n    }\n    \n    for(i=0;i<result.length();i++)\n    {\n        for(j=i+1;j<result.length();j++)\n        {\n            if(result[i]>result[j])\n            {\n                temp=result[i];\n                result[i]=result[j];\n                result[j]=temp;\n            }\n        }\n    }\n    \n    for(i=0;i<result.length();i++)\n    {\n        for(j=i+1;j<result.length();j++)\n        {\n            if(result[i]>result[j])\n            {\n                temp=result[i];\n                result[i]=result[j];\n                result[j]=temp;\n            }\n        }\n    }\n    \n    for(i=0;i<result.length();i++)\n    {\n        for(j=i+1;j<result.length();j++)\n        {\n            if(result[i]>result[j])\n            {\n                temp=result[i];\n                result[i]=result[j];\n                result[j]=temp;\n            }\n        }\n    }\n    \n    for(i=0;i<result.length();i++)\n    {\n        for(j=i+1;j<result.length();j++)\n        {\n            if(result[i]>result[j])\n            {\n                temp=result[i];\n                result[i]=result[j];\n                result[j]=temp;\n            }\n        }\n    }\n    \n    for(i=0;i<result.length();i++)\n    {\n        for(\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp4va0mrne.d(88): Error: found `unittest` instead of statement\n/tmp/tmp4va0mrne.d(93): Error: found `;` when expecting `)`\n/tmp/tmp4va0mrne.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4va0mrne.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    for (int i = 0; i < numbers.length(); i++) {\n        int number = numbers[i] - '0';\n        int j = i;\n        while (j > 0 && numbers[j - 1] > number) {\n            numbers[j] = numbers[j - 1];\n            j--;\n        }\n        numbers[j] = number;\n    }\n    for (int i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpsyj0wp0i.d(13): Error: no property `length` for type `string`\n/tmp/tmpsyj0wp0i.d(17): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpsyj0wp0i.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpsyj0wp0i.d(22): Error: no property `length` for type `string`\n/tmp/tmpsyj0wp0i.d(23): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyj0wp0i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, l, m, n, p;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                p = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = p;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] < numbers[j])\n            {\n                p = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = p;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                p = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = p;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpx4rzq1eq.d(91): Error: found `unittest` instead of statement\n/tmp/tmpx4rzq1eq.d(101): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4rzq1eq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    int max = 0;\n    int min = 0;\n    while(i < numbers.length())\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '0')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '1')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '2')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '3')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '4')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '5')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '6')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '7')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '8')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '9')\n        {\n            i++;\n            continue;\n        }\n        count = 0;\n        while(numbers[i] != ' ')\n        {\n            count++;\n            i++;\n        }\n        if(count > max)\n        {\n            max = count;\n        }\n        if(count < min)\n        {\n            min = count;\n        }\n        if(count == max)\n        {\n            result += numbers[j];\n            result += \" \";\n            j = i;\n            i++;\n            continue;\n        }\n        if(count == min)\n        {\n            result += numbers[j];\n            result += \" \";\n            j = i;\n            i++;\n            continue;\n        }\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpzds5m6lv.d(105): Error: found `unittest` instead of statement\n/tmp/tmpzds5m6lv.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzds5m6lv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int n = numbers.length();\n    while (i < n) {\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpyz2gio7q.d(93): Error: found `unittest` instead of statement\n/tmp/tmpyz2gio7q.d(103): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpyz2gio7q.d(103): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyz2gio7q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        for (k = i; k <= j; k++) {\n            if (numbers[k] > numbers[k + 1]) {\n                string temp = numbers[k];\n                numbers[k] = numbers[k + 1];\n                numbers[k + 1] = temp;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp03y_hnac.d(14): Error: no property `length` for type `string`\n/tmp/tmp03y_hnac.d(17): Error: cannot implicitly convert expression `numbers[cast(ulong)k]` of type `immutable(char)` to `string`\n/tmp/tmp03y_hnac.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmp03y_hnac.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)(k + 1)]`\n/tmp/tmp03y_hnac.d(23): Error: no property `length` for type `string`\n/tmp/tmp03y_hnac.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03y_hnac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n) {\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp_4atuvje.d(92): Error: found `unittest` instead of statement\n/tmp/tmp_4atuvje.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_4atuvje.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4atuvje.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = 0, k = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] >= '0' && numbers[i] <= '9')\n        {\n            if (k == 0)\n            {\n                result += numbers[i];\n                k = 1;\n            }\n            else if (k == 1)\n            {\n                if (numbers[i] < numbers[j])\n                {\n                    result[j] = numbers[i];\n                    j++;\n                }\n                else\n                {\n                    result[k] = numbers[i];\n                    k++;\n                }\n            }\n            else\n            {\n                if (numbers[i] < numbers[j])\n                {\n                    result[j] = numbers[i];\n                    j++;\n                }\n                else if (numbers[i] < numbers[k])\n                {\n                    result[k] = numbers[i];\n                    k++;\n                }\n                else\n                {\n                    result[j] = numbers[i];\n                    j++;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp_7oue121.d(14): Error: no property `length` for type `string`\n/tmp/tmp_7oue121.d(20): Error: slice `result` is not mutable\n/tmp/tmp_7oue121.d(27): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\n/tmp/tmp_7oue121.d(32): Error: cannot modify `immutable` expression `result[cast(ulong)k]`\n/tmp/tmp_7oue121.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\n/tmp/tmp_7oue121.d(45): Error: cannot modify `immutable` expression `result[cast(ulong)k]`\n/tmp/tmp_7oue121.d(50): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_7oue121.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpcz_1zzuh.d(105): Error: found `unittest` when expecting `)`\n/tmp/tmpcz_1zzuh.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcz_1zzuh.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcz_1zzuh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    int count;\n    \n    for (i = 0, j = 0, count = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        if (numbers[i] >= '0' && numbers[i] <= '9') {\n            count++;\n        }\n        if (count == 1) {\n            result += numbers[i];\n            j = i;\n        }\n    }\n    \n    for (i = 0, j = 0, count = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        if (numbers[i] >= '0' && numbers[i] <= '9') {\n            count++;\n        }\n        if (count == 2) {\n            result += numbers[i];\n            k = i;\n        }\n    }\n    \n    for (i = 0, j = 0, count = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        if (numbers[i] >= '0' && numbers[i] <= '9') {\n            count++;\n        }\n        if (count == 3) {\n            result += numbers[i];\n            k = i;\n        }\n    }\n    \n    for (i = 0, j = 0, count = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        if (numbers[i] >= '0' && numbers[i] <= '9') {\n            count++;\n        }\n        if (count == 4) {\n            result += numbers[i];\n            k = i;\n        }\n    }\n    \n    for (i = 0, j = 0, count = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            continue;\n        }\n        if (numbers[i] >= '0' && numbers[\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpqrbslggx.d(73): Error: expression expected, not `unittest`\n/tmp/tmpqrbslggx.d(74): Error: found `{` when expecting `,`\n/tmp/tmpqrbslggx.d(75): Error: expression expected, not `alias`\n/tmp/tmpqrbslggx.d(75): Error: found `candidate` when expecting `,`\n/tmp/tmpqrbslggx.d(75): Error: expression expected, not `=`\n/tmp/tmpqrbslggx.d(75): Error: found `sort_numbers` when expecting `,`\n/tmp/tmpqrbslggx.d(75): Error: expression expected, not `;`\n/tmp/tmpqrbslggx.d(77): Error: found `assert` when expecting `,`\n/tmp/tmpqrbslggx.d(77): Error: found `;` when expecting `,`\n/tmp/tmpqrbslggx.d(78): Error: found `;` when expecting `,`\n/tmp/tmpqrbslggx.d(79): Error: found `;` when expecting `,`\n/tmp/tmpqrbslggx.d(80): Error: found `;` when expecting `,`\n/tmp/tmpqrbslggx.d(81): Error: found `;` when expecting `,`\n/tmp/tmpqrbslggx.d(82): Error: expression expected, not `}`\n/tmp/tmpqrbslggx.d(83): Error: found `void` when expecting `,`\n/tmp/tmpqrbslggx.d(83): Error: found `{` when expecting `,`\n/tmp/tmpqrbslggx.d(83): Er",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        if (numbers[i] > numbers[j]) {\n            char temp = numbers[i];\n            numbers[i] = numbers[j];\n            numbers[j] = temp;\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpbl_qcd40.d(14): Error: no property `length` for type `string`\n/tmp/tmpbl_qcd40.d(17): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpbl_qcd40.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpbl_qcd40.d(21): Error: no property `length` for type `string`\n/tmp/tmpbl_qcd40.d(22): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbl_qcd40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n) {\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp_4atuvje.d(92): Error: found `unittest` instead of statement\n/tmp/tmp_4atuvje.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_4atuvje.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4atuvje.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpcz_1zzuh.d(105): Error: found `unittest` when expecting `)`\n/tmp/tmpcz_1zzuh.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcz_1zzuh.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcz_1zzuh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < numbers.length()) {\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpijhnegkb.d(92): Error: found `unittest` instead of statement\n/tmp/tmpijhnegkb.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpijhnegkb.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijhnegkb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n) {\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpkrvg3fm8.d(92): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkrvg3fm8.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkrvg3fm8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k;\n    string result;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[i] > numbers[j]) {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpqw0d4q8m.d(14): Error: no property `length` for type `string`\n/tmp/tmpqw0d4q8m.d(15): Error: no property `length` for type `string`\n/tmp/tmpqw0d4q8m.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpqw0d4q8m.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpqw0d4q8m.d(23): Error: no property `length` for type `string`\n/tmp/tmpqw0d4q8m.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqw0d4q8m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int temp = 0;\n    while (i < numbers.length())\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        count = 0;\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            count++;\n            i++;\n        }\n        if (count == 0)\n        {\n            i++;\n            continue;\n        }\n        j = i;\n        k = i;\n        while (j < numbers.length() && numbers[j] != ' ')\n        {\n            j++;\n        }\n        while (k < numbers.length() && numbers[k] != ' ')\n        {\n            k++;\n        }\n        temp = atoi(numbers.substr(i, j - i).c_str());\n        if (temp > atoi(numbers.substr(i, k - i).c_str()))\n        {\n            result += numbers.substr(i, j - i);\n            result += numbers.substr(i, k - i);\n        }\n        else\n        {\n            result += numbers.substr(i, k - i);\n            result += numbers.substr(i, j - i);\n        }\n        i = j;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp4y9rn5qq.d(18): Error: no property `length` for type `string`\n/tmp/tmp4y9rn5qq.d(26): Error: no property `length` for type `string`\n/tmp/tmp4y9rn5qq.d(38): Error: no property `length` for type `string`\n/tmp/tmp4y9rn5qq.d(42): Error: no property `length` for type `string`\n/tmp/tmp4y9rn5qq.d(46): Error: undefined identifier `atoi`, did you mean function `atan`?\n/tmp/tmp4y9rn5qq.d(47): Error: undefined identifier `atoi`, did you mean function `atan`?\n/tmp/tmp4y9rn5qq.d(49): Error: no property `substr` for type `string`\n/tmp/tmp4y9rn5qq.d(50): Error: no property `substr` for type `string`\n/tmp/tmp4y9rn5qq.d(54): Error: no property `substr` for type `string`\n/tmp/tmp4y9rn5qq.d(55): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4y9rn5qq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int temp = 0;\n    while (i < numbers.length())\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmptrg61l1u.d(105): Error: found `unittest` instead of statement\n/tmp/tmptrg61l1u.d(115): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmptrg61l1u.d(115): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptrg61l1u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    int num_count = 0;\n    int num_index = 0;\n    int num_index_temp = 0;\n    int num_index_temp_temp = 0;\n    int num_index_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    int num_index_temp_temp_temp_temp_temp_temp_temp\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpcjfgd_0n.d(34): Error: semicolon expected, not `unittest`\n/tmp/tmpcjfgd_0n.d(34): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcjfgd_0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpeadaqark.d(14): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(16): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpeadaqark.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpeadaqark.d(26): Error: no property `length` for type `string`\n/tmp/tmpeadaqark.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeadaqark.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i] == ' ')\n            continue;\n        int num = stoi(numbers.substr(i, numbers.length() - i));\n        if(num > 9)\n            num = 9;\n        if(num < 0)\n            num = 0;\n        result += to_string(num);\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpne1gvjhi.d(13): Error: no property `length` for type `string`\n/tmp/tmpne1gvjhi.d(17): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpne1gvjhi.d(22): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpne1gvjhi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int m = 0;\n    int temp = 0;\n    while(i < n)\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '0')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '1')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '2')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '3')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '4')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '5')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '6')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '7')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '8')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == '9')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpgfru7zfk.d(104): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpgfru7zfk.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgfru7zfk.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgfru7zfk.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgfru7zfk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i+1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp9_n55w43.d(14): Error: no property `length` for type `string`\n/tmp/tmp9_n55w43.d(16): Error: no property `length` for type `string`\n/tmp/tmp9_n55w43.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp9_n55w43.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp9_n55w43.d(26): Error: no property `length` for type `string`\n/tmp/tmp9_n55w43.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_n55w43.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k, n;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        for (j = i+1; j < numbers.length(); j++)\n        {\n            if (numbers[i] > numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmplze07fv4.d(14): Error: no property `length` for type `string`\n/tmp/tmplze07fv4.d(16): Error: no property `length` for type `string`\n/tmp/tmplze07fv4.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmplze07fv4.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmplze07fv4.d(26): Error: no property `length` for type `string`\n/tmp/tmplze07fv4.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplze07fv4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int n = numbers.length();\n    int num = 0;\n    while (i < n)\n    {\n        num = numbers[i] - '0';\n        if (num < 0 || num > 9)\n        {\n            i++;\n            continue;\n        }\n        while (j < n && numbers[j] != ' ')\n        {\n            j++;\n        }\n        if (j < n)\n        {\n            j++;\n        }\n        result += num;\n        result += ' ';\n        i = j;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpy4idsgqx.d(15): Error: no property `length` for type `string`\n/tmp/tmpy4idsgqx.d(33): Error: incompatible types for `(result) += (num)`: `string` and `int`\n/tmp/tmpy4idsgqx.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4idsgqx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string output = \"\";\n    stringstream ss(numbers);\n    int number;\n    while(ss >> number)\n    {\n        output += to_string(number) + \" \";\n    }\n    return output;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpeufu3kg3.d(13): Error: undefined identifier `stringstream`\n/tmp/tmpeufu3kg3.d(13): Error: `numbers` is used as a type\n/tmp/tmpeufu3kg3.d(17): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeufu3kg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int m = 0;\n    int temp = 0;\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpqto9kogc.d(104): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpqto9kogc.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqto9kogc.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpqto9kogc.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqto9kogc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpl46w7cjh.d(85): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl46w7cjh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    int n = numbers.length();\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (numbers[i] > numbers[j]) {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpuzdb789z.d(14): Error: no property `length` for type `string`\n/tmp/tmpuzdb789z.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpuzdb789z.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpuzdb789z.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzdb789z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] < numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                n = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = n;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpxv6fgy7q.d(92): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpxv6fgy7q.d(102): Error: found `void` when expecting `;` following `for` condition\n/tmp/tmpxv6fgy7q.d(102): Error: found `{` when expecting `)`\n/tmp/tmpxv6fgy7q.d(102): Error: found `}` instead of statement\n/tmp/tmpxv6fgy7q.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxv6fgy7q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i + 1; j < numbers.length(); j++) {\n            for (k = j + 1; k < numbers.length(); k++) {\n                if (numbers[i] > numbers[j] && numbers[i] > numbers[k]) {\n                    result += numbers[i];\n                    numbers[i] = numbers[j];\n                    numbers[j] = numbers[k];\n                    numbers[k] = result[result.length() - 1];\n                }\n                else if (numbers[i] > numbers[j] && numbers[i] < numbers[k]) {\n                    result += numbers[i];\n                    numbers[i] = numbers[j];\n                    numbers[j] = numbers[k];\n                    numbers[k] = result[result.length() - 1];\n                }\n                else if (numbers[i] < numbers[j] && numbers[i] > numbers[k]) {\n                    result += numbers[i];\n                    numbers[i] = numbers[j];\n                    numbers[j] = numbers[k];\n                    numbers[k] = result[result.length() - 1];\n                }\n                else if (numbers[i] < numbers[j] && numbers[i] < numbers[k]) {\n                    result += numbers[i];\n                    numbers[i] = numbers[j];\n                    numbers[j] = numbers[k];\n                    numbers[k] = result[result.length() - 1];\n                }\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpyces1fnx.d(14): Error: no property `length` for type `string`\n/tmp/tmpyces1fnx.d(15): Error: no property `length` for type `string`\n/tmp/tmpyces1fnx.d(16): Error: no property `length` for type `string`\n/tmp/tmpyces1fnx.d(18): Error: slice `result` is not mutable\n/tmp/tmpyces1fnx.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpyces1fnx.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpyces1fnx.d(21): Error: no property `length` for type `string`\n/tmp/tmpyces1fnx.d(24): Error: slice `result` is not mutable\n/tmp/tmpyces1fnx.d(25): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpyces1fnx.d(26): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpyces1fnx.d(27): Error: no property `length` for type `string`\n/tmp/tmpyces1fnx.d(30): Error: slice `result` is not mutable\n/tmp/tmpyces1fnx.d(31): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpyces1fnx.d(32): Error: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < numbers.length())\n    {\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            j = i;\n            while (j < numbers.length() && numbers[j] != ' ')\n            {\n                j++;\n            }\n            if (j - i > k)\n            {\n                k = j - i;\n            }\n            i = j;\n        }\n        result += numbers.substr(i, k + 1);\n        result += ' ';\n        i = k + 1;\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp7xyuc2z3.d(16): Error: no property `length` for type `string`\n/tmp/tmp7xyuc2z3.d(18): Error: no property `length` for type `string`\n/tmp/tmp7xyuc2z3.d(22): Error: no property `length` for type `string`\n/tmp/tmp7xyuc2z3.d(26): Error: no property `length` for type `string`\n/tmp/tmp7xyuc2z3.d(29): Error: no property `length` for type `string`\n/tmp/tmp7xyuc2z3.d(39): Error: no property `substr` for type `string`\n/tmp/tmp7xyuc2z3.d(40): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xyuc2z3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while (i < n) {\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ') {\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp_4atuvje.d(92): Error: found `unittest` instead of statement\n/tmp/tmp_4atuvje.d(102): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_4atuvje.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_4atuvje.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int n = numbers.length();\n    int num = 0;\n    while (i < n)\n    {\n        while (i < n && numbers[i] != ' ')\n        {\n            i++;\n        }\n        if (i < n)\n        {\n            i++;\n        }\n        while (i < n && numbers[i] == ' ')\n        {\n            i++;\n        }\n        if (i < n)\n        {\n            num = stoi(numbers.substr(j, i - j));\n            if (num > 9)\n            {\n                num = num % 10;\n            }\n            result += to_string(num);\n            j = i;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpae8q7jom.d(15): Error: no property `length` for type `string`\n/tmp/tmpae8q7jom.d(33): Error: undefined identifier `stoi`, did you mean import `std`?\n/tmp/tmpae8q7jom.d(38): Error: undefined identifier `to_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpae8q7jom.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpuzwwk_bu.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzwwk_bu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = 0; j < numbers.length(); j++) {\n            for (k = 0; k < numbers.length(); k++) {\n                if (numbers[i] > numbers[j]) {\n                    if (numbers[i] > numbers[k]) {\n                        numbers[i] = numbers[k];\n                        numbers[k] = numbers[j];\n                        numbers[j] = numbers[i];\n                        result = numbers;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpbjta79qt.d(14): Error: no property `length` for type `string`\n/tmp/tmpbjta79qt.d(15): Error: no property `length` for type `string`\n/tmp/tmpbjta79qt.d(16): Error: no property `length` for type `string`\n/tmp/tmpbjta79qt.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpbjta79qt.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmpbjta79qt.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjta79qt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = 0;\n    int m = 0;\n    int temp = 0;\n    while (i < numbers.length())\n    {\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            n = numbers[i] - '0';\n            if (n > 9)\n            {\n                n = n - 10;\n            }\n            result.push_back(n + '0');\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            m = numbers[i] - '0';\n            if (m > 9)\n            {\n                m = m - 10;\n            }\n            result.push_back(m + '0');\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            j = numbers[i] - '0';\n            if (j > 9)\n            {\n                j = j - 10;\n            }\n            result.push_back(j + '0');\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] == ' ')\n        {\n            i++;\n        }\n        while (i < numbers.length() && numbers[i] != ' ')\n        {\n            k = numbers[i] - '0';\n            if (k > 9)\n            {\n                k = k - 10;\n            }\n            result.push_back(k + '0');\n            i++;\n        }\n        \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp9o0cdzk7.d(82): Error: found `unittest` instead of statement\n/tmp/tmp9o0cdzk7.d(92): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9o0cdzk7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string output;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    \nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpj1qkjryg.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1qkjryg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i + 1; j < numbers.length(); j++) {\n            for (k = j + 1; k < numbers.length(); k++) {\n                if (numbers[i] > numbers[j] && numbers[j] > numbers[k]) {\n                    result += numbers[i] + \" \";\n                    numbers[i] = numbers[j];\n                    numbers[j] = numbers[k];\n                    numbers[k] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmplhzl1n_0.d(14): Error: no property `length` for type `string`\n/tmp/tmplhzl1n_0.d(15): Error: no property `length` for type `string`\n/tmp/tmplhzl1n_0.d(16): Error: no property `length` for type `string`\n/tmp/tmplhzl1n_0.d(18): Error: incompatible types for `(numbers[cast(ulong)i]) + (\" \")`: `immutable(char)` and `string`\n/tmp/tmplhzl1n_0.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmplhzl1n_0.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmplhzl1n_0.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhzl1n_0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int num = 0;\n    while (i < numbers.length())\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\n')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\r')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\t')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\f')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\v')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\b')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\a')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\\0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpt0ih550z.d(100): Error: unterminated character constant\n/tmp/tmpt0ih550z.d(101): Error: found `unittest` when expecting `)`\n/tmp/tmpt0ih550z.d(111): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpt0ih550z.d(111): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt0ih550z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0, j = numbers.length() - 1; i < j; i++, j--) {\n        for (k = 0; k < numbers.length(); k++) {\n            if (numbers[k] > numbers[k+1]) {\n                char temp = numbers[k];\n                numbers[k] = numbers[k+1];\n                numbers[k+1] = temp;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpiyczs91h.d(14): Error: no property `length` for type `string`\n/tmp/tmpiyczs91h.d(15): Error: no property `length` for type `string`\n/tmp/tmpiyczs91h.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmpiyczs91h.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)(k + 1)]`\n/tmp/tmpiyczs91h.d(23): Error: no property `length` for type `string`\n/tmp/tmpiyczs91h.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiyczs91h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = i + 1; j < numbers.length(); j++) {\n            if (numbers[i] > numbers[j]) {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpxowh1v0h.d(14): Error: no property `length` for type `string`\n/tmp/tmpxowh1v0h.d(15): Error: no property `length` for type `string`\n/tmp/tmpxowh1v0h.d(18): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpxowh1v0h.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpxowh1v0h.d(23): Error: no property `length` for type `string`\n/tmp/tmpxowh1v0h.d(24): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxowh1v0h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = 0;\n    int m = 0;\n    int l = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp50x2zoct.d(85): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50x2zoct.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for(i = 0; i < numbers.length(); i++)\n    {\n        for(j = i+1; j < numbers.length(); j++)\n        {\n            if(numbers[i] > numbers[j])\n            {\n                k = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = k;\n            }\n        }\n    }\n    for(i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp3szhjmaj.d(14): Error: no property `length` for type `string`\n/tmp/tmp3szhjmaj.d(16): Error: no property `length` for type `string`\n/tmp/tmp3szhjmaj.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmp3szhjmaj.d(22): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmp3szhjmaj.d(26): Error: no property `length` for type `string`\n/tmp/tmp3szhjmaj.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3szhjmaj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    int i, j, k, n, m, temp;\n    string result;\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] < numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n        for (j = i + 1; j < numbers.length(); j++)\n        {\n            if (numbers[j] == ' ')\n            {\n                continue;\n            }\n            \n            if (numbers[i] > numbers[j])\n            {\n                temp = numbers[i];\n                numbers[i] = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n    }\n    \n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        \n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292784,
      "stdout": "",
      "stderr": "/tmp/tmpq5i7rikg.d(92): Error: found `unittest` instead of statement\n/tmp/tmpq5i7rikg.d(102): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5i7rikg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int m = 0;\n    int temp = 0;\n    while(i < n)\n    {\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if(numbers[i] == ' ')\n        {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmppy1zhfza.d(104): Error: found `unittest` when expecting `;` following statement\n/tmp/tmppy1zhfza.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppy1zhfza.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppy1zhfza.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy1zhfza.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < numbers.length())\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpbr331hh9.d(104): Error: found `unittest` instead of statement\n/tmp/tmpbr331hh9.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbr331hh9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i;\n    for (i = 0; i < numbers.length(); i++)\n    {\n        if (numbers[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            result += numbers[i];\n        }\n    }\n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i] = '0';\n        }\n    }\n    for (i = 0; i < result.length(); i++)\n    {\n        if (result[i] == ' ')\n        {\n            result[i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp8vf0ssv0.d(86): Error: found `unittest` when expecting `,`\n/tmp/tmp8vf0ssv0.d(96): Error: found `void` when expecting `,`\n/tmp/tmp8vf0ssv0.d(96): Error: found `{` when expecting `,`\n/tmp/tmp8vf0ssv0.d(96): Error: expression expected, not `}`\n/tmp/tmp8vf0ssv0.d(96): Error: found `End of File` when expecting `,`\n/tmp/tmp8vf0ssv0.d(96): Error: found `End of File` when expecting `]`\n/tmp/tmp8vf0ssv0.d(96): Error: found `End of File` when expecting `;` following statement\n/tmp/tmp8vf0ssv0.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8vf0ssv0.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8vf0ssv0.d(96): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8vf0ssv0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    for(int i=0; i<numbers.length(); i++)\n    {\n        if(numbers[i]==' ')\n        {\n            continue;\n        }\n        int num = numbers[i] - '0';\n        int j = i;\n        while(j>0 && numbers[j-1]==' ')\n        {\n            j--;\n        }\n        if(j==0)\n        {\n            result += numbers[i];\n            continue;\n        }\n        int k = j-1;\n        while(k>=0 && numbers[k]==' ')\n        {\n            k--;\n        }\n        if(k==-1)\n        {\n            result += numbers[i];\n            continue;\n        }\n        int a = numbers[k] - '0';\n        int b = numbers[j] - '0';\n        if(a>b)\n        {\n            result += numbers[i];\n            continue;\n        }\n        else if(a<b)\n        {\n            result += numbers[j];\n            continue;\n        }\n        else\n        {\n            result += numbers[k];\n            continue;\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpmlb03d56.d(13): Error: no property `length` for type `string`\n/tmp/tmpmlb03d56.d(27): Error: slice `result` is not mutable\n/tmp/tmpmlb03d56.d(37): Error: slice `result` is not mutable\n/tmp/tmpmlb03d56.d(44): Error: slice `result` is not mutable\n/tmp/tmpmlb03d56.d(49): Error: slice `result` is not mutable\n/tmp/tmpmlb03d56.d(54): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlb03d56.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    int m = 0;\n    int temp = 0;\n    while (i < n)\n    {\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '0')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '1')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '2')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '3')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '4')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '5')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '6')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '7')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '8')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == '9')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i++;\n            continue;\n        }\n        if (numbers[i] == ' ')\n        {\n            i\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpcbv8qxtn.d(104): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpcbv8qxtn.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcbv8qxtn.d(114): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpcbv8qxtn.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbv8qxtn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = 0; j < numbers.length(); j++) {\n            if (numbers[i] == numbers[j]) {\n                k = numbers.find(numbers[i]);\n                result += numbers[k];\n                numbers.erase(k, 1);\n                break;\n            }\n        }\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmp1lqzzuy3.d(14): Error: no property `length` for type `string`\n/tmp/tmp1lqzzuy3.d(15): Error: no property `length` for type `string`\n/tmp/tmp1lqzzuy3.d(17): Error: no property `find` for type `string`\n/tmp/tmp1lqzzuy3.d(18): Error: slice `result` is not mutable\n/tmp/tmp1lqzzuy3.d(19): Error: no property `erase` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lqzzuy3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    int i, j, k;\n    for (i = 0; i < numbers.length(); i++) {\n        for (j = 0; j < numbers.length(); j++) {\n            if (numbers[i] < numbers[j]) {\n                for (k = 0; k < numbers.length(); k++) {\n                    if (numbers[k] == numbers[i]) {\n                        numbers[k] = numbers[j];\n                        numbers[j] = numbers[i];\n                        numbers[i] = numbers[k];\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    for (i = 0; i < numbers.length(); i++) {\n        result += numbers[i];\n    }\n    return result;\n}\n\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpwv5csf6_.d(14): Error: no property `length` for type `string`\n/tmp/tmpwv5csf6_.d(15): Error: no property `length` for type `string`\n/tmp/tmpwv5csf6_.d(17): Error: no property `length` for type `string`\n/tmp/tmpwv5csf6_.d(19): Error: cannot modify `immutable` expression `numbers[cast(ulong)k]`\n/tmp/tmpwv5csf6_.d(20): Error: cannot modify `immutable` expression `numbers[cast(ulong)j]`\n/tmp/tmpwv5csf6_.d(21): Error: cannot modify `immutable` expression `numbers[cast(ulong)i]`\n/tmp/tmpwv5csf6_.d(28): Error: no property `length` for type `string`\n/tmp/tmpwv5csf6_.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwv5csf6_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \n*/\nstring sort_numbers(string numbers) \n{\n    string result;\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i] == ' ')\n        {\n            continue;\n        }\n        else\n        {\n            result += numbers[i];\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result.erase(i, 1);\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result.erase(i, 1);\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result.erase(i, 1);\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result.erase(i, 1);\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result.erase(i, 1);\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result.erase(i, 1);\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result.erase(i, 1);\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result.erase(i, 1);\n        }\n    }\n    \n    for(int i = 0;\nunittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}",
      "timestamp": 1664292785,
      "stdout": "",
      "stderr": "/tmp/tmpypbmz561.d(90): Error: expression expected, not `unittest`\n/tmp/tmpypbmz561.d(91): Error: found `{` when expecting `;` following `for` condition\n/tmp/tmpypbmz561.d(92): Error: expression expected, not `alias`\n/tmp/tmpypbmz561.d(92): Error: found `candidate` when expecting `)`\n/tmp/tmpypbmz561.d(92): Error: found `=` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpypbmz561.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}