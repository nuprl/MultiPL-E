{
  "name": "HumanEval_25_factorize",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n",
  "tests": "unittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkic8af7w.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpkic8af7w.__unittest_L28_C1() [0x427f2e]\n??:? void tmpkic8af7w.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3rx28j4k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp3rx28j4k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp3rx28j4k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong p = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % p == 0) \n\t\t{\n\t\t\tfactors[factors.length - 1]++;\n\t\t\tn /= p;\n\t\t}\n\t\tp++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjpld8l3q.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpjpld8l3q.__unittest_L30_C1() [0x427f2e]\n??:? void tmpjpld8l3q.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpm2bsrigh.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmpm2bsrigh.factorize(long) [0x427ecd]\n??:? void tmpm2bsrigh.__unittest_L31_C1() [0x427f0f]\n??:? void tmpm2bsrigh.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp81_q9vcx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp81_q9vcx.__unittest_L30_C1() [0x427f2e]\n??:? void tmp81_q9vcx.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3rx28j4k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp3rx28j4k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp3rx28j4k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5xf669qc.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmp5xf669qc.factorize(long) [0x427ecd]\n??:? void tmp5xf669qc.__unittest_L31_C1() [0x427f0f]\n??:? void tmp5xf669qc.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i-1]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppiibmwr1.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmppiibmwr1.__unittest_L28_C1() [0x427f2e]\n??:? void tmppiibmwr1.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkic8af7w.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpkic8af7w.__unittest_L28_C1() [0x427f2e]\n??:? void tmpkic8af7w.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while (i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr60xjxq6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpr60xjxq6.__unittest_L30_C1() [0x427f2e]\n??:? void tmpr60xjxq6.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++) {\n        factors[i] = primes[i];\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "/tmp/tmp3g6wqxop.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g6wqxop.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsz4sd9p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpmsz4sd9p.__unittest_L28_C1() [0x427f2e]\n??:? void tmpmsz4sd9p.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3rx28j4k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp3rx28j4k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp3rx28j4k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++) {\n        long prime = primes[i];\n        int count = 0;\n        while (n % prime == 0) {\n            n /= prime;\n            count++;\n        }\n        factors[i] = count;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "/tmp/tmp5w9h37ga.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5w9h37ga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) factors[n-1]++;\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqitrz4t4.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpqitrz4t4.__unittest_L29_C1() [0x427f76]\n??:? void tmpqitrz4t4.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx4641r7k.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpx4641r7k.__unittest_L28_C1() [0x427f2e]\n??:? void tmpx4641r7k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjzmwajb3.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpjzmwajb3.factorize(long) [0x427e7b]\n??:? void tmpjzmwajb3.__unittest_L28_C1() [0x427ec7]\n??:? void tmpjzmwajb3.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i - 2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaj4fn7ot.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpaj4fn7ot.__unittest_L28_C1() [0x427f2e]\n??:? void tmpaj4fn7ot.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong p = 2;\n\twhile (n > 1)\n\t{\n\t\twhile (n % p == 0)\n\t\t{\n\t\t\tfactors[factors.length - 1]++;\n\t\t\tn /= p;\n\t\t}\n\t\tp++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe371zfjr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpe371zfjr.__unittest_L30_C1() [0x427f2e]\n??:? void tmpe371zfjr.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3rx28j4k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp3rx28j4k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp3rx28j4k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i - 1]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n - 1]++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpre_lwinl.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpre_lwinl.__unittest_L31_C1() [0x427f76]\n??:? void tmpre_lwinl.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp45jykv8v.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp45jykv8v.factorize(long) [0x427e7e]\n??:? void tmp45jykv8v.__unittest_L28_C1() [0x427ecb]\n??:? void tmp45jykv8v.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3rx28j4k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp3rx28j4k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp3rx28j4k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[n/i] + 1;\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpeeeikc76.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286d6]\n??:? long[] tmpeeeikc76.factorize(long) [0x427f10]\n??:? void tmpeeeikc76.__unittest_L32_C1() [0x427f53]\n??:? void tmpeeeikc76.__modtest() [0x4283a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c703]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b596]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430821]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b56d]\n??:? runModuleUnitTests [0x42c4d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsz4sd9p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpmsz4sd9p.__unittest_L28_C1() [0x427f2e]\n??:? void tmpmsz4sd9p.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp882bq90j.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp882bq90j.factorize(long) [0x427e7b]\n??:? void tmp882bq90j.__unittest_L30_C1() [0x427ec7]\n??:? void tmp882bq90j.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplzw6tld7.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42868e]\n??:? long[] tmplzw6tld7.factorize(long) [0x427e82]\n??:? void tmplzw6tld7.__unittest_L31_C1() [0x427f0b]\n??:? void tmplzw6tld7.__modtest() [0x428360]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b54e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430765]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b525]\n??:? runModuleUnitTests [0x42c491]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbxnwoo94.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpbxnwoo94.__unittest_L30_C1() [0x427f2e]\n??:? void tmpbxnwoo94.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1)\n    {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp38ka_bzx.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmp38ka_bzx.factorize(long) [0x427ecd]\n??:? void tmp38ka_bzx.__unittest_L34_C1() [0x427f0f]\n??:? void tmp38ka_bzx.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3rx28j4k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp3rx28j4k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp3rx28j4k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i - 1]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n - 1]++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpre_lwinl.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpre_lwinl.__unittest_L31_C1() [0x427f76]\n??:? void tmpre_lwinl.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong factor = 2;\n\twhile (n > 1) {\n\t\twhile (n % factor == 0) {\n\t\t\tfactors[factors.length - 1]++;\n\t\t\tn /= factor;\n\t\t}\n\t\tfactor++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzgnsx9l0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpzgnsx9l0.__unittest_L28_C1() [0x427f2e]\n??:? void tmpzgnsx9l0.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) \n    {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdq4t4nbz.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmpdq4t4nbz.factorize(long) [0x427ecd]\n??:? void tmpdq4t4nbz.__unittest_L34_C1() [0x427f0f]\n??:? void tmpdq4t4nbz.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkic8af7w.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpkic8af7w.__unittest_L28_C1() [0x427f2e]\n??:? void tmpkic8af7w.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[n/i] + 1;\n            n = n/i;\n        }\n        else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_14_q2v9.d(29): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286c6]\n??:? long[] tmp_14_q2v9.factorize(long) [0x427f03]\n??:? void tmp_14_q2v9.__unittest_L33_C1() [0x427f43]\n??:? void tmp_14_q2v9.__modtest() [0x428398]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430811]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43079d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b55d]\n??:? runModuleUnitTests [0x42c4c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplzw6tld7.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42868e]\n??:? long[] tmplzw6tld7.factorize(long) [0x427e82]\n??:? void tmplzw6tld7.__unittest_L31_C1() [0x427f0b]\n??:? void tmplzw6tld7.__modtest() [0x428360]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b54e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430765]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b525]\n??:? runModuleUnitTests [0x42c491]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx4641r7k.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpx4641r7k.__unittest_L28_C1() [0x427f2e]\n??:? void tmpx4641r7k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp81_q9vcx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp81_q9vcx.__unittest_L30_C1() [0x427f2e]\n??:? void tmp81_q9vcx.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpm2bsrigh.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmpm2bsrigh.factorize(long) [0x427ecd]\n??:? void tmpm2bsrigh.__unittest_L31_C1() [0x427f0f]\n??:? void tmpm2bsrigh.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplzw6tld7.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42868e]\n??:? long[] tmplzw6tld7.factorize(long) [0x427e82]\n??:? void tmplzw6tld7.__unittest_L31_C1() [0x427f0b]\n??:? void tmplzw6tld7.__modtest() [0x428360]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b54e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430765]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b525]\n??:? runModuleUnitTests [0x42c491]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1)\n    {\n        while (n % factor == 0)\n        {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpseuneu4h.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpseuneu4h.__unittest_L30_C1() [0x427f2e]\n??:? void tmpseuneu4h.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1) \n    {\n        while (n % factor == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzal5u15z.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpzal5u15z.__unittest_L30_C1() [0x427f2e]\n??:? void tmpzal5u15z.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i-2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4km7y79k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp4km7y79k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp4km7y79k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr89v1h5u.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpr89v1h5u.__unittest_L28_C1() [0x427f2e]\n??:? void tmpr89v1h5u.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primes();\n    long prime = 1;\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            factors[i]++;\n            n /= primes[i];\n        }\n        if (n == 1) break;\n    }\n    if (n > 1) factors[primes.length] = n;\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "/tmp/tmpe65880m3.d(18): Error: undefined identifier `primes`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe65880m3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3rx28j4k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp3rx28j4k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp3rx28j4k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsz4sd9p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpmsz4sd9p.__unittest_L28_C1() [0x427f2e]\n??:? void tmpmsz4sd9p.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptvfwjl92.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmptvfwjl92.__unittest_L30_C1() [0x427f2e]\n??:? void tmptvfwjl92.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primeFactors = primeFactorization(n);\n    for (int i = 0; i < primeFactors.length; i++)\n    {\n        factors[i] = primeFactors[i];\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "/tmp/tmpz8kyl209.d(18): Error: undefined identifier `primeFactorization`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8kyl209.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsz4sd9p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpmsz4sd9p.__unittest_L28_C1() [0x427f2e]\n??:? void tmpmsz4sd9p.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp45jykv8v.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp45jykv8v.factorize(long) [0x427e7e]\n??:? void tmp45jykv8v.__unittest_L28_C1() [0x427ecb]\n??:? void tmp45jykv8v.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while(i*i <= n)\n    {\n        while(n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if(n > 1)\n        factors[n] = 1;\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpklprw6oi.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4285e5]\n??:? void tmpklprw6oi.__unittest_L32_C1() [0x427f72]\n??:? void tmpklprw6oi.__modtest() [0x428368]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428aa8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp81_q9vcx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp81_q9vcx.__unittest_L30_C1() [0x427f2e]\n??:? void tmp81_q9vcx.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile(n > 1)\n\t{\n\t\twhile(n % i == 0)\n\t\t{\n\t\t\tfactors[i-2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe9pdl8w2.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpe9pdl8w2.__unittest_L30_C1() [0x427f2e]\n??:? void tmpe9pdl8w2.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkic8af7w.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpkic8af7w.__unittest_L28_C1() [0x427f2e]\n??:? void tmpkic8af7w.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcgrxtamz.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpcgrxtamz.factorize(long) [0x427e7e]\n??:? void tmpcgrxtamz.__unittest_L30_C1() [0x427ecb]\n??:? void tmpcgrxtamz.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            factors[i]++;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp1uwutahx.d(29): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp1uwutahx.factorize(long) [0x427edc]\n??:? void tmp1uwutahx.__unittest_L33_C1() [0x427f1f]\n??:? void tmp1uwutahx.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1) \n    {\n        while (n % factor == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzal5u15z.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpzal5u15z.__unittest_L30_C1() [0x427f2e]\n??:? void tmpzal5u15z.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong factor = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % factor == 0) \n\t\t{\n\t\t\tfactors[factors.length - 1]++;\n\t\t\tn /= factor;\n\t\t}\n\t\tfactor++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbv50xqh.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmprbv50xqh.__unittest_L30_C1() [0x427f2e]\n??:? void tmprbv50xqh.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tfactors[i] = factors[n / i] + 1;\n\t\t\tn = n / i;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\tif (n > 1) \n\t{\n\t\tfactors[n] = 1;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpik5ak7a7.d(33): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286c6]\n??:? long[] tmpik5ak7a7.factorize(long) [0x427f03]\n??:? void tmpik5ak7a7.__unittest_L37_C1() [0x427f43]\n??:? void tmpik5ak7a7.__modtest() [0x428398]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430811]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43079d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b55d]\n??:? runModuleUnitTests [0x42c4c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp81_q9vcx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp81_q9vcx.__unittest_L30_C1() [0x427f2e]\n??:? void tmp81_q9vcx.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            n /= p;\n            factors[factors.length - 1]++;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_gtydjys.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp_gtydjys.__unittest_L28_C1() [0x427f36]\n??:? void tmp_gtydjys.__modtest() [0x42832c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c68b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430735]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f5]\n??:? runModuleUnitTests [0x42c461]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp81_q9vcx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp81_q9vcx.__unittest_L30_C1() [0x427f2e]\n??:? void tmp81_q9vcx.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkic8af7w.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpkic8af7w.__unittest_L28_C1() [0x427f2e]\n??:? void tmpkic8af7w.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1)\n        factors[n] = 1;\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp4iqojlhf.d(29): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmp4iqojlhf.factorize(long) [0x427ecd]\n??:? void tmp4iqojlhf.__unittest_L32_C1() [0x427f0f]\n??:? void tmp4iqojlhf.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr89v1h5u.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpr89v1h5u.__unittest_L28_C1() [0x427f2e]\n??:? void tmpr89v1h5u.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primeFactors = primeFactorization(n);\n    for(int i = 0; i < primeFactors.length; i++)\n    {\n        factors[i] = primeFactors[i];\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "/tmp/tmpyzg_pdr6.d(18): Error: undefined identifier `primeFactorization`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzg_pdr6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5xf669qc.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmp5xf669qc.factorize(long) [0x427ecd]\n??:? void tmp5xf669qc.__unittest_L31_C1() [0x427f0f]\n??:? void tmp5xf669qc.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp882bq90j.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp882bq90j.factorize(long) [0x427e7b]\n??:? void tmp882bq90j.__unittest_L30_C1() [0x427ec7]\n??:? void tmp882bq90j.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp45jykv8v.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp45jykv8v.factorize(long) [0x427e7e]\n??:? void tmp45jykv8v.__unittest_L28_C1() [0x427ecb]\n??:? void tmp45jykv8v.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptvfwjl92.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmptvfwjl92.__unittest_L30_C1() [0x427f2e]\n??:? void tmptvfwjl92.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n+1];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[n/p]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ygnq3ow.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285b5]\n??:? void tmp3ygnq3ow.__unittest_L28_C1() [0x427f42]\n??:? void tmp3ygnq3ow.__modtest() [0x428338]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c693]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b526]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4fd]\n??:? runModuleUnitTests [0x42c469]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a78]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % i == 0) \n\t\t{\n\t\t\tfactors[i - 2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpglhgcg5e.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpglhgcg5e.__unittest_L30_C1() [0x427f2e]\n??:? void tmpglhgcg5e.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    for(int i = 0; i < primes.length; i++)\n    {\n        while(n % primes[i] == 0)\n        {\n            factors[i]++;\n            n /= primes[i];\n        }\n    }\n    if(n > 1)\n        factors[primes.length] = n;\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "/tmp/tmpr8vr_wxz.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8vr_wxz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsz4sd9p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpmsz4sd9p.__unittest_L28_C1() [0x427f2e]\n??:? void tmpmsz4sd9p.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkic8af7w.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpkic8af7w.__unittest_L28_C1() [0x427f2e]\n??:? void tmpkic8af7w.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5xf669qc.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmp5xf669qc.factorize(long) [0x427ecd]\n??:? void tmp5xf669qc.__unittest_L31_C1() [0x427f0f]\n??:? void tmp5xf669qc.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[i] + 1;\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = factors[n] + 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpio2kr7l0.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286f6]\n??:? long[] tmpio2kr7l0.factorize(long) [0x427f12]\n??:? void tmpio2kr7l0.__unittest_L32_C1() [0x427f73]\n??:? void tmpio2kr7l0.__modtest() [0x4283c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430841]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b58d]\n??:? runModuleUnitTests [0x42c4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp42hfhjtc.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp42hfhjtc.__unittest_L30_C1() [0x427f2e]\n??:? void tmp42hfhjtc.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long factor = 2;\n    while (n > 1) {\n        while (n % factor == 0) {\n            factors[factors.length - 1]++;\n            n /= factor;\n        }\n        factor++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr89v1h5u.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpr89v1h5u.__unittest_L28_C1() [0x427f2e]\n??:? void tmpr89v1h5u.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsz4sd9p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpmsz4sd9p.__unittest_L28_C1() [0x427f2e]\n??:? void tmpmsz4sd9p.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbz9x3746.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpbz9x3746.__unittest_L28_C1() [0x427f2e]\n??:? void tmpbz9x3746.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp45jykv8v.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp45jykv8v.factorize(long) [0x427e7e]\n??:? void tmp45jykv8v.__unittest_L28_C1() [0x427ecb]\n??:? void tmp45jykv8v.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[n/i] + 1;\n            n = n/i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzoneyvmc.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286c6]\n??:? long[] tmpzoneyvmc.factorize(long) [0x427f03]\n??:? void tmpzoneyvmc.__unittest_L32_C1() [0x427f43]\n??:? void tmpzoneyvmc.__modtest() [0x428398]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430811]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43079d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b55d]\n??:? runModuleUnitTests [0x42c4c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3rx28j4k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp3rx28j4k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp3rx28j4k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp882bq90j.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp882bq90j.factorize(long) [0x427e7b]\n??:? void tmp882bq90j.__unittest_L30_C1() [0x427ec7]\n??:? void tmp882bq90j.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[n / i] + 1;\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxvu1q7f5.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286c6]\n??:? long[] tmpxvu1q7f5.factorize(long) [0x427f03]\n??:? void tmpxvu1q7f5.__unittest_L32_C1() [0x427f43]\n??:? void tmpxvu1q7f5.__modtest() [0x428398]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430811]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43079d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b55d]\n??:? runModuleUnitTests [0x42c4c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbh2bvri5.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpbh2bvri5.factorize(long) [0x427e7b]\n??:? void tmpbh2bvri5.__unittest_L30_C1() [0x427ec7]\n??:? void tmpbh2bvri5.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpm2bsrigh.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmpm2bsrigh.factorize(long) [0x427ecd]\n??:? void tmpm2bsrigh.__unittest_L31_C1() [0x427f0f]\n??:? void tmpm2bsrigh.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % i == 0) \n\t\t{\n\t\t\tfactors[i - 2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpglhgcg5e.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpglhgcg5e.__unittest_L30_C1() [0x427f2e]\n??:? void tmpglhgcg5e.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primes(n);\n    for (int i = 0; i < primes.length; i++) {\n        long prime = primes[i];\n        long count = 0;\n        while (n % prime == 0) {\n            n /= prime;\n            count++;\n        }\n        factors[i] = count;\n    }\n    if (n > 1) {\n        factors[primes.length] = n;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmp38zj_2is.d(18): Error: undefined identifier `primes`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38zj_2is.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp45jykv8v.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp45jykv8v.factorize(long) [0x427e7e]\n??:? void tmp45jykv8v.__unittest_L28_C1() [0x427ecb]\n??:? void tmp45jykv8v.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while(n > 1)\n    {\n        while(n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgfl_rpt1.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42859d]\n??:? void tmpgfl_rpt1.__unittest_L30_C1() [0x427f2a]\n??:? void tmpgfl_rpt1.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a60]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++)\n    {\n        long prime = primes[i];\n        int count = 0;\n        while (n % prime == 0)\n        {\n            count++;\n            n /= prime;\n        }\n        factors[i] = count;\n    }\n    if (n > 1)\n    {\n        factors[primes.length] = n;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmppy_xj84y.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy_xj84y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsp8k8v78.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpsp8k8v78.factorize(long) [0x427e7b]\n??:? void tmpsp8k8v78.__unittest_L30_C1() [0x427ec7]\n??:? void tmpsp8k8v78.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbz9x3746.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpbz9x3746.__unittest_L28_C1() [0x427f2e]\n??:? void tmpbz9x3746.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    for (int i = 0; i < primes.length; i++) \n    {\n        while (n % primes[i] == 0) \n        {\n            factors[i]++;\n            n /= primes[i];\n        }\n    }\n    if (n > 1) \n    {\n        factors[primes.length] = n;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmpy607ien_.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy607ien_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n - 2]++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpclchn388.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4285e5]\n??:? void tmpclchn388.__unittest_L31_C1() [0x427f72]\n??:? void tmpclchn388.__modtest() [0x428368]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428aa8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong factor = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % factor == 0) \n\t\t{\n\t\t\tfactors[factors.length - 1]++;\n\t\t\tn /= factor;\n\t\t}\n\t\tfactor++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbv50xqh.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmprbv50xqh.__unittest_L30_C1() [0x427f2e]\n??:? void tmprbv50xqh.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3rx28j4k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp3rx28j4k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp3rx28j4k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6_yhipkx.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4285e5]\n??:? void tmp6_yhipkx.__unittest_L31_C1() [0x427f6e]\n??:? void tmp6_yhipkx.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428aa8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1)\n    {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpeaswi8c6.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmpeaswi8c6.factorize(long) [0x427ecd]\n??:? void tmpeaswi8c6.__unittest_L34_C1() [0x427f0f]\n??:? void tmpeaswi8c6.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpedlswxx4.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpedlswxx4.__unittest_L30_C1() [0x427f2e]\n??:? void tmpedlswxx4.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    long prime = 1;\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            factors[i]++;\n            n /= primes[i];\n        }\n        if (n == 1) {\n            break;\n        }\n        prime *= primes[i];\n    }\n    if (n > 1) {\n        factors[primes.length] = n;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmpokkv8td3.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokkv8td3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5xf669qc.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmp5xf669qc.factorize(long) [0x427ecd]\n??:? void tmp5xf669qc.__unittest_L31_C1() [0x427f0f]\n??:? void tmp5xf669qc.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            factors[i] = factors[i] + 1;\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        factors[n] = factors[n] + 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp09rjy5pt.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286f6]\n??:? long[] tmp09rjy5pt.factorize(long) [0x427f12]\n??:? void tmp09rjy5pt.__unittest_L32_C1() [0x427f73]\n??:? void tmp09rjy5pt.__modtest() [0x4283c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430841]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b58d]\n??:? runModuleUnitTests [0x42c4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsp8k8v78.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpsp8k8v78.factorize(long) [0x427e7b]\n??:? void tmpsp8k8v78.__unittest_L30_C1() [0x427ec7]\n??:? void tmpsp8k8v78.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsz4sd9p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpmsz4sd9p.__unittest_L28_C1() [0x427f2e]\n??:? void tmpmsz4sd9p.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5xf669qc.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmp5xf669qc.factorize(long) [0x427ecd]\n??:? void tmp5xf669qc.__unittest_L31_C1() [0x427f0f]\n??:? void tmp5xf669qc.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5xf669qc.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmp5xf669qc.factorize(long) [0x427ecd]\n??:? void tmp5xf669qc.__unittest_L31_C1() [0x427f0f]\n??:? void tmp5xf669qc.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp55jwi3hm.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp55jwi3hm.__unittest_L28_C1() [0x427f32]\n??:? void tmp55jwi3hm.__modtest() [0x428328]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) \n\t{\n\t\twhile (n % i == 0) \n\t\t{\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpcrx11m8o.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpcrx11m8o.factorize(long) [0x427e7b]\n??:? void tmpcrx11m8o.__unittest_L30_C1() [0x427ec7]\n??:? void tmpcrx11m8o.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsz4sd9p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpmsz4sd9p.__unittest_L28_C1() [0x427f2e]\n??:? void tmpmsz4sd9p.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplzw6tld7.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42868e]\n??:? long[] tmplzw6tld7.factorize(long) [0x427e82]\n??:? void tmplzw6tld7.__unittest_L31_C1() [0x427f0b]\n??:? void tmplzw6tld7.__modtest() [0x428360]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b54e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430765]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b525]\n??:? runModuleUnitTests [0x42c491]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    long p = 1;\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            n /= primes[i];\n            factors[i]++;\n        }\n        if (n == 1) break;\n        p *= primes[i];\n    }\n    if (n > 1) {\n        factors[primes.length] = n;\n    }\n    for (int i = 0; i < factors.length; i++) {\n        factors[i] *= p;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmp69sjzzli.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69sjzzli.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp45jykv8v.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp45jykv8v.factorize(long) [0x427e7e]\n??:? void tmp45jykv8v.__unittest_L28_C1() [0x427ecb]\n??:? void tmp45jykv8v.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpm2bsrigh.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmpm2bsrigh.factorize(long) [0x427ecd]\n??:? void tmpm2bsrigh.__unittest_L31_C1() [0x427f0f]\n??:? void tmpm2bsrigh.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    long p = 1;\n    for (int i = 0; i < primes.length; i++)\n    {\n        while (n % primes[i] == 0)\n        {\n            factors[i]++;\n            n /= primes[i];\n        }\n        if (n == 1)\n            break;\n        p *= primes[i];\n    }\n    if (n > 1)\n        factors[primes.length] = n;\n    for (int i = 0; i < factors.length; i++)\n        factors[i] *= p;\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmpz156oy0i.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz156oy0i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp882bq90j.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp882bq90j.factorize(long) [0x427e7b]\n??:? void tmp882bq90j.__unittest_L30_C1() [0x427ec7]\n??:? void tmp882bq90j.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptvfwjl92.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmptvfwjl92.__unittest_L30_C1() [0x427f2e]\n??:? void tmptvfwjl92.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primeFactors = primeFactorization(n);\n    for (int i = 0; i < primeFactors.length; i++)\n    {\n        factors[i] = primeFactors[i];\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "/tmp/tmpz8kyl209.d(18): Error: undefined identifier `primeFactorization`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8kyl209.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3rx28j4k.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp3rx28j4k.__unittest_L30_C1() [0x427f2e]\n??:? void tmp3rx28j4k.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong factor = 2;\n\twhile(n > 1)\n\t{\n\t\twhile(n % factor == 0)\n\t\t{\n\t\t\tfactors[factors.length-1]++;\n\t\t\tn /= factor;\n\t\t}\n\t\tfactor++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpybnfx7ms.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpybnfx7ms.__unittest_L30_C1() [0x427f2e]\n??:? void tmpybnfx7ms.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    long p = 1;\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            factors[i]++;\n            n /= primes[i];\n        }\n        if (n == 1) break;\n    }\n    if (n > 1) factors[primes.length] = n;\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmpgiw2jvbu.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgiw2jvbu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsp8k8v78.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpsp8k8v78.factorize(long) [0x427e7b]\n??:? void tmpsp8k8v78.__unittest_L30_C1() [0x427ec7]\n??:? void tmpsp8k8v78.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiugs95_a.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpiugs95_a.__unittest_L28_C1() [0x427f32]\n??:? void tmpiugs95_a.__modtest() [0x428328]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsz4sd9p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpmsz4sd9p.__unittest_L28_C1() [0x427f2e]\n??:? void tmpmsz4sd9p.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0) {\n\t\t\tfactors[i] = factors[n / i] + 1;\n\t\t\tn /= i;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfactors[n] = 1;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu0vae5rd.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286d6]\n??:? long[] tmpu0vae5rd.factorize(long) [0x427f10]\n??:? void tmpu0vae5rd.__unittest_L32_C1() [0x427f53]\n??:? void tmpu0vae5rd.__modtest() [0x4283a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c703]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b596]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430821]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b56d]\n??:? runModuleUnitTests [0x42c4d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    long p = 1;\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            factors[i]++;\n            n /= primes[i];\n        }\n        if (n == 1) break;\n        p *= primes[i];\n    }\n    if (n > 1) factors[primes.length] = n;\n    for (int i = 0; i < factors.length; i++) {\n        factors[i] *= p;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmpzfawfv1b.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzfawfv1b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n+1];\n    long i, j, k, l, m, p, q;\n    \n    factors[1] = 1;\n    \n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            factors[i] = 1;\n            for (j = i; j <= n; j += i) {\n                factors[j] = i;\n            }\n        }\n    }\n    \n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphdmdqki9.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42861d]\n??:? void tmphdmdqki9.__unittest_L33_C1() [0x427faa]\n??:? void tmphdmdqki9.__modtest() [0x4283a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430819]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b565]\n??:? runModuleUnitTests [0x42c4d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ae0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) \n    {\n        while (n % p == 0) \n        {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp81_q9vcx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp81_q9vcx.__unittest_L30_C1() [0x427f2e]\n??:? void tmp81_q9vcx.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i <= n)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp24sjerxt.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp24sjerxt.factorize(long) [0x427e7e]\n??:? void tmp24sjerxt.__unittest_L30_C1() [0x427ecb]\n??:? void tmp24sjerxt.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbxnwoo94.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpbxnwoo94.__unittest_L30_C1() [0x427f2e]\n??:? void tmpbxnwoo94.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp882bq90j.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp882bq90j.factorize(long) [0x427e7b]\n??:? void tmp882bq90j.__unittest_L30_C1() [0x427ec7]\n??:? void tmp882bq90j.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptvfwjl92.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmptvfwjl92.__unittest_L30_C1() [0x427f2e]\n??:? void tmptvfwjl92.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    for (int i = 0; i < primes.length; i++) {\n        while (n % primes[i] == 0) {\n            factors[i]++;\n            n /= primes[i];\n        }\n    }\n    if (n > 1) {\n        factors[primes.length] = n;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmppiw__fps.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppiw__fps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n)\n    {\n        while (n % i == 0)\n        {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu02whsu9.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpu02whsu9.__unittest_L30_C1() [0x427f32]\n??:? void tmpu02whsu9.__modtest() [0x428328]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp882bq90j.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp882bq90j.factorize(long) [0x427e7b]\n??:? void tmp882bq90j.__unittest_L30_C1() [0x427ec7]\n??:? void tmp882bq90j.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkic8af7w.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpkic8af7w.__unittest_L28_C1() [0x427f2e]\n??:? void tmpkic8af7w.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp882bq90j.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp882bq90j.factorize(long) [0x427e7b]\n??:? void tmp882bq90j.__unittest_L30_C1() [0x427ec7]\n??:? void tmp882bq90j.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp55jwi3hm.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp55jwi3hm.__unittest_L28_C1() [0x427f32]\n??:? void tmp55jwi3hm.__modtest() [0x428328]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0) {\n\t\t\tfactors[i] = factors[n / i] + 1;\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfactors[n] = 1;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptrsb57eq.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286c6]\n??:? long[] tmptrsb57eq.factorize(long) [0x427f03]\n??:? void tmptrsb57eq.__unittest_L32_C1() [0x427f43]\n??:? void tmptrsb57eq.__modtest() [0x428398]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430811]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43079d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b55d]\n??:? runModuleUnitTests [0x42c4c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i - 2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaj4fn7ot.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpaj4fn7ot.__unittest_L28_C1() [0x427f2e]\n??:? void tmpaj4fn7ot.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i <= n) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\tif (n > 1) {\n\t\tfactors[n] = 1;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3fo93nc5.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42868e]\n??:? long[] tmp3fo93nc5.factorize(long) [0x427e82]\n??:? void tmp3fo93nc5.__unittest_L31_C1() [0x427f0b]\n??:? void tmp3fo93nc5.__modtest() [0x428360]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b54e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430765]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b525]\n??:? runModuleUnitTests [0x42c491]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp45jykv8v.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp45jykv8v.factorize(long) [0x427e7e]\n??:? void tmp45jykv8v.__unittest_L28_C1() [0x427ecb]\n??:? void tmp45jykv8v.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpsp8k8v78.d(23): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpsp8k8v78.factorize(long) [0x427e7b]\n??:? void tmpsp8k8v78.__unittest_L30_C1() [0x427ec7]\n??:? void tmpsp8k8v78.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i-1]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppiibmwr1.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmppiibmwr1.__unittest_L28_C1() [0x427f2e]\n??:? void tmppiibmwr1.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++) {\n        factors[i] = primes[i];\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "/tmp/tmp3g6wqxop.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g6wqxop.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i-1]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiugs95_a.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpiugs95_a.__unittest_L28_C1() [0x427f32]\n??:? void tmpiugs95_a.__modtest() [0x428328]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i-2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkic8af7w.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpkic8af7w.__unittest_L28_C1() [0x427f2e]\n??:? void tmpkic8af7w.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsz4sd9p.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpmsz4sd9p.__unittest_L28_C1() [0x427f2e]\n??:? void tmpmsz4sd9p.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            n /= p;\n            factors[factors.length - 1]++;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_gtydjys.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285ad]\n??:? void tmp_gtydjys.__unittest_L28_C1() [0x427f36]\n??:? void tmp_gtydjys.__modtest() [0x42832c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c68b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430735]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f5]\n??:? runModuleUnitTests [0x42c461]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n+1];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6_yhipkx.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4285e5]\n??:? void tmp6_yhipkx.__unittest_L31_C1() [0x427f6e]\n??:? void tmp6_yhipkx.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428aa8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp55jwi3hm.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp55jwi3hm.__unittest_L28_C1() [0x427f32]\n??:? void tmp55jwi3hm.__modtest() [0x428328]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp45jykv8v.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp45jykv8v.factorize(long) [0x427e7e]\n??:? void tmp45jykv8v.__unittest_L28_C1() [0x427ecb]\n??:? void tmp45jykv8v.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i * i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp5xf669qc.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmp5xf669qc.factorize(long) [0x427ecd]\n??:? void tmp5xf669qc.__unittest_L31_C1() [0x427f0f]\n??:? void tmp5xf669qc.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers();\n    long prime;\n    int i = 0;\n    while (n > 1) {\n        prime = primes[i];\n        while (n % prime == 0) {\n            factors[i]++;\n            n /= prime;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmpgqtok_r5.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgqtok_r5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long p = 2;\n    while (n > 1) {\n        while (n % p == 0) {\n            factors[factors.length - 1]++;\n            n /= p;\n        }\n        p++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi0f_moet.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpi0f_moet.__unittest_L28_C1() [0x427f2e]\n??:? void tmpi0f_moet.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i - 2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_g4bnmni.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp_g4bnmni.__unittest_L30_C1() [0x427f2e]\n??:? void tmp_g4bnmni.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp45jykv8v.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmp45jykv8v.factorize(long) [0x427e7e]\n??:? void tmp45jykv8v.__unittest_L28_C1() [0x427ecb]\n??:? void tmp45jykv8v.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++)\n    {\n        long prime = primes[i];\n        int count = 0;\n        while (n % prime == 0)\n        {\n            n /= prime;\n            count++;\n        }\n        factors[i] = count;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmpt8z8rw15.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt8z8rw15.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (n > 1) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprwvfiu62.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmprwvfiu62.factorize(long) [0x427e7b]\n??:? void tmprwvfiu62.__unittest_L28_C1() [0x427ec7]\n??:? void tmprwvfiu62.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i-1]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnst5blpo.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmpnst5blpo.__unittest_L30_C1() [0x427f2e]\n??:? void tmpnst5blpo.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i*i <= n) {\n        while (n % i == 0) {\n            factors[i]++;\n            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors[n] = 1;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpm2bsrigh.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmpm2bsrigh.factorize(long) [0x427ecd]\n??:? void tmpm2bsrigh.__unittest_L31_C1() [0x427f0f]\n??:? void tmpm2bsrigh.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long[] primes = primeNumbers(n);\n    for (int i = 0; i < primes.length; i++)\n    {\n        int count = 0;\n        while (n % primes[i] == 0)\n        {\n            count++;\n            n /= primes[i];\n        }\n        factors[i] = count;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "/tmp/tmpwn4kotxr.d(18): Error: undefined identifier `primeNumbers`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwn4kotxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (n > 1) {\n\t\twhile (n % i == 0) {\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292920,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjzmwajb3.d(21): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpjzmwajb3.factorize(long) [0x427e7b]\n??:? void tmpjzmwajb3.__unittest_L28_C1() [0x427ec7]\n??:? void tmpjzmwajb3.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430799]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430725]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]\n??:? runModuleUnitTests [0x42c451]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i*i <= n)\n\t{\n\t\twhile (n % i == 0)\n\t\t{\n\t\t\tfactors[i]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\tif (n > 1)\n\t{\n\t\tfactors[n] = 1;\n\t}\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpy2e7nkge.d(30): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmpy2e7nkge.factorize(long) [0x427ecd]\n??:? void tmpy2e7nkge.__unittest_L34_C1() [0x427f0f]\n??:? void tmpy2e7nkge.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n    long[] factors = new long[n];\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n            factors[i - 2]++;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292921,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp55jwi3hm.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285a5]\n??:? void tmp55jwi3hm.__unittest_L28_C1() [0x427f32]\n??:? void tmp55jwi3hm.__modtest() [0x428328]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c683]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b516]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]\n??:? runModuleUnitTests [0x42c459]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a68]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n{\n\tlong[] factors = new long[n];\n\tlong i = 2;\n\twhile (i*i <= n) \n\t{\n\t\twhile (n % i == 0) \n\t\t{\n\t\t\tfactors[i-2]++;\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\tif (n > 1) factors[i-2]++;\n\treturn factors;\n}\nunittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}",
      "timestamp": 1664292922,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg9cjljw3.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4285dd]\n??:? void tmpg9cjljw3.__unittest_L31_C1() [0x427f66]\n??:? void tmpg9cjljw3.__modtest() [0x42835c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b54e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430765]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b525]\n??:? runModuleUnitTests [0x42c491]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428aa0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}