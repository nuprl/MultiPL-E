{
  "name": "HumanEval_140_fix_spaces",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n",
  "tests": "unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        result = result.replace(result.length() - 2, result.length(), \"_\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpxhgn_8nd.d(22): Error: no property `length` for type `string`\n/tmp/tmpxhgn_8nd.d(24): Error: slice `result` is not mutable\n/tmp/tmpxhgn_8nd.d(26): Error: slice `result` is not mutable\n/tmp/tmpxhgn_8nd.d(30): Error: no property `length` for type `string`\n/tmp/tmpxhgn_8nd.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhgn_8nd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.replace(result.find(\" \"), 1, \"-\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpjj6z5y1a.d(22): Error: no property `length` for type `string`\n/tmp/tmpjj6z5y1a.d(26): Error: slice `result` is not mutable\n/tmp/tmpjj6z5y1a.d(30): Error: slice `result` is not mutable\n/tmp/tmpjj6z5y1a.d(34): Error: no property `length` for type `string`\n/tmp/tmpjj6z5y1a.d(36): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjj6z5y1a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n    int count11 = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14 = 0;\n    int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n    int count18 = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21 = 0;\n    int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n    int count25 = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28 = 0;\n    int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n    int count32 = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35 = 0;\n    int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n    int count39 = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42 = 0;\n    int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n    int count46 = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49 = 0;\n    int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n    int count53 = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56 = 0;\n    int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n    int count60 = 0;\n    int count61 = 0;\n    int\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpe1z8oun0.d(86): Error: no identifier for declarator `int`\n/tmp/tmpe1z8oun0.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1z8oun0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ' && text[i+1]==' ')\n        {\n            for(j=i+2;j<text.length();j++)\n            {\n                text[j]='-';\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpmv11fl81.d(22): Error: no property `length` for type `string`\n/tmp/tmpmv11fl81.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpmv11fl81.d(29): Error: no property `length` for type `string`\n/tmp/tmpmv11fl81.d(33): Error: no property `length` for type `string`\n/tmp/tmpmv11fl81.d(35): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmv11fl81.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length())\n    {\n        if (text[i] == ' ')\n        {\n            result += '_';\n            j = 0;\n        }\n        else\n        {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j > 2)\n        {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpp0p7xgns.d(24): Error: no property `length` for type `string`\n/tmp/tmpp0p7xgns.d(28): Error: slice `result` is not mutable\n/tmp/tmpp0p7xgns.d(33): Error: slice `result` is not mutable\n/tmp/tmpp0p7xgns.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0p7xgns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ' && text[i+1]==' ')\n        {\n            for(j=i+1;j<text.length();j++)\n            {\n                if(text[j]==' ')\n                {\n                    text[j]='-';\n                }\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpfz1dlwby.d(22): Error: no property `length` for type `string`\n/tmp/tmpfz1dlwby.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpfz1dlwby.d(29): Error: no property `length` for type `string`\n/tmp/tmpfz1dlwby.d(33): Error: no property `length` for type `string`\n/tmp/tmpfz1dlwby.d(37): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfz1dlwby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkti5ipxj.d(22): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(26): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(30): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(34): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(36): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpkti5ipxj.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpkti5ipxj.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkti5ipxj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < text.length()) \n    {\n        if (text[i] == ' ') \n        {\n            result += '_';\n            i++;\n            j = i;\n            k = i;\n            while (i < text.length() && text[i] == ' ') \n            {\n                i++;\n            }\n            while (i < text.length() && text[i] != ' ') \n            {\n                result += text[i];\n                i++;\n            }\n            if (i - j > 2) \n            {\n                result += '-';\n            }\n            k = i;\n        } \n        else \n        {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp9s57vv0g.d(25): Error: no property `length` for type `string`\n/tmp/tmp9s57vv0g.d(29): Error: slice `result` is not mutable\n/tmp/tmp9s57vv0g.d(33): Error: no property `length` for type `string`\n/tmp/tmp9s57vv0g.d(37): Error: no property `length` for type `string`\n/tmp/tmp9s57vv0g.d(39): Error: slice `result` is not mutable\n/tmp/tmp9s57vv0g.d(44): Error: slice `result` is not mutable\n/tmp/tmp9s57vv0g.d(50): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9s57vv0g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) \n    {\n        if (text[i] == ' ') \n        {\n            result += '_';\n        } \n        else \n        {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpooj83lph.d(23): Error: no property `length` for type `string`\n/tmp/tmpooj83lph.d(27): Error: slice `result` is not mutable\n/tmp/tmpooj83lph.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpooj83lph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        result = result.substr(0, result.length() - 2);\n        result += '-';\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkc3x9fzh.d(22): Error: no property `length` for type `string`\n/tmp/tmpkc3x9fzh.d(24): Error: slice `result` is not mutable\n/tmp/tmpkc3x9fzh.d(26): Error: slice `result` is not mutable\n/tmp/tmpkc3x9fzh.d(30): Error: no property `length` for type `string`\n/tmp/tmpkc3x9fzh.d(31): Error: no property `substr` for type `string`\n/tmp/tmpkc3x9fzh.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkc3x9fzh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n            result += '_';\n        else\n            result += text[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp6i96f5hd.d(22): Error: no property `length` for type `string`\n/tmp/tmp6i96f5hd.d(25): Error: slice `result` is not mutable\n/tmp/tmp6i96f5hd.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6i96f5hd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j,k;\n    int len = text.length();\n    for(i=0;i<len;i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<len;i++)\n    {\n        if(text[i]==' ')\n        {\n            for(j=i+1;j<len;j++)\n            {\n                if(text[j]==' ')\n                {\n                    text[j]='-';\n                    i=j;\n                    break;\n                }\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpnfcnkprz.d(22): Error: no property `length` for type `string`\n/tmp/tmpnfcnkprz.d(27): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpnfcnkprz.d(38): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnfcnkprz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoxj3slr2.d(22): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(24): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(26): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(30): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(31): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpoxj3slr2.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpoxj3slr2.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj3slr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            i++;\n        } else {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkhx6_qdh.d(24): Error: no property `length` for type `string`\n/tmp/tmpkhx6_qdh.d(26): Error: slice `result` is not mutable\n/tmp/tmpkhx6_qdh.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhx6_qdh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length())\n    {\n        if (text[i] == ' ')\n        {\n            result += '_';\n            i++;\n        }\n        else\n        {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp2c7ndkth.d(24): Error: no property `length` for type `string`\n/tmp/tmp2c7ndkth.d(28): Error: slice `result` is not mutable\n/tmp/tmp2c7ndkth.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2c7ndkth.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        result = result.replace(\" \", \"-\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpbf4syrjq.d(22): Error: no property `length` for type `string`\n/tmp/tmpbf4syrjq.d(24): Error: slice `result` is not mutable\n/tmp/tmpbf4syrjq.d(26): Error: slice `result` is not mutable\n/tmp/tmpbf4syrjq.d(30): Error: no property `length` for type `string`\n/tmp/tmpbf4syrjq.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbf4syrjq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j,k;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ' && i+1<text.length() && text[i+1]==' ')\n        {\n            for(j=i+1;j<text.length();j++)\n            {\n                if(text[j]==' ')\n                {\n                    text[j]='-';\n                }\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp8kinj19f.d(22): Error: no property `length` for type `string`\n/tmp/tmp8kinj19f.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmp8kinj19f.d(29): Error: no property `length` for type `string`\n/tmp/tmp8kinj19f.d(31): Error: no property `length` for type `string`\n/tmp/tmp8kinj19f.d(33): Error: no property `length` for type `string`\n/tmp/tmp8kinj19f.d(37): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8kinj19f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < text.length())\n    {\n        if(text[i] == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                text[j] = '-';\n                count = 0;\n            }\n            else\n            {\n                text[j] = '_';\n            }\n            i++;\n        }\n        else\n        {\n            text[j] = text[i];\n            i++;\n        }\n        j++;\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpayl9qwkm.d(24): Error: no property `length` for type `string`\n/tmp/tmpayl9qwkm.d(31): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpayl9qwkm.d(36): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpayl9qwkm.d(42): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpayl9qwkm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n            result += '_';\n        else\n            result += text[i];\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n                result[i] = '-';\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkp_6io_6.d(22): Error: no property `length` for type `string`\n/tmp/tmpkp_6io_6.d(25): Error: slice `result` is not mutable\n/tmp/tmpkp_6io_6.d(27): Error: slice `result` is not mutable\n/tmp/tmpkp_6io_6.d(30): Error: no property `length` for type `string`\n/tmp/tmpkp_6io_6.d(32): Error: no property `length` for type `string`\n/tmp/tmpkp_6io_6.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkp_6io_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4oy1rdxr.d(22): Error: no property `length` for type `string`\n/tmp/tmp4oy1rdxr.d(26): Error: slice `result` is not mutable\n/tmp/tmp4oy1rdxr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy1rdxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.replace(result.find(\"  \"), 2, \"__\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpqmsby2mx.d(22): Error: no property `length` for type `string`\n/tmp/tmpqmsby2mx.d(26): Error: slice `result` is not mutable\n/tmp/tmpqmsby2mx.d(30): Error: slice `result` is not mutable\n/tmp/tmpqmsby2mx.d(34): Error: no property `length` for type `string`\n/tmp/tmpqmsby2mx.d(36): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmsby2mx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 1; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpzdl6pogr.d(22): Error: no property `length` for type `string`\n/tmp/tmpzdl6pogr.d(26): Error: slice `result` is not mutable\n/tmp/tmpzdl6pogr.d(30): Error: slice `result` is not mutable\n/tmp/tmpzdl6pogr.d(34): Error: no property `length` for type `string`\n/tmp/tmpzdl6pogr.d(36): Error: no property `length` for type `string`\n/tmp/tmpzdl6pogr.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdl6pogr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp27s0elfd.d(22): Error: no property `length` for type `string`\n/tmp/tmp27s0elfd.d(24): Error: slice `result` is not mutable\n/tmp/tmp27s0elfd.d(26): Error: slice `result` is not mutable\n/tmp/tmp27s0elfd.d(30): Error: no property `length` for type `string`\n/tmp/tmp27s0elfd.d(31): Error: no property `length` for type `string`\n/tmp/tmp27s0elfd.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp27s0elfd.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27s0elfd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 1; i++)\n        {\n            if(result[i] == ' ' && result[i + 1] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmphjw7u2ql.d(22): Error: no property `length` for type `string`\n/tmp/tmphjw7u2ql.d(26): Error: slice `result` is not mutable\n/tmp/tmphjw7u2ql.d(30): Error: slice `result` is not mutable\n/tmp/tmphjw7u2ql.d(34): Error: no property `length` for type `string`\n/tmp/tmphjw7u2ql.d(36): Error: no property `length` for type `string`\n/tmp/tmphjw7u2ql.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjw7u2ql.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoxj3slr2.d(22): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(24): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(26): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(30): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(31): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpoxj3slr2.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpoxj3slr2.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj3slr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) \n    {\n        if (text[i] == ' ') \n        {\n            result += '_';\n        } \n        else \n        {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpooj83lph.d(23): Error: no property `length` for type `string`\n/tmp/tmpooj83lph.d(27): Error: slice `result` is not mutable\n/tmp/tmpooj83lph.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpooj83lph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j,k;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            for(j=i+1;j<text.length();j++)\n            {\n                if(text[j]==' ')\n                {\n                    text[j]='-';\n                    for(k=j+1;k<text.length();k++)\n                    {\n                        text[k]='_';\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp0hm26lbs.d(22): Error: no property `length` for type `string`\n/tmp/tmp0hm26lbs.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmp0hm26lbs.d(29): Error: no property `length` for type `string`\n/tmp/tmp0hm26lbs.d(33): Error: no property `length` for type `string`\n/tmp/tmp0hm26lbs.d(37): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp0hm26lbs.d(38): Error: no property `length` for type `string`\n/tmp/tmp0hm26lbs.d(40): Error: cannot modify `immutable` expression `text[cast(ulong)k]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hm26lbs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpth4ko0b2.d(22): Error: no property `length` for type `string`\n/tmp/tmpth4ko0b2.d(26): Error: slice `result` is not mutable\n/tmp/tmpth4ko0b2.d(30): Error: slice `result` is not mutable\n/tmp/tmpth4ko0b2.d(34): Error: no property `length` for type `string`\n/tmp/tmpth4ko0b2.d(36): Error: no property `length` for type `string`\n/tmp/tmpth4ko0b2.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpth4ko0b2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoxj3slr2.d(22): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(24): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(26): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(30): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(31): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpoxj3slr2.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpoxj3slr2.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj3slr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpth4ko0b2.d(22): Error: no property `length` for type `string`\n/tmp/tmpth4ko0b2.d(26): Error: slice `result` is not mutable\n/tmp/tmpth4ko0b2.d(30): Error: slice `result` is not mutable\n/tmp/tmpth4ko0b2.d(34): Error: no property `length` for type `string`\n/tmp/tmpth4ko0b2.d(36): Error: no property `length` for type `string`\n/tmp/tmpth4ko0b2.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpth4ko0b2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = i;\n        }\n        else {\n            result += text[i];\n            j = i + 1;\n        }\n        i = j;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp3a95bp97.d(24): Error: no property `length` for type `string`\n/tmp/tmp3a95bp97.d(26): Error: slice `result` is not mutable\n/tmp/tmp3a95bp97.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a95bp97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoxj3slr2.d(22): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(24): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(26): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(30): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(31): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpoxj3slr2.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpoxj3slr2.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj3slr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        }\n        else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j > 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpbkcpgpb1.d(24): Error: no property `length` for type `string`\n/tmp/tmpbkcpgpb1.d(26): Error: slice `result` is not mutable\n/tmp/tmpbkcpgpb1.d(30): Error: slice `result` is not mutable\n/tmp/tmpbkcpgpb1.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkcpgpb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < text.length())\n    {\n        if (text[i] == ' ')\n        {\n            result += '_';\n            i++;\n            j = i;\n            k = i;\n            while (i < text.length() && text[i] == ' ')\n            {\n                i++;\n            }\n            if (i < text.length())\n            {\n                result += text[j];\n                result += text[k];\n            }\n        }\n        else\n        {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpal8zn1fu.d(25): Error: no property `length` for type `string`\n/tmp/tmpal8zn1fu.d(29): Error: slice `result` is not mutable\n/tmp/tmpal8zn1fu.d(33): Error: no property `length` for type `string`\n/tmp/tmpal8zn1fu.d(37): Error: no property `length` for type `string`\n/tmp/tmpal8zn1fu.d(39): Error: slice `result` is not mutable\n/tmp/tmpal8zn1fu.d(40): Error: slice `result` is not mutable\n/tmp/tmpal8zn1fu.d(45): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpal8zn1fu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += \"_\";\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        result = result.replace(result.find(\" \"), 1, \"_\");\n        result = result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpe_x35vy8.d(22): Error: no property `length` for type `string`\n/tmp/tmpe_x35vy8.d(24): Error: slice `result` is not mutable\n/tmp/tmpe_x35vy8.d(26): Error: slice `result` is not mutable\n/tmp/tmpe_x35vy8.d(30): Error: no property `length` for type `string`\n/tmp/tmpe_x35vy8.d(31): Error: no property `replace` for type `string`\n/tmp/tmpe_x35vy8.d(32): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe_x35vy8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i, j, k;\n    int len = text.length();\n    for (i = 0; i < len; i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n    for (i = 0; i < len; i++) {\n        if (text[i] == ' ') {\n            for (j = i + 1; j < len; j++) {\n                if (text[j] == ' ') {\n                    text[j] = '-';\n                }\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp7uihvh14.d(22): Error: no property `length` for type `string`\n/tmp/tmp7uihvh14.d(25): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmp7uihvh14.d(32): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7uihvh14.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i, j, k;\n    int len = text.length();\n    string result = \"\";\n    for (i = 0; i < len; i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    i = 0;\n    j = 0;\n    k = 0;\n    while (i < len) {\n        if (text[i] == ' ') {\n            if (j < i) {\n                result[k++] = text[j++];\n            }\n            while (i < len && text[i] == ' ') {\n                i++;\n            }\n            j = i;\n        } else {\n            i++;\n        }\n    }\n    if (j < len) {\n        result[k++] = text[j++];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmplu4cuwx5.d(22): Error: no property `length` for type `string`\n/tmp/tmplu4cuwx5.d(26): Error: slice `result` is not mutable\n/tmp/tmplu4cuwx5.d(28): Error: slice `result` is not mutable\n/tmp/tmplu4cuwx5.d(38): Error: cannot modify `immutable` expression `result[cast(ulong)k++]`\n/tmp/tmplu4cuwx5.d(49): Error: cannot modify `immutable` expression `result[cast(ulong)k++]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplu4cuwx5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length())\n    {\n        if (text[i] == ' ')\n        {\n            result += '_';\n            j = 0;\n        }\n        else\n        {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2)\n        {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpp6lucu0u.d(24): Error: no property `length` for type `string`\n/tmp/tmpp6lucu0u.d(28): Error: slice `result` is not mutable\n/tmp/tmpp6lucu0u.d(33): Error: slice `result` is not mutable\n/tmp/tmpp6lucu0u.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6lucu0u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.substr(0, result.length() - 2);\n        result += '-';\n        result = result.substr(0, result.length() - 1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpq6yqzxm_.d(22): Error: no property `length` for type `string`\n/tmp/tmpq6yqzxm_.d(26): Error: slice `result` is not mutable\n/tmp/tmpq6yqzxm_.d(30): Error: slice `result` is not mutable\n/tmp/tmpq6yqzxm_.d(34): Error: no property `length` for type `string`\n/tmp/tmpq6yqzxm_.d(36): Error: no property `substr` for type `string`\n/tmp/tmpq6yqzxm_.d(37): Error: slice `result` is not mutable\n/tmp/tmpq6yqzxm_.d(38): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6yqzxm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += \"_\";\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += \"-\";\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpah44aezu.d(24): Error: no property `length` for type `string`\n/tmp/tmpah44aezu.d(26): Error: slice `result` is not mutable\n/tmp/tmpah44aezu.d(29): Error: slice `result` is not mutable\n/tmp/tmpah44aezu.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpah44aezu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.substr(0, result.length() - 2);\n        result += '-';\n        result = result.substr(0, result.length() - 1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpq6yqzxm_.d(22): Error: no property `length` for type `string`\n/tmp/tmpq6yqzxm_.d(26): Error: slice `result` is not mutable\n/tmp/tmpq6yqzxm_.d(30): Error: slice `result` is not mutable\n/tmp/tmpq6yqzxm_.d(34): Error: no property `length` for type `string`\n/tmp/tmpq6yqzxm_.d(36): Error: no property `substr` for type `string`\n/tmp/tmpq6yqzxm_.d(37): Error: slice `result` is not mutable\n/tmp/tmpq6yqzxm_.d(38): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6yqzxm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4nfu6srg.d(22): Error: no property `length` for type `string`\n/tmp/tmp4nfu6srg.d(26): Error: slice `result` is not mutable\n/tmp/tmp4nfu6srg.d(30): Error: slice `result` is not mutable\n/tmp/tmp4nfu6srg.d(34): Error: no property `length` for type `string`\n/tmp/tmp4nfu6srg.d(36): Error: no property `length` for type `string`\n/tmp/tmp4nfu6srg.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp4nfu6srg.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nfu6srg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            k = 0;\n        } else {\n            result += text[i];\n            k++;\n        }\n        if (k > 2) {\n            result += '-';\n            k = 0;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpvonn1gza.d(25): Error: no property `length` for type `string`\n/tmp/tmpvonn1gza.d(27): Error: slice `result` is not mutable\n/tmp/tmpvonn1gza.d(30): Error: slice `result` is not mutable\n/tmp/tmpvonn1gza.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvonn1gza.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp54xl6rdc.d(23): Error: no property `length` for type `string`\n/tmp/tmp54xl6rdc.d(25): Error: slice `result` is not mutable\n/tmp/tmp54xl6rdc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54xl6rdc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp2josn69z.d(22): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(26): Error: slice `result` is not mutable\n/tmp/tmp2josn69z.d(30): Error: slice `result` is not mutable\n/tmp/tmp2josn69z.d(34): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(36): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2josn69z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp2josn69z.d(22): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(26): Error: slice `result` is not mutable\n/tmp/tmp2josn69z.d(30): Error: slice `result` is not mutable\n/tmp/tmp2josn69z.d(34): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(36): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2josn69z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            count++;\n            if (count == 2) {\n                text[j] = '-';\n                count = 0;\n            } else {\n                text[j] = '_';\n            }\n        } else {\n            count = 0;\n            text[j] = text[i];\n        }\n        i++;\n        j++;\n    }\n    text[j] = '\\0';\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp8o8c2bgo.d(24): Error: no property `length` for type `string`\n/tmp/tmp8o8c2bgo.d(28): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp8o8c2bgo.d(31): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp8o8c2bgo.d(35): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp8o8c2bgo.d(40): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8o8c2bgo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < text.length())\n    {\n        if (text[i] == ' ')\n        {\n            result += '_';\n            i++;\n        }\n        else\n        {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_xqrvcu0.d(25): Error: no property `length` for type `string`\n/tmp/tmp_xqrvcu0.d(29): Error: slice `result` is not mutable\n/tmp/tmp_xqrvcu0.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_xqrvcu0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpzn27z_ud.d(24): Error: no property `length` for type `string`\n/tmp/tmpzn27z_ud.d(26): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(29): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzn27z_ud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++)\n    {\n        if (text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpvcftkoj4.d(22): Error: no property `length` for type `string`\n/tmp/tmpvcftkoj4.d(26): Error: slice `result` is not mutable\n/tmp/tmpvcftkoj4.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcftkoj4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length())\n    {\n        if (text[i] == ' ')\n        {\n            result += '_';\n            j = 0;\n        }\n        else\n        {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2)\n        {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpp6lucu0u.d(24): Error: no property `length` for type `string`\n/tmp/tmpp6lucu0u.d(28): Error: slice `result` is not mutable\n/tmp/tmpp6lucu0u.d(33): Error: slice `result` is not mutable\n/tmp/tmpp6lucu0u.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6lucu0u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j,k;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            for(j=i+1;j<text.length();j++)\n            {\n                if(text[j]==' ')\n                {\n                    text[j]='-';\n                }\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpbuyxxyay.d(22): Error: no property `length` for type `string`\n/tmp/tmpbuyxxyay.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpbuyxxyay.d(29): Error: no property `length` for type `string`\n/tmp/tmpbuyxxyay.d(33): Error: no property `length` for type `string`\n/tmp/tmpbuyxxyay.d(37): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbuyxxyay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        result = result.replace(result.find(\"  \"), 2, \"__\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpvdqdcr1s.d(22): Error: no property `length` for type `string`\n/tmp/tmpvdqdcr1s.d(24): Error: slice `result` is not mutable\n/tmp/tmpvdqdcr1s.d(26): Error: slice `result` is not mutable\n/tmp/tmpvdqdcr1s.d(30): Error: no property `length` for type `string`\n/tmp/tmpvdqdcr1s.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvdqdcr1s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        result = result.replace(result.find(\"  \"), 2, \"__\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpv_z03zwr.d(22): Error: no property `length` for type `string`\n/tmp/tmpv_z03zwr.d(24): Error: slice `result` is not mutable\n/tmp/tmpv_z03zwr.d(26): Error: slice `result` is not mutable\n/tmp/tmpv_z03zwr.d(30): Error: no property `length` for type `string`\n/tmp/tmpv_z03zwr.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_z03zwr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoxj3slr2.d(22): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(24): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(26): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(30): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(31): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpoxj3slr2.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpoxj3slr2.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj3slr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += \"_\";\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += \"-\";\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpah44aezu.d(24): Error: no property `length` for type `string`\n/tmp/tmpah44aezu.d(26): Error: slice `result` is not mutable\n/tmp/tmpah44aezu.d(29): Error: slice `result` is not mutable\n/tmp/tmpah44aezu.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpah44aezu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.substr(0, result.length() - 2);\n        result += '-';\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp27ffehte.d(22): Error: no property `length` for type `string`\n/tmp/tmp27ffehte.d(26): Error: slice `result` is not mutable\n/tmp/tmp27ffehte.d(30): Error: slice `result` is not mutable\n/tmp/tmp27ffehte.d(34): Error: no property `length` for type `string`\n/tmp/tmp27ffehte.d(36): Error: no property `substr` for type `string`\n/tmp/tmp27ffehte.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27ffehte.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j > 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpr1zvmsgj.d(24): Error: no property `length` for type `string`\n/tmp/tmpr1zvmsgj.d(26): Error: slice `result` is not mutable\n/tmp/tmpr1zvmsgj.d(29): Error: slice `result` is not mutable\n/tmp/tmpr1zvmsgj.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1zvmsgj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            i++;\n        } else {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkhx6_qdh.d(24): Error: no property `length` for type `string`\n/tmp/tmpkhx6_qdh.d(26): Error: slice `result` is not mutable\n/tmp/tmpkhx6_qdh.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhx6_qdh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4oy1rdxr.d(22): Error: no property `length` for type `string`\n/tmp/tmp4oy1rdxr.d(26): Error: slice `result` is not mutable\n/tmp/tmp4oy1rdxr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy1rdxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4oy1rdxr.d(22): Error: no property `length` for type `string`\n/tmp/tmp4oy1rdxr.d(26): Error: slice `result` is not mutable\n/tmp/tmp4oy1rdxr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy1rdxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    // replace consecutive spaces with -\n    while (result.find(\"  \") != string::npos) {\n        result.replace(result.find(\"  \"), 2, \"-\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp6m07cmtn.d(31): Error: found `:` when expecting `)`\n/tmp/tmp6m07cmtn.d(31): Error: found `:` instead of statement\n/tmp/tmp6m07cmtn.d(35): Error: declaration expected, not `return`\n/tmp/tmp6m07cmtn.d(36): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6m07cmtn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        }\n        else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoazw4qgx.d(24): Error: no property `length` for type `string`\n/tmp/tmpoazw4qgx.d(26): Error: slice `result` is not mutable\n/tmp/tmpoazw4qgx.d(30): Error: slice `result` is not mutable\n/tmp/tmpoazw4qgx.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoazw4qgx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4oy1rdxr.d(22): Error: no property `length` for type `string`\n/tmp/tmp4oy1rdxr.d(26): Error: slice `result` is not mutable\n/tmp/tmp4oy1rdxr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy1rdxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoxj3slr2.d(22): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(24): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(26): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(30): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(31): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpoxj3slr2.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpoxj3slr2.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj3slr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        }\n        else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoz1g1u8w.d(22): Error: no property `length` for type `string`\n/tmp/tmpoz1g1u8w.d(24): Error: slice `result` is not mutable\n/tmp/tmpoz1g1u8w.d(27): Error: slice `result` is not mutable\n/tmp/tmpoz1g1u8w.d(31): Error: no property `length` for type `string`\n/tmp/tmpoz1g1u8w.d(32): Error: no property `length` for type `string`\n/tmp/tmpoz1g1u8w.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoz1g1u8w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while(i < text.length())\n    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n            j = 0;\n        }\n        else\n        {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if(j == 2)\n        {\n            result += \"-\";\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4a4kl4l4.d(24): Error: no property `length` for type `string`\n/tmp/tmp4a4kl4l4.d(28): Error: slice `result` is not mutable\n/tmp/tmp4a4kl4l4.d(33): Error: slice `result` is not mutable\n/tmp/tmp4a4kl4l4.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a4kl4l4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp9wsns2kd.d(22): Error: no property `length` for type `string`\n/tmp/tmp9wsns2kd.d(26): Error: slice `result` is not mutable\n/tmp/tmp9wsns2kd.d(30): Error: slice `result` is not mutable\n/tmp/tmp9wsns2kd.d(34): Error: no property `length` for type `string`\n/tmp/tmp9wsns2kd.d(36): Error: no property `length` for type `string`\n/tmp/tmp9wsns2kd.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp9wsns2kd.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmp9wsns2kd.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wsns2kd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        result = result.substr(0, result.length() - 2);\n        result += '-';\n        result = result.substr(0, result.length() - 1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpho5urjjn.d(22): Error: no property `length` for type `string`\n/tmp/tmpho5urjjn.d(24): Error: slice `result` is not mutable\n/tmp/tmpho5urjjn.d(26): Error: slice `result` is not mutable\n/tmp/tmpho5urjjn.d(30): Error: no property `length` for type `string`\n/tmp/tmpho5urjjn.d(31): Error: no property `substr` for type `string`\n/tmp/tmpho5urjjn.d(32): Error: slice `result` is not mutable\n/tmp/tmpho5urjjn.d(33): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpho5urjjn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpzn27z_ud.d(24): Error: no property `length` for type `string`\n/tmp/tmpzn27z_ud.d(26): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(29): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzn27z_ud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp60tc5uka.d(22): Error: no property `length` for type `string`\n/tmp/tmp60tc5uka.d(24): Error: slice `result` is not mutable\n/tmp/tmp60tc5uka.d(26): Error: slice `result` is not mutable\n/tmp/tmp60tc5uka.d(30): Error: no property `length` for type `string`\n/tmp/tmp60tc5uka.d(31): Error: no property `length` for type `string`\n/tmp/tmp60tc5uka.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp60tc5uka.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmp60tc5uka.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60tc5uka.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp27s0elfd.d(22): Error: no property `length` for type `string`\n/tmp/tmp27s0elfd.d(24): Error: slice `result` is not mutable\n/tmp/tmp27s0elfd.d(26): Error: slice `result` is not mutable\n/tmp/tmp27s0elfd.d(30): Error: no property `length` for type `string`\n/tmp/tmp27s0elfd.d(31): Error: no property `length` for type `string`\n/tmp/tmp27s0elfd.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp27s0elfd.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27s0elfd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            count++;\n            if (count == 1) {\n                j = i;\n            }\n            else if (count == 2) {\n                k = i;\n                text[k] = '_';\n                text[j] = '_';\n                text[k+1] = '-';\n                text[j+1] = '-';\n                i = k + 2;\n            }\n            else {\n                text[i] = '_';\n                i++;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpk0ytnoex.d(25): Error: no property `length` for type `string`\n/tmp/tmpk0ytnoex.d(33): Error: cannot modify `immutable` expression `text[cast(ulong)k]`\n/tmp/tmpk0ytnoex.d(34): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpk0ytnoex.d(35): Error: cannot modify `immutable` expression `text[cast(ulong)(k + 1)]`\n/tmp/tmpk0ytnoex.d(36): Error: cannot modify `immutable` expression `text[cast(ulong)(j + 1)]`\n/tmp/tmpk0ytnoex.d(40): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0ytnoex.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while(i < text.length())\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp6r1mpiqb.d(23): Error: no property `length` for type `string`\n/tmp/tmp6r1mpiqb.d(27): Error: slice `result` is not mutable\n/tmp/tmp6r1mpiqb.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6r1mpiqb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j;\n    int len = text.length();\n    for(i=0;i<len;i++)\n    {\n        if(text[i]==' ')\n        {\n            for(j=i+1;j<len;j++)\n            {\n                if(text[j]==' ')\n                {\n                    if(j-i>2)\n                    {\n                        text[j]='-';\n                    }\n                    else\n                    {\n                        text[i]='_';\n                    }\n                }\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpx4h_d3jy.d(22): Error: no property `length` for type `string`\n/tmp/tmpx4h_d3jy.d(33): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpx4h_d3jy.d(37): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4h_d3jy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        }\n        else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j > 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpbkcpgpb1.d(24): Error: no property `length` for type `string`\n/tmp/tmpbkcpgpb1.d(26): Error: slice `result` is not mutable\n/tmp/tmpbkcpgpb1.d(30): Error: slice `result` is not mutable\n/tmp/tmpbkcpgpb1.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkcpgpb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < text.length()) \n    {\n        if (text[i] == ' ') \n        {\n            result += \"_\";\n            k = 0;\n        } \n        else \n        {\n            result += text[i];\n            k++;\n        }\n        if (k > 2) \n        {\n            result += \"-\";\n            k = 0;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp7248xj40.d(25): Error: no property `length` for type `string`\n/tmp/tmp7248xj40.d(29): Error: slice `result` is not mutable\n/tmp/tmp7248xj40.d(34): Error: slice `result` is not mutable\n/tmp/tmp7248xj40.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7248xj40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i=0; i<text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i=0; i<result.length(); i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpr7dubiyr.d(22): Error: no property `length` for type `string`\n/tmp/tmpr7dubiyr.d(26): Error: slice `result` is not mutable\n/tmp/tmpr7dubiyr.d(30): Error: slice `result` is not mutable\n/tmp/tmpr7dubiyr.d(34): Error: no property `length` for type `string`\n/tmp/tmpr7dubiyr.d(36): Error: no property `length` for type `string`\n/tmp/tmpr7dubiyr.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr7dubiyr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) \n    {\n        if (text[i] == ' ') \n        {\n            result += '_';\n        } \n        else \n        {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpooj83lph.d(23): Error: no property `length` for type `string`\n/tmp/tmpooj83lph.d(27): Error: slice `result` is not mutable\n/tmp/tmpooj83lph.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpooj83lph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ' && text[i+1]==' ')\n        {\n            for(j=i+1;j<text.length();j++)\n            {\n                if(text[j]==' ')\n                {\n                    text[j]='-';\n                }\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpfz1dlwby.d(22): Error: no property `length` for type `string`\n/tmp/tmpfz1dlwby.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpfz1dlwby.d(29): Error: no property `length` for type `string`\n/tmp/tmpfz1dlwby.d(33): Error: no property `length` for type `string`\n/tmp/tmpfz1dlwby.d(37): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfz1dlwby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4oy1rdxr.d(22): Error: no property `length` for type `string`\n/tmp/tmp4oy1rdxr.d(26): Error: slice `result` is not mutable\n/tmp/tmp4oy1rdxr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy1rdxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    // remove consecutive spaces\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \", \" \");\n    result = result.replace(\"  \",\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp2g13i7tv.d(65): Error: expression expected, not `unittest`\n/tmp/tmp2g13i7tv.d(66): Error: found `{` when expecting `,`\n/tmp/tmp2g13i7tv.d(67): Error: expression expected, not `alias`\n/tmp/tmp2g13i7tv.d(67): Error: found `candidate` when expecting `,`\n/tmp/tmp2g13i7tv.d(67): Error: expression expected, not `=`\n/tmp/tmp2g13i7tv.d(67): Error: found `fix_spaces` when expecting `,`\n/tmp/tmp2g13i7tv.d(67): Error: expression expected, not `;`\n/tmp/tmp2g13i7tv.d(69): Error: found `assert` when expecting `,`\n/tmp/tmp2g13i7tv.d(69): Error: found `;` when expecting `,`\n/tmp/tmp2g13i7tv.d(70): Error: found `;` when expecting `,`\n/tmp/tmp2g13i7tv.d(71): Error: found `;` when expecting `,`\n/tmp/tmp2g13i7tv.d(72): Error: found `;` when expecting `,`\n/tmp/tmp2g13i7tv.d(73): Error: found `;` when expecting `,`\n/tmp/tmp2g13i7tv.d(74): Error: expression expected, not `}`\n/tmp/tmp2g13i7tv.d(75): Error: found `void` when expecting `,`\n/tmp/tmp2g13i7tv.d(75): Error: found `{` when expecting `,`\n/tmp/tmp2g13i7tv.d(75): Erro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoxj3slr2.d(22): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(24): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(26): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(30): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(31): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpoxj3slr2.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpoxj3slr2.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj3slr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc2tb03cw.d(22): Error: no property `length` for type `string`\n/tmp/tmpc2tb03cw.d(26): Error: slice `result` is not mutable\n/tmp/tmpc2tb03cw.d(30): Error: slice `result` is not mutable\n/tmp/tmpc2tb03cw.d(34): Error: no property `length` for type `string`\n/tmp/tmpc2tb03cw.d(36): Error: no property `length` for type `string`\n/tmp/tmpc2tb03cw.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2tb03cw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc2tb03cw.d(22): Error: no property `length` for type `string`\n/tmp/tmpc2tb03cw.d(26): Error: slice `result` is not mutable\n/tmp/tmpc2tb03cw.d(30): Error: slice `result` is not mutable\n/tmp/tmpc2tb03cw.d(34): Error: no property `length` for type `string`\n/tmp/tmpc2tb03cw.d(36): Error: no property `length` for type `string`\n/tmp/tmpc2tb03cw.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2tb03cw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpskdd7taz.d(22): Error: no property `length` for type `string`\n/tmp/tmpskdd7taz.d(26): Error: slice `result` is not mutable\n/tmp/tmpskdd7taz.d(30): Error: slice `result` is not mutable\n/tmp/tmpskdd7taz.d(34): Error: no property `length` for type `string`\n/tmp/tmpskdd7taz.d(36): Error: no property `length` for type `string`\n/tmp/tmpskdd7taz.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpskdd7taz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 1; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpdzi_s0v_.d(22): Error: no property `length` for type `string`\n/tmp/tmpdzi_s0v_.d(26): Error: slice `result` is not mutable\n/tmp/tmpdzi_s0v_.d(30): Error: slice `result` is not mutable\n/tmp/tmpdzi_s0v_.d(34): Error: no property `length` for type `string`\n/tmp/tmpdzi_s0v_.d(36): Error: no property `length` for type `string`\n/tmp/tmpdzi_s0v_.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzi_s0v_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < text.length())\n    {\n        if (text[i] == ' ')\n        {\n            result += \"_\";\n            j = i;\n            k = i;\n            while (text[k] == ' ')\n            {\n                k++;\n            }\n            if (k - j > 2)\n            {\n                result += \"_\";\n            }\n        }\n        else\n        {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpw1duhld6.d(25): Error: no property `length` for type `string`\n/tmp/tmpw1duhld6.d(29): Error: slice `result` is not mutable\n/tmp/tmpw1duhld6.d(38): Error: slice `result` is not mutable\n/tmp/tmpw1duhld6.d(43): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1duhld6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpzn27z_ud.d(24): Error: no property `length` for type `string`\n/tmp/tmpzn27z_ud.d(26): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(29): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzn27z_ud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length())\n    {\n        if (text[i] == ' ')\n        {\n            result += '_';\n            j = 0;\n        }\n        else\n        {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2)\n        {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpp6lucu0u.d(24): Error: no property `length` for type `string`\n/tmp/tmpp6lucu0u.d(28): Error: slice `result` is not mutable\n/tmp/tmpp6lucu0u.d(33): Error: slice `result` is not mutable\n/tmp/tmpp6lucu0u.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6lucu0u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += \"_\";\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += \"-\";\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpah44aezu.d(24): Error: no property `length` for type `string`\n/tmp/tmpah44aezu.d(26): Error: slice `result` is not mutable\n/tmp/tmpah44aezu.d(29): Error: slice `result` is not mutable\n/tmp/tmpah44aezu.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpah44aezu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp9wsns2kd.d(22): Error: no property `length` for type `string`\n/tmp/tmp9wsns2kd.d(26): Error: slice `result` is not mutable\n/tmp/tmp9wsns2kd.d(30): Error: slice `result` is not mutable\n/tmp/tmp9wsns2kd.d(34): Error: no property `length` for type `string`\n/tmp/tmp9wsns2kd.d(36): Error: no property `length` for type `string`\n/tmp/tmp9wsns2kd.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp9wsns2kd.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmp9wsns2kd.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wsns2kd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpft95csxf.d(22): Error: no property `length` for type `string`\n/tmp/tmpft95csxf.d(26): Error: slice `result` is not mutable\n/tmp/tmpft95csxf.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft95csxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) \n    {\n        if (text[i] == ' ') \n        {\n            result += '_';\n        } \n        else \n        {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpooj83lph.d(23): Error: no property `length` for type `string`\n/tmp/tmpooj83lph.d(27): Error: slice `result` is not mutable\n/tmp/tmpooj83lph.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpooj83lph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = i;\n            k = i;\n        }\n        else {\n            result += text[i];\n            j = i;\n            k = i;\n        }\n        i++;\n    }\n    if (j < text.length()) {\n        while (j < text.length()) {\n            if (text[j] == ' ') {\n                if (k < j) {\n                    result += '_';\n                }\n                else {\n                    result += '-';\n                }\n            }\n            else {\n                result += text[j];\n            }\n            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp3cb6vm0n.d(25): Error: no property `length` for type `string`\n/tmp/tmp3cb6vm0n.d(27): Error: slice `result` is not mutable\n/tmp/tmp3cb6vm0n.d(32): Error: slice `result` is not mutable\n/tmp/tmp3cb6vm0n.d(38): Error: no property `length` for type `string`\n/tmp/tmp3cb6vm0n.d(39): Error: no property `length` for type `string`\n/tmp/tmp3cb6vm0n.d(42): Error: slice `result` is not mutable\n/tmp/tmp3cb6vm0n.d(45): Error: slice `result` is not mutable\n/tmp/tmp3cb6vm0n.d(49): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cb6vm0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        result = result.substr(0, result.length() - 2);\n        result += '-';\n        result = result.substr(0, result.length() - 1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpho5urjjn.d(22): Error: no property `length` for type `string`\n/tmp/tmpho5urjjn.d(24): Error: slice `result` is not mutable\n/tmp/tmpho5urjjn.d(26): Error: slice `result` is not mutable\n/tmp/tmpho5urjjn.d(30): Error: no property `length` for type `string`\n/tmp/tmpho5urjjn.d(31): Error: no property `substr` for type `string`\n/tmp/tmpho5urjjn.d(32): Error: slice `result` is not mutable\n/tmp/tmpho5urjjn.d(33): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpho5urjjn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ' && text[i+1]==' ')\n        {\n            text[i]='-';\n            text[i+1]='-';\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpduyfd2iq.d(22): Error: no property `length` for type `string`\n/tmp/tmpduyfd2iq.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpduyfd2iq.d(29): Error: no property `length` for type `string`\n/tmp/tmpduyfd2iq.d(33): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpduyfd2iq.d(34): Error: cannot modify `immutable` expression `text[cast(ulong)(i + 1)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpduyfd2iq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.replace(result.find(\"  \"), 2, \"--\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpbia9fjip.d(22): Error: no property `length` for type `string`\n/tmp/tmpbia9fjip.d(26): Error: slice `result` is not mutable\n/tmp/tmpbia9fjip.d(30): Error: slice `result` is not mutable\n/tmp/tmpbia9fjip.d(34): Error: no property `length` for type `string`\n/tmp/tmpbia9fjip.d(36): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbia9fjip.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            i++;\n        } else {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkhx6_qdh.d(24): Error: no property `length` for type `string`\n/tmp/tmpkhx6_qdh.d(26): Error: slice `result` is not mutable\n/tmp/tmpkhx6_qdh.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhx6_qdh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i+1] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp8nvlhoyg.d(22): Error: no property `length` for type `string`\n/tmp/tmp8nvlhoyg.d(24): Error: slice `result` is not mutable\n/tmp/tmp8nvlhoyg.d(26): Error: slice `result` is not mutable\n/tmp/tmp8nvlhoyg.d(30): Error: no property `length` for type `string`\n/tmp/tmp8nvlhoyg.d(31): Error: no property `length` for type `string`\n/tmp/tmp8nvlhoyg.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8nvlhoyg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkti5ipxj.d(22): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(26): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(30): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(34): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(36): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpkti5ipxj.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpkti5ipxj.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkti5ipxj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        result = result.replace(\" \", \"-\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpbf4syrjq.d(22): Error: no property `length` for type `string`\n/tmp/tmpbf4syrjq.d(24): Error: slice `result` is not mutable\n/tmp/tmpbf4syrjq.d(26): Error: slice `result` is not mutable\n/tmp/tmpbf4syrjq.d(30): Error: no property `length` for type `string`\n/tmp/tmpbf4syrjq.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbf4syrjq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while(i < text.length()) {\n        if(text[i] == ' ') {\n            result += '_';\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if(j == 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpfxc9hqz4.d(24): Error: no property `length` for type `string`\n/tmp/tmpfxc9hqz4.d(26): Error: slice `result` is not mutable\n/tmp/tmpfxc9hqz4.d(29): Error: slice `result` is not mutable\n/tmp/tmpfxc9hqz4.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfxc9hqz4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkti5ipxj.d(22): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(26): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(30): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(34): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(36): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpkti5ipxj.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpkti5ipxj.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkti5ipxj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result.erase(i+1, 2);\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpsk3v5796.d(22): Error: no property `length` for type `string`\n/tmp/tmpsk3v5796.d(24): Error: slice `result` is not mutable\n/tmp/tmpsk3v5796.d(26): Error: slice `result` is not mutable\n/tmp/tmpsk3v5796.d(30): Error: no property `length` for type `string`\n/tmp/tmpsk3v5796.d(31): Error: no property `length` for type `string`\n/tmp/tmpsk3v5796.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpsk3v5796.d(34): Error: no property `erase` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsk3v5796.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    // if there are more than 2 consecutive spaces, replace with -\n    if (result.find(\"  \") != string::npos) {\n        result = result.replace(\"  \", \"-\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_g516oyp.d(31): Error: found `:` when expecting `)`\n/tmp/tmp_g516oyp.d(31): Error: found `:` instead of statement\n/tmp/tmp_g516oyp.d(35): Error: declaration expected, not `return`\n/tmp/tmp_g516oyp.d(36): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_g516oyp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n    int count11 = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14 = 0;\n    int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n    int count18 = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21 = 0;\n    int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n    int count25 = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28 = 0;\n    int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n    int count32 = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35 = 0;\n    int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n    int count39 = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42 = 0;\n    int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n    int count46 = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49 = 0;\n    int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n    int count53 = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56 = 0;\n    int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n    int count60 = 0;\n    int count61 = 0;\n    int\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpe1z8oun0.d(86): Error: no identifier for declarator `int`\n/tmp/tmpe1z8oun0.d(86): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1z8oun0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.substr(0, result.length() - 2);\n        result += '-';\n        result = result.substr(0, result.length() - 1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpq6yqzxm_.d(22): Error: no property `length` for type `string`\n/tmp/tmpq6yqzxm_.d(26): Error: slice `result` is not mutable\n/tmp/tmpq6yqzxm_.d(30): Error: slice `result` is not mutable\n/tmp/tmpq6yqzxm_.d(34): Error: no property `length` for type `string`\n/tmp/tmpq6yqzxm_.d(36): Error: no property `substr` for type `string`\n/tmp/tmpq6yqzxm_.d(37): Error: slice `result` is not mutable\n/tmp/tmpq6yqzxm_.d(38): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6yqzxm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            count++;\n            if (count == 2) {\n                text[j] = '-';\n                count = 0;\n            }\n            else {\n                text[j] = '_';\n            }\n        }\n        else {\n            count = 0;\n            text[j] = text[i];\n        }\n        i++;\n        j++;\n    }\n    text[j] = '\\0';\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwr8r9mik.d(24): Error: no property `length` for type `string`\n/tmp/tmpwr8r9mik.d(28): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpwr8r9mik.d(32): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpwr8r9mik.d(37): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpwr8r9mik.d(42): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwr8r9mik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length())\n    {\n        if (text[i] == ' ')\n        {\n            result += \"_\";\n            j = 0;\n        }\n        else\n        {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2)\n        {\n            result += \"-\";\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpjr31ym7x.d(24): Error: no property `length` for type `string`\n/tmp/tmpjr31ym7x.d(28): Error: slice `result` is not mutable\n/tmp/tmpjr31ym7x.d(33): Error: slice `result` is not mutable\n/tmp/tmpjr31ym7x.d(39): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjr31ym7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.replace(result.find(\" \"), 1, \"-\" );\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp9jknzo2o.d(22): Error: no property `length` for type `string`\n/tmp/tmp9jknzo2o.d(26): Error: slice `result` is not mutable\n/tmp/tmp9jknzo2o.d(30): Error: slice `result` is not mutable\n/tmp/tmp9jknzo2o.d(34): Error: no property `length` for type `string`\n/tmp/tmp9jknzo2o.d(36): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jknzo2o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i=0; i<text.length(); i++)\n    {\n        if(text[i]==' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpdobn30m3.d(22): Error: no property `length` for type `string`\n/tmp/tmpdobn30m3.d(26): Error: slice `result` is not mutable\n/tmp/tmpdobn30m3.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdobn30m3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < text.length())\n    {\n        if (text[i] == ' ')\n        {\n            result += \"_\";\n            k = 1;\n        }\n        else\n        {\n            if (k == 1)\n            {\n                result += text[i];\n                k = 0;\n            }\n            else\n            {\n                result += text[i];\n            }\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpe7mp9kty.d(25): Error: no property `length` for type `string`\n/tmp/tmpe7mp9kty.d(29): Error: slice `result` is not mutable\n/tmp/tmpe7mp9kty.d(36): Error: slice `result` is not mutable\n/tmp/tmpe7mp9kty.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7mp9kty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = i + 1;\n        }\n        else {\n            result += text[i];\n            j = i + 1;\n        }\n        i = j;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpsjt03t3j.d(24): Error: no property `length` for type `string`\n/tmp/tmpsjt03t3j.d(26): Error: slice `result` is not mutable\n/tmp/tmpsjt03t3j.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjt03t3j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp3c5dns70.d(22): Error: no property `length` for type `string`\n/tmp/tmp3c5dns70.d(26): Error: slice `result` is not mutable\n/tmp/tmp3c5dns70.d(30): Error: slice `result` is not mutable\n/tmp/tmp3c5dns70.d(34): Error: no property `length` for type `string`\n/tmp/tmp3c5dns70.d(36): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c5dns70.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        result = result.replace(\"  \", \"_\");\n        result = result.replace(\"  \", \"_\");\n        result = result.replace(\"  \", \"_\");\n        result = result.replace(\"  \", \"_\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpi04j1h04.d(22): Error: no property `length` for type `string`\n/tmp/tmpi04j1h04.d(24): Error: slice `result` is not mutable\n/tmp/tmpi04j1h04.d(26): Error: slice `result` is not mutable\n/tmp/tmpi04j1h04.d(30): Error: no property `length` for type `string`\n/tmp/tmpi04j1h04.d(31): Error: no property `replace` for type `string`\n/tmp/tmpi04j1h04.d(32): Error: no property `replace` for type `string`\n/tmp/tmpi04j1h04.d(33): Error: no property `replace` for type `string`\n/tmp/tmpi04j1h04.d(34): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi04j1h04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ' && text[i+1]==' ')\n        {\n            for(j=i+1;j<text.length();j++)\n            {\n                if(text[j]==' ')\n                {\n                    text[j]='-';\n                }\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpfz1dlwby.d(22): Error: no property `length` for type `string`\n/tmp/tmpfz1dlwby.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpfz1dlwby.d(29): Error: no property `length` for type `string`\n/tmp/tmpfz1dlwby.d(33): Error: no property `length` for type `string`\n/tmp/tmpfz1dlwby.d(37): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfz1dlwby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.substr(0, result.length()-2);\n        result += '-';\n        result = result.substr(0, result.length()-1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpwijakf0x.d(22): Error: no property `length` for type `string`\n/tmp/tmpwijakf0x.d(26): Error: slice `result` is not mutable\n/tmp/tmpwijakf0x.d(30): Error: slice `result` is not mutable\n/tmp/tmpwijakf0x.d(34): Error: no property `length` for type `string`\n/tmp/tmpwijakf0x.d(36): Error: no property `substr` for type `string`\n/tmp/tmpwijakf0x.d(37): Error: slice `result` is not mutable\n/tmp/tmpwijakf0x.d(38): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwijakf0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkti5ipxj.d(22): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(26): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(30): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(34): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(36): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpkti5ipxj.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpkti5ipxj.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkti5ipxj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        result = result.substr(0, result.length() - 2);\n        result += '-';\n        result = result.substr(0, result.length() - 1);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpho5urjjn.d(22): Error: no property `length` for type `string`\n/tmp/tmpho5urjjn.d(24): Error: slice `result` is not mutable\n/tmp/tmpho5urjjn.d(26): Error: slice `result` is not mutable\n/tmp/tmpho5urjjn.d(30): Error: no property `length` for type `string`\n/tmp/tmpho5urjjn.d(31): Error: no property `substr` for type `string`\n/tmp/tmpho5urjjn.d(32): Error: slice `result` is not mutable\n/tmp/tmpho5urjjn.d(33): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpho5urjjn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4oy1rdxr.d(22): Error: no property `length` for type `string`\n/tmp/tmp4oy1rdxr.d(26): Error: slice `result` is not mutable\n/tmp/tmp4oy1rdxr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy1rdxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpft95csxf.d(22): Error: no property `length` for type `string`\n/tmp/tmpft95csxf.d(26): Error: slice `result` is not mutable\n/tmp/tmpft95csxf.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpft95csxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            count++;\n            if (count > 2) {\n                result += '_';\n                count = 0;\n            }\n        } else {\n            result += text[i];\n            count = 0;\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpphcfgu06.d(25): Error: no property `length` for type `string`\n/tmp/tmpphcfgu06.d(29): Error: slice `result` is not mutable\n/tmp/tmpphcfgu06.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpphcfgu06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    // replace consecutive spaces with -\n    result = result.replace(\"  \", \"-\");\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpmaoqwmep.d(22): Error: no property `length` for type `string`\n/tmp/tmpmaoqwmep.d(24): Error: slice `result` is not mutable\n/tmp/tmpmaoqwmep.d(26): Error: slice `result` is not mutable\n/tmp/tmpmaoqwmep.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmaoqwmep.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpzn27z_ud.d(24): Error: no property `length` for type `string`\n/tmp/tmpzn27z_ud.d(26): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(29): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzn27z_ud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    // if there are more than 2 consecutive spaces, replace them with -\n    if (result.find(\"  \") != string::npos) {\n        result = result.replace(\"  \", \"-\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpy590savd.d(31): Error: found `:` when expecting `)`\n/tmp/tmpy590savd.d(31): Error: found `:` instead of statement\n/tmp/tmpy590savd.d(35): Error: declaration expected, not `return`\n/tmp/tmpy590savd.d(36): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy590savd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    int len = text.length();\n    \n    while (i < len) {\n        if (text[i] == ' ') {\n            count++;\n            if (count == 1) {\n                text[j] = '_';\n                j++;\n            }\n        } else {\n            count = 0;\n            text[j] = text[i];\n            j++;\n        }\n        i++;\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpuu68p_qe.d(24): Error: no property `length` for type `string`\n/tmp/tmpuu68p_qe.d(30): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpuu68p_qe.d(35): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuu68p_qe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    while (result.find(\"  \") != string::npos) {\n        result.replace(result.find(\"  \"), 2, \"_\");\n    }\n    \n    while (result.find(\"  \") != string::npos) {\n        result.replace(result.find(\"  \"), 2, \"-\");\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpiizj081l.d(30): Error: found `:` when expecting `)`\n/tmp/tmpiizj081l.d(30): Error: found `:` instead of statement\n/tmp/tmpiizj081l.d(34): Error: declaration expected, not `while`\n/tmp/tmpiizj081l.d(36): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiizj081l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i=0; i<text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i=0; i<result.length()-2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp9i7xsncj.d(22): Error: no property `length` for type `string`\n/tmp/tmp9i7xsncj.d(26): Error: slice `result` is not mutable\n/tmp/tmp9i7xsncj.d(30): Error: slice `result` is not mutable\n/tmp/tmp9i7xsncj.d(34): Error: no property `length` for type `string`\n/tmp/tmp9i7xsncj.d(36): Error: no property `length` for type `string`\n/tmp/tmp9i7xsncj.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp9i7xsncj.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmp9i7xsncj.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9i7xsncj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length(); i++) {\n            if(result[i] == ' ') {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpou1dvnlo.d(22): Error: no property `length` for type `string`\n/tmp/tmpou1dvnlo.d(24): Error: slice `result` is not mutable\n/tmp/tmpou1dvnlo.d(26): Error: slice `result` is not mutable\n/tmp/tmpou1dvnlo.d(30): Error: no property `length` for type `string`\n/tmp/tmpou1dvnlo.d(31): Error: no property `length` for type `string`\n/tmp/tmpou1dvnlo.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpou1dvnlo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkti5ipxj.d(22): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(26): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(30): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(34): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(36): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpkti5ipxj.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpkti5ipxj.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkti5ipxj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4oy1rdxr.d(22): Error: no property `length` for type `string`\n/tmp/tmp4oy1rdxr.d(26): Error: slice `result` is not mutable\n/tmp/tmp4oy1rdxr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy1rdxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_pbgug2w.d(22): Error: no property `length` for type `string`\n/tmp/tmp_pbgug2w.d(26): Error: slice `result` is not mutable\n/tmp/tmp_pbgug2w.d(30): Error: slice `result` is not mutable\n/tmp/tmp_pbgug2w.d(34): Error: no property `length` for type `string`\n/tmp/tmp_pbgug2w.d(36): Error: no property `length` for type `string`\n/tmp/tmp_pbgug2w.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp_pbgug2w.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmp_pbgug2w.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_pbgug2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i, j;\n    for (i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n    for (i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            for (j = i + 1; j < text.length(); j++) {\n                if (text[j] == ' ') {\n                    text[j] = '-';\n                }\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpk6fgqy69.d(22): Error: no property `length` for type `string`\n/tmp/tmpk6fgqy69.d(24): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpk6fgqy69.d(27): Error: no property `length` for type `string`\n/tmp/tmpk6fgqy69.d(29): Error: no property `length` for type `string`\n/tmp/tmpk6fgqy69.d(31): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6fgqy69.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ' && text[i+1]==' ')\n        {\n            for(j=i+2;j<text.length();j++)\n            {\n                text[j]='-';\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpmv11fl81.d(22): Error: no property `length` for type `string`\n/tmp/tmpmv11fl81.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpmv11fl81.d(29): Error: no property `length` for type `string`\n/tmp/tmpmv11fl81.d(33): Error: no property `length` for type `string`\n/tmp/tmpmv11fl81.d(35): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmv11fl81.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            text[i]='_';\n        }\n    }\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ' && text[i+1]==' ')\n        {\n            for(j=i+2;j<text.length();j++)\n            {\n                text[j]='-';\n            }\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpmv11fl81.d(22): Error: no property `length` for type `string`\n/tmp/tmpmv11fl81.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpmv11fl81.d(29): Error: no property `length` for type `string`\n/tmp/tmpmv11fl81.d(33): Error: no property `length` for type `string`\n/tmp/tmpmv11fl81.d(35): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmv11fl81.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j,k;\n    string result;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            result.push_back('_');\n        }\n        else\n        {\n            result.push_back(text[i]);\n        }\n    }\n    for(i=0;i<result.length();i++)\n    {\n        if(result[i]==' ')\n        {\n            for(j=i+1;j<result.length();j++)\n            {\n                if(result[j]==' ')\n                {\n                    for(k=j+1;k<result.length();k++)\n                    {\n                        if(result[k]==' ')\n                        {\n                            result[j]='-';\n                            result[k]='-';\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpg300_ora.d(23): Error: no property `length` for type `string`\n/tmp/tmpg300_ora.d(27): Error: no property `push_back` for type `string`\n/tmp/tmpg300_ora.d(31): Error: no property `push_back` for type `string`\n/tmp/tmpg300_ora.d(34): Error: no property `length` for type `string`\n/tmp/tmpg300_ora.d(38): Error: no property `length` for type `string`\n/tmp/tmpg300_ora.d(42): Error: no property `length` for type `string`\n/tmp/tmpg300_ora.d(46): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\n/tmp/tmpg300_ora.d(47): Error: cannot modify `immutable` expression `result[cast(ulong)k]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg300_ora.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpzn27z_ud.d(24): Error: no property `length` for type `string`\n/tmp/tmpzn27z_ud.d(26): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(29): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzn27z_ud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpzn27z_ud.d(24): Error: no property `length` for type `string`\n/tmp/tmpzn27z_ud.d(26): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(29): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzn27z_ud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while(i < text.length()) {\n        if(text[i] == ' ') {\n            result += '_';\n            i++;\n        } else {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp6v8pxgas.d(24): Error: no property `length` for type `string`\n/tmp/tmp6v8pxgas.d(26): Error: slice `result` is not mutable\n/tmp/tmp6v8pxgas.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6v8pxgas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4nfu6srg.d(22): Error: no property `length` for type `string`\n/tmp/tmp4nfu6srg.d(26): Error: slice `result` is not mutable\n/tmp/tmp4nfu6srg.d(30): Error: slice `result` is not mutable\n/tmp/tmp4nfu6srg.d(34): Error: no property `length` for type `string`\n/tmp/tmp4nfu6srg.d(36): Error: no property `length` for type `string`\n/tmp/tmp4nfu6srg.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp4nfu6srg.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nfu6srg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4oy1rdxr.d(22): Error: no property `length` for type `string`\n/tmp/tmp4oy1rdxr.d(26): Error: slice `result` is not mutable\n/tmp/tmp4oy1rdxr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy1rdxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int count = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            count++;\n            if (count == 1) {\n                j = i;\n            }\n        }\n        else {\n            count = 0;\n        }\n        i++;\n    }\n    if (count > 2) {\n        k = 0;\n        while (k < count) {\n            text[j] = '-';\n            j++;\n            k++;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpn85oixrd.d(25): Error: no property `length` for type `string`\n/tmp/tmpn85oixrd.d(40): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn85oixrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp2josn69z.d(22): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(26): Error: slice `result` is not mutable\n/tmp/tmp2josn69z.d(30): Error: slice `result` is not mutable\n/tmp/tmp2josn69z.d(34): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(36): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2josn69z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += \"_\";\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += \"-\";\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpah44aezu.d(24): Error: no property `length` for type `string`\n/tmp/tmpah44aezu.d(26): Error: slice `result` is not mutable\n/tmp/tmpah44aezu.d(29): Error: slice `result` is not mutable\n/tmp/tmpah44aezu.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpah44aezu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp2josn69z.d(22): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(26): Error: slice `result` is not mutable\n/tmp/tmp2josn69z.d(30): Error: slice `result` is not mutable\n/tmp/tmp2josn69z.d(34): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(36): Error: no property `length` for type `string`\n/tmp/tmp2josn69z.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2josn69z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            count++;\n            if (count == 2) {\n                text[j] = '-';\n                count = 0;\n            }\n            else {\n                text[j] = '_';\n            }\n            i++;\n            j++;\n        }\n        else {\n            count = 0;\n            text[j] = text[i];\n            i++;\n            j++;\n        }\n    }\n    text[j] = '\\0';\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp5uiovw31.d(24): Error: no property `length` for type `string`\n/tmp/tmp5uiovw31.d(28): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp5uiovw31.d(32): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp5uiovw31.d(39): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp5uiovw31.d(44): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5uiovw31.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkti5ipxj.d(22): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(26): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(30): Error: slice `result` is not mutable\n/tmp/tmpkti5ipxj.d(34): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(36): Error: no property `length` for type `string`\n/tmp/tmpkti5ipxj.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpkti5ipxj.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpkti5ipxj.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkti5ipxj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoxj3slr2.d(22): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(24): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(26): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(30): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(31): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpoxj3slr2.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpoxj3slr2.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj3slr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n            result += '_';\n        else\n            result += text[i];\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n                result[i] = '-';\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpkp_6io_6.d(22): Error: no property `length` for type `string`\n/tmp/tmpkp_6io_6.d(25): Error: slice `result` is not mutable\n/tmp/tmpkp_6io_6.d(27): Error: slice `result` is not mutable\n/tmp/tmpkp_6io_6.d(30): Error: no property `length` for type `string`\n/tmp/tmpkp_6io_6.d(32): Error: no property `length` for type `string`\n/tmp/tmpkp_6io_6.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkp_6io_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j > 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpr1zvmsgj.d(24): Error: no property `length` for type `string`\n/tmp/tmpr1zvmsgj.d(26): Error: slice `result` is not mutable\n/tmp/tmpr1zvmsgj.d(29): Error: slice `result` is not mutable\n/tmp/tmpr1zvmsgj.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1zvmsgj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += \"_\";\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp_eq_otw6.d(22): Error: no property `length` for type `string`\n/tmp/tmp_eq_otw6.d(24): Error: slice `result` is not mutable\n/tmp/tmp_eq_otw6.d(26): Error: slice `result` is not mutable\n/tmp/tmp_eq_otw6.d(30): Error: no property `length` for type `string`\n/tmp/tmp_eq_otw6.d(31): Error: no property `length` for type `string`\n/tmp/tmp_eq_otw6.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp_eq_otw6.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmp_eq_otw6.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_eq_otw6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpc536homc.d(23): Error: no property `length` for type `string`\n/tmp/tmpc536homc.d(25): Error: slice `result` is not mutable\n/tmp/tmpc536homc.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc536homc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4oy1rdxr.d(22): Error: no property `length` for type `string`\n/tmp/tmp4oy1rdxr.d(26): Error: slice `result` is not mutable\n/tmp/tmp4oy1rdxr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy1rdxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2) {\n        for (int i = 0; i < result.length() - 2; i++) {\n            if (result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpplryge1r.d(22): Error: no property `length` for type `string`\n/tmp/tmpplryge1r.d(24): Error: slice `result` is not mutable\n/tmp/tmpplryge1r.d(26): Error: slice `result` is not mutable\n/tmp/tmpplryge1r.d(30): Error: no property `length` for type `string`\n/tmp/tmpplryge1r.d(31): Error: no property `length` for type `string`\n/tmp/tmpplryge1r.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpplryge1r.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpplryge1r.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpplryge1r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2) {\n        for(int i = 0; i < result.length() - 2; i++) {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ') {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpoxj3slr2.d(22): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(24): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(26): Error: slice `result` is not mutable\n/tmp/tmpoxj3slr2.d(30): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(31): Error: no property `length` for type `string`\n/tmp/tmpoxj3slr2.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpoxj3slr2.d(34): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmpoxj3slr2.d(35): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxj3slr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i,j;\n    string result = \"\";\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]==' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    //replace consecutive spaces with -\n    for(i=0;i<result.length();i++)\n    {\n        if(result[i]==' ')\n        {\n            for(j=i+1;j<result.length();j++)\n            {\n                if(result[j]==' ')\n                {\n                    result[j] = '-';\n                }\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpsl5mqlqd.d(23): Error: no property `length` for type `string`\n/tmp/tmpsl5mqlqd.d(27): Error: slice `result` is not mutable\n/tmp/tmpsl5mqlqd.d(31): Error: slice `result` is not mutable\n/tmp/tmpsl5mqlqd.d(36): Error: no property `length` for type `string`\n/tmp/tmpsl5mqlqd.d(40): Error: no property `length` for type `string`\n/tmp/tmpsl5mqlqd.d(44): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsl5mqlqd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += \"_\";\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += \"-\";\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpah44aezu.d(24): Error: no property `length` for type `string`\n/tmp/tmpah44aezu.d(26): Error: slice `result` is not mutable\n/tmp/tmpah44aezu.d(29): Error: slice `result` is not mutable\n/tmp/tmpah44aezu.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpah44aezu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            i++;\n        }\n        else {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp8x_ckcco.d(24): Error: no property `length` for type `string`\n/tmp/tmp8x_ckcco.d(26): Error: slice `result` is not mutable\n/tmp/tmp8x_ckcco.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8x_ckcco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpgkozpegc.d(94): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkozpegc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result[i] == ' ' && result[i+1] == ' ' && result[i+2] == ' ')\n            {\n                result[i] = '-';\n                result[i+1] = '-';\n                result[i+2] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp9wsns2kd.d(22): Error: no property `length` for type `string`\n/tmp/tmp9wsns2kd.d(26): Error: slice `result` is not mutable\n/tmp/tmp9wsns2kd.d(30): Error: slice `result` is not mutable\n/tmp/tmp9wsns2kd.d(34): Error: no property `length` for type `string`\n/tmp/tmp9wsns2kd.d(36): Error: no property `length` for type `string`\n/tmp/tmp9wsns2kd.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp9wsns2kd.d(41): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 1)]`\n/tmp/tmp9wsns2kd.d(42): Error: cannot modify `immutable` expression `result[cast(ulong)(i + 2)]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wsns2kd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < text.length()) {\n        if (text[i] == ' ') {\n            result += '_';\n            j = 0;\n        } else {\n            result += text[i];\n            j++;\n        }\n        i++;\n        if (j == 2) {\n            result += '-';\n            j = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpzn27z_ud.d(24): Error: no property `length` for type `string`\n/tmp/tmpzn27z_ud.d(26): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(29): Error: slice `result` is not mutable\n/tmp/tmpzn27z_ud.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzn27z_ud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp4oy1rdxr.d(22): Error: no property `length` for type `string`\n/tmp/tmp4oy1rdxr.d(26): Error: slice `result` is not mutable\n/tmp/tmp4oy1rdxr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oy1rdxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for (int i = 0; i < text.length(); i++)\n    {\n        if (text[i] == ' ')\n        {\n            result += '_';\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if (result.length() > 2)\n    {\n        for (int i = 0; i < result.length() - 1; i++)\n        {\n            if (result[i] == ' ' && result[i + 1] == ' ')\n            {\n                result[i] = '-';\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpnm5vosbw.d(22): Error: no property `length` for type `string`\n/tmp/tmpnm5vosbw.d(26): Error: slice `result` is not mutable\n/tmp/tmpnm5vosbw.d(30): Error: slice `result` is not mutable\n/tmp/tmpnm5vosbw.d(34): Error: no property `length` for type `string`\n/tmp/tmpnm5vosbw.d(36): Error: no property `length` for type `string`\n/tmp/tmpnm5vosbw.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnm5vosbw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i, j, k;\n    string result = \"\";\n    for (i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    \n    for (i = 0; i < result.length(); i++) {\n        if (result[i] == ' ') {\n            for (j = i+1; j < result.length(); j++) {\n                if (result[j] == ' ') {\n                    for (k = j+1; k < result.length(); k++) {\n                        if (result[k] == ' ') {\n                            result[k] = '-';\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmpgymq661b.d(23): Error: no property `length` for type `string`\n/tmp/tmpgymq661b.d(25): Error: slice `result` is not mutable\n/tmp/tmpgymq661b.d(27): Error: slice `result` is not mutable\n/tmp/tmpgymq661b.d(31): Error: no property `length` for type `string`\n/tmp/tmpgymq661b.d(33): Error: no property `length` for type `string`\n/tmp/tmpgymq661b.d(35): Error: no property `length` for type `string`\n/tmp/tmpgymq661b.d(37): Error: cannot modify `immutable` expression `result[cast(ulong)k]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgymq661b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}