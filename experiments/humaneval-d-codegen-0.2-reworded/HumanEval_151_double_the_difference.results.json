{
  "name": "HumanEval_151_double_the_difference",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n",
  "tests": "unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0)\n            continue;\n        if (!math.is_integer(lst[i]))\n            continue;\n        sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpliebl3hk.d(28): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpliebl3hk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptwd13418.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwd13418.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpgpymsxcg.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpymsxcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 || !math.is_integer(lst[i]))\n            continue;\n        sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp05dl6d00.d(26): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05dl6d00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpm2kj8g07.d(26): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2kj8g07.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0)\n            continue;\n        if(lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpzafx_dgv.d(28): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzafx_dgv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 || !math.isInteger(lst[i])) continue;\n        sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpl24lfrju.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl24lfrju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpb0duwnve.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0duwnve.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpb0duwnve.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0duwnve.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp44tuicy0.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44tuicy0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 || !math.is_integer(lst[i]))\n            continue;\n        sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp05dl6d00.d(26): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05dl6d00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprfmowisg.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfmowisg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprfmowisg.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfmowisg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmppkehdzz3.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkehdzz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmppkehdzz3.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkehdzz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 || !math.is_integer(lst[i]))\n            continue;\n        sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmphmbh866l.d(26): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphmbh866l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 || !math.is_integer(lst[i]))\n            continue;\n        sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprih06nt1.d(26): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprih06nt1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpx8zwgqx7.d(26): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx8zwgqx7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpgpymsxcg.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpymsxcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp0hliny01.d(27): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hliny01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0)\n            continue;\n        if (lst[i] % 2 == 1)\n            sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprrnmy4mu.d(27): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrnmy4mu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0)\n            continue;\n        if (lst[i] % 2 == 1)\n            sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp67ql4sxa.d(27): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp67ql4sxa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) continue;\n        if(!math.is_integer(lst[i])) continue;\n        sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp519dovxa.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp519dovxa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp44tuicy0.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44tuicy0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp_lsjdwr3.d(26): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_lsjdwr3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp0p_681tg.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0p_681tg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpwhzhgdxq.d(27): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhzhgdxq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9dos2yun.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dos2yun.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptwd13418.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwd13418.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0)\n            continue;\n        if(lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpg9ehdchp.d(28): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg9ehdchp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptwd13418.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwd13418.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpxjaq7ja8.d(25): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjaq7ja8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpmcari3a5.d(26): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcari3a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) continue;\n        if(lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpde07663t.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpde07663t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpoqpswlvq.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoqpswlvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += (long)lst[i] * (long)lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpes6aexwy.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\n/tmp/tmpes6aexwy.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpes6aexwy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptwd13418.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwd13418.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9dos2yun.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dos2yun.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0)\n            continue;\n        if(lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp8w6nkdug.d(28): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8w6nkdug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpkhk25b9q.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhk25b9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpxjaq7ja8.d(25): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjaq7ja8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) continue;\n        if (!std.type.isInteger(lst[i])) continue;\n        sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpduhfi4_1.d(26): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpduhfi4_1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpmcari3a5.d(26): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcari3a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0 || !math.is_integer(lst[i]))\n            continue;\n        sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp953xv7fh.d(27): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp953xv7fh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpxjaq7ja8.d(25): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjaq7ja8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptwd13418.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwd13418.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpmcari3a5.d(26): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcari3a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2cw5vg79.d(26): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2cw5vg79.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp1d6ug5g5.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d6ug5g5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0 || !std.math.isInteger(lst[i]))\n            continue;\n        sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp01zficnj.d(27): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01zficnj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp0p_681tg.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0p_681tg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpi_rf7thx.d(26): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_rf7thx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += (long)Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmplg5erlz7.d(26): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplg5erlz7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += (long)Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9nn42v1b.d(27): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9nn42v1b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 || !math.is_integer(lst[i]))\n            continue;\n        sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprih06nt1.d(26): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprih06nt1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprfmowisg.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfmowisg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0)\n            continue;\n        if (!math.is_integer(lst[i]))\n            continue;\n        sum += math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpgm7fucxg.d(26): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmpgm7fucxg.d(28): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgm7fucxg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0)\n            continue;\n        if(lst[i] % 2 == 1)\n            sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpacjofe5w.d(28): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpacjofe5w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprfmowisg.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfmowisg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0)\n            continue;\n        if(lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpzafx_dgv.d(28): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzafx_dgv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0L && lst[i] % 2L == 1L)\n            sum += Math.pow(lst[i], 2L);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9im3lddr.d(26): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9im3lddr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0L && lst[i] % 2L == 1L) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0)\n            continue;\n        if (lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp68qllljq.d(27): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68qllljq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprfmowisg.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfmowisg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0 || !math.is_integer(lst[i]))\n            continue;\n        sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp05dl6d00.d(26): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05dl6d00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp0hliny01.d(27): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hliny01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp0hliny01.d(27): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hliny01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2cw5vg79.d(26): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2cw5vg79.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpvfw7930b.d(26): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvfw7930b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpj6c7tpsr.d(27): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6c7tpsr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpi_rf7thx.d(26): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_rf7thx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0) continue;\n        if(lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpwarq5jpa.d(27): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwarq5jpa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0)\n            continue;\n        if (lst[i] % 2 == 1)\n            sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprrnmy4mu.d(27): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrnmy4mu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (float i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpcee28q0v.d(23): Error: semicolon expected, not `:`\n/tmp/tmpcee28q0v.d(23): Error: expression expected, not `:`\n/tmp/tmpcee28q0v.d(23): Error: found `lst` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcee28q0v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp0hliny01.d(27): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0hliny01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0)\n            continue;\n        if(lst[i] % 2 == 1)\n            sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpj_ciqjz2.d(28): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_ciqjz2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (float i : lst) {\n        if (i < 0) continue;\n        if (!std.type.isInteger(i)) continue;\n        sum += i * i;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp70j15rws.d(23): Error: semicolon expected, not `:`\n/tmp/tmp70j15rws.d(23): Error: expression expected, not `:`\n/tmp/tmp70j15rws.d(23): Error: found `lst` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70j15rws.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0 || !math.is_integer(lst[i]))\n            continue;\n        sum += math.pow(lst[i], 2);\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9kbj_w6a.d(25): Error: undefined identifier `math`, did you mean function `main`?\n/tmp/tmp9kbj_w6a.d(27): Error: undefined identifier `math`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9kbj_w6a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += (long)lst[i] * (long)lst[i];\n        }\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpcas3dact.d(27): Error: C style cast illegal, use `cast(long)lst[i]`\n/tmp/tmpcas3dact.d(27): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcas3dact.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpmcari3a5.d(26): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcari3a5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp4b57vjkb.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4b57vjkb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptwd13418.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwd13418.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpfq6ezxw0.d(25): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfq6ezxw0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpgpymsxcg.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpymsxcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0L && lst[i] % 2L == 1L) {\n            sum += (long) Math.pow(lst[i], 2L);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp7vxsi83n.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2L)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vxsi83n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0)\n            continue;\n        if(lst[i] % 2 == 1)\n            sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpj_ciqjz2.d(28): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_ciqjz2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmppkehdzz3.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkehdzz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * (long)lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmplaw2u1ac.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\n/tmp/tmplaw2u1ac.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplaw2u1ac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp1d6ug5g5.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d6ug5g5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) sum += (long) (lst[i] * lst[i]);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpgjwz7ssv.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjwz7ssv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpxjaq7ja8.d(25): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjaq7ja8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp44tuicy0.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44tuicy0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += (long)Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9nn42v1b.d(27): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9nn42v1b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0)\n            continue;\n        if (lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp4nesga2w.d(27): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nesga2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0)\n            continue;\n        if (lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < 0)\n            continue;\n        if (lst[i] % 2 == 1)\n            sum += Math.pow(lst[i], 2);\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpuiqfi9gl.d(27): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiqfi9gl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp1d6ug5g5.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d6ug5g5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmptwd13418.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwd13418.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpkhk25b9q.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhk25b9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += (long)Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9nn42v1b.d(27): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9nn42v1b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp7qxw2l9k.d(25): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qxw2l9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] < 0)\n            continue;\n        if(lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprwjw0_kc.d(28): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprwjw0_kc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp1d6ug5g5.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d6ug5g5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)Math.pow(lst[i], 2);\n    }\n    return sum;\n}\n\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpjufvki7m.d(26): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjufvki7m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprfmowisg.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfmowisg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp44tuicy0.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44tuicy0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (float i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp3k9e3nbh.d(23): Error: semicolon expected, not `:`\n/tmp/tmp3k9e3nbh.d(23): Error: expression expected, not `:`\n/tmp/tmp3k9e3nbh.d(23): Error: found `lst` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3k9e3nbh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmprfmowisg.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfmowisg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9dos2yun.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dos2yun.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n        {\n            sum += (long)Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9nn42v1b.d(27): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9nn42v1b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9dos2yun.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dos2yun.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0L && lst[i] % 2L == 1L) {\n            sum += Math.pow(lst[i], 2L);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpbtpnt874.d(25): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbtpnt874.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long) (lst[i] * lst[i]);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp2gc6u0au.d(25): Error: C style cast illegal, use `cast(long)(lst[i] * lst[i])`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gc6u0au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp9e0af9vg.d(25): Error: C style cast illegal, use `cast(long)Math.pow(lst[i], 2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9e0af9vg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += (long)lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmp44tuicy0.d(25): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp44tuicy0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292459,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of numbers, return the sum of squares of the numbers\n    in the array that are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1L, 3L, 2L, 0L])\n    10L\n    >>> double_the_difference([-1L, -2L, 0L])\n    0L\n    >>> double_the_difference([9L, -2L])\n    81L\n    >>> double_the_difference([0L])\n    0L\n   \n    If the input array is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n    long sum = 0L;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i] > 0 && lst[i] % 2 == 1)\n            sum += (long)lst[i] * lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "/tmp/tmpe1kbwk19.d(26): Error: C style cast illegal, use `cast(long)lst[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kbwk19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}