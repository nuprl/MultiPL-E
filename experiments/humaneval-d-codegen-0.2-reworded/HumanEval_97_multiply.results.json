{
  "name": "HumanEval_97_multiply",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n",
  "tests": "unittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8ppwcsyd.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp8ppwcsyd.__unittest_L42_C1() [0x427ad1]\n??:? void tmp8ppwcsyd.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if(a < b)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxk5p_1i.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpxxk5p_1i.__unittest_L42_C1() [0x427ae5]\n??:? void tmpxxk5p_1i.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b * a / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a * b / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b / 10 + a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgdjy6ddh.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427ead]\n??:? void tmpgdjy6ddh.__unittest_L44_C1() [0x427b15]\n??:? void tmpgdjy6ddh.__modtest() [0x427c2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvxl44k5r.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpvxl44k5r.__unittest_L32_C1() [0x427a89]\n??:? void tmpvxl44k5r.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_0m8jjlb.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmp_0m8jjlb.__unittest_L36_C1() [0x427a9d]\n??:? void tmp_0m8jjlb.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            sum += b * a / 10;\n            a /= 10;\n        } else if (b % 10 == 0) {\n            sum += a * b / 10;\n            b /= 10;\n        } else {\n            sum += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbv5tc6a6.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpbv5tc6a6.__unittest_L36_C1() [0x427ad9]\n??:? void tmpbv5tc6a6.__modtest() [0x427bf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10 * a % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp42tbvhrs.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e4d]\n??:? void tmp42tbvhrs.__unittest_L33_C1() [0x427ab5]\n??:? void tmp42tbvhrs.__modtest() [0x427bcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa06]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430048]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]\n??:? runModuleUnitTests [0x42b949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42829c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if(a < b)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxxk5p_1i.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpxxk5p_1i.__unittest_L42_C1() [0x427ae5]\n??:? void tmpxxk5p_1i.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpopf66djt.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpopf66djt.__unittest_L42_C1() [0x427ac5]\n??:? void tmpopf66djt.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0)\n    {\n        result += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpitxssp1b.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpitxssp1b.__unittest_L29_C1() [0x427a79]\n??:? void tmpitxssp1b.__modtest() [0x427b90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfgrhnt_1.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpfgrhnt_1.__unittest_L42_C1() [0x427ad5]\n??:? void tmpfgrhnt_1.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpybhargej.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e8d]\n??:? void tmpybhargej.__unittest_L44_C1() [0x427af5]\n??:? void tmpybhargej.__modtest() [0x427c0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]\n??:? runModuleUnitTests [0x42b989]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if(b > a)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3wp1zggc.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp3wp1zggc.__unittest_L42_C1() [0x427ae5]\n??:? void tmp3wp1zggc.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpybhargej.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e8d]\n??:? void tmpybhargej.__unittest_L44_C1() [0x427af5]\n??:? void tmpybhargej.__modtest() [0x427c0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]\n??:? runModuleUnitTests [0x42b989]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0 && b % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb85f375c.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpb85f375c.__unittest_L48_C1() [0x427b21]\n??:? void tmpb85f375c.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 != 0)\n        {\n            result += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgr4w1lq7.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpgr4w1lq7.__unittest_L32_C1() [0x427a89]\n??:? void tmpgr4w1lq7.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfgrhnt_1.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpfgrhnt_1.__unittest_L42_C1() [0x427ad5]\n??:? void tmpfgrhnt_1.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaubhk68r.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpaubhk68r.__unittest_L36_C1() [0x427ad5]\n??:? void tmpaubhk68r.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b / 10;\n            a = a * 10 - b * 10;\n            b = b * 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaubhk68r.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpaubhk68r.__unittest_L36_C1() [0x427ad5]\n??:? void tmpaubhk68r.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgiekbdcn.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpgiekbdcn.__unittest_L33_C1() [0x427a9d]\n??:? void tmpgiekbdcn.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            sum += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            sum += a;\n            a = 0;\n        } else {\n            sum += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0 && b % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb85f375c.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpb85f375c.__unittest_L48_C1() [0x427b21]\n??:? void tmpb85f375c.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8ppwcsyd.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp8ppwcsyd.__unittest_L42_C1() [0x427ad1]\n??:? void tmp8ppwcsyd.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiycught2.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpiycught2.__unittest_L30_C1() [0x427a89]\n??:? void tmpiycught2.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0 && b % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb85f375c.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpb85f375c.__unittest_L48_C1() [0x427b21]\n??:? void tmpb85f375c.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b * a / 10;\n            a /= 10;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a * b / 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b / 10 + a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdejb5p45.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e8d]\n??:? void tmpdejb5p45.__unittest_L42_C1() [0x427af5]\n??:? void tmpdejb5p45.__modtest() [0x427c0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]\n??:? runModuleUnitTests [0x42b989]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            product += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            product += a;\n            a = 0;\n        }\n        else\n        {\n            product += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplj99n0on.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmplj99n0on.__unittest_L42_C1() [0x427ad5]\n??:? void tmplj99n0on.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long sum = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            sum += b % 10;\n            b /= 10;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx1cmyhml.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpx1cmyhml.__unittest_L33_C1() [0x427a9d]\n??:? void tmpx1cmyhml.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long sum = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n            sum += a % 10 * b;\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpde1tlacl.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpde1tlacl.__unittest_L30_C1() [0x427a89]\n??:? void tmpde1tlacl.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a > 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b > 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi_op6mpd.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpi_op6mpd.__unittest_L36_C1() [0x427a9d]\n??:? void tmpi_op6mpd.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b * a / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a * b / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b / 10 + a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgdjy6ddh.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427ead]\n??:? void tmpgdjy6ddh.__unittest_L44_C1() [0x427b15]\n??:? void tmpgdjy6ddh.__modtest() [0x427c2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8ppwcsyd.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp8ppwcsyd.__unittest_L42_C1() [0x427ad1]\n??:? void tmp8ppwcsyd.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if (b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmyyrr2tf.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpmyyrr2tf.__unittest_L42_C1() [0x427ad1]\n??:? void tmpmyyrr2tf.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvxl44k5r.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpvxl44k5r.__unittest_L32_C1() [0x427a89]\n??:? void tmpvxl44k5r.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgiekbdcn.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpgiekbdcn.__unittest_L33_C1() [0x427a9d]\n??:? void tmpgiekbdcn.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0 && b % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb85f375c.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpb85f375c.__unittest_L48_C1() [0x427b21]\n??:? void tmpb85f375c.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n            a /= 10;\n        else if(b % 10 == 0)\n            b /= 10;\n        else\n        {\n            product += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbrzi3rd0.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpbrzi3rd0.__unittest_L36_C1() [0x427aad]\n??:? void tmpbrzi3rd0.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoosz6i6t.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpoosz6i6t.__unittest_L36_C1() [0x427aa5]\n??:? void tmpoosz6i6t.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if (a < b)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpihpzcetx.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpihpzcetx.__unittest_L42_C1() [0x427ae5]\n??:? void tmpihpzcetx.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b * a;\n            a = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a * b;\n            b = 0;\n        }\n        else\n        {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgiekbdcn.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpgiekbdcn.__unittest_L33_C1() [0x427a9d]\n??:? void tmpgiekbdcn.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n            b *= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqorza2nq.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmpqorza2nq.__unittest_L43_C1() [0x427add]\n??:? void tmpqorza2nq.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_0m8jjlb.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmp_0m8jjlb.__unittest_L36_C1() [0x427a9d]\n??:? void tmp_0m8jjlb.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            product += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            product += a;\n            a = 0;\n        }\n        else\n        {\n            product += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu2r3p7dm.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpu2r3p7dm.__unittest_L42_C1() [0x427ad5]\n??:? void tmpu2r3p7dm.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaubhk68r.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpaubhk68r.__unittest_L36_C1() [0x427ad5]\n??:? void tmpaubhk68r.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if (b % 10 != 0)\n        {\n            result += a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmbfk63lw.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e8d]\n??:? void tmpmbfk63lw.__unittest_L44_C1() [0x427af5]\n??:? void tmpmbfk63lw.__modtest() [0x427c0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]\n??:? runModuleUnitTests [0x42b989]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp7lbunko.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpp7lbunko.__unittest_L33_C1() [0x427aa5]\n??:? void tmpp7lbunko.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoosz6i6t.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpoosz6i6t.__unittest_L36_C1() [0x427aa5]\n??:? void tmpoosz6i6t.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b * a;\n            a = 0;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a * b;\n            a = 0;\n            b = 0;\n        } else {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0 && b % 10 == 0)\n        {\n            product += a * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a % 10 == 0)\n        {\n            product += a * b;\n            a /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            product += a * b;\n            b /= 10;\n        }\n        else\n        {\n            product += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1bgkqof.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpt1bgkqof.__unittest_L48_C1() [0x427b21]\n??:? void tmpt1bgkqof.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr2u0s_vz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpr2u0s_vz.__unittest_L37_C1() [0x427ac1]\n??:? void tmpr2u0s_vz.__modtest() [0x427bd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += b * a % 10;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvwdn7d2y.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpvwdn7d2y.__unittest_L30_C1() [0x427a89]\n??:? void tmpvwdn7d2y.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfgrhnt_1.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpfgrhnt_1.__unittest_L42_C1() [0x427ad5]\n??:? void tmpfgrhnt_1.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if(b > a)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3wp1zggc.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp3wp1zggc.__unittest_L42_C1() [0x427ae5]\n??:? void tmp3wp1zggc.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b * (a / 10);\n            a = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a * (b / 10);\n            b = 0;\n        }\n        else\n        {\n            result += a * b / 10;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a%10 == 0 && b%10 == 0)\n        {\n            result += a*b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a%10 == 0)\n        {\n            result += a*b;\n            a /= 10;\n        }\n        else if(b%10 == 0)\n        {\n            result += a*b;\n            b /= 10;\n        }\n        else\n        {\n            result += a*b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf5ki7fl5.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpf5ki7fl5.__unittest_L48_C1() [0x427b21]\n??:? void tmpf5ki7fl5.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoosz6i6t.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpoosz6i6t.__unittest_L36_C1() [0x427aa5]\n??:? void tmpoosz6i6t.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_0m8jjlb.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmp_0m8jjlb.__unittest_L36_C1() [0x427a9d]\n??:? void tmp_0m8jjlb.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if(b > a)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3wp1zggc.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp3wp1zggc.__unittest_L42_C1() [0x427ae5]\n??:? void tmp3wp1zggc.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            a /= 10;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            b /= 10;\n            a = 0;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9kaeh5re.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmp9kaeh5re.__unittest_L44_C1() [0x427add]\n??:? void tmp9kaeh5re.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoosz6i6t.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpoosz6i6t.__unittest_L36_C1() [0x427aa5]\n??:? void tmpoosz6i6t.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b * a / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b / 10 + a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpglm69334.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427ead]\n??:? void tmpglm69334.__unittest_L44_C1() [0x427b15]\n??:? void tmpglm69334.__modtest() [0x427c2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 != 0)\n        {\n            result += b * a % 10;\n            b = b * 10 % 10;\n        }\n        else\n        {\n            result += b * a % 10;\n            a = a * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfgrhnt_1.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpfgrhnt_1.__unittest_L42_C1() [0x427ad5]\n??:? void tmpfgrhnt_1.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqnw5p363.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpqnw5p363.__unittest_L32_C1() [0x427a99]\n??:? void tmpqnw5p363.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a > b)\n        {\n            a -= b;\n            result += 1;\n        }\n        else if (a < b)\n        {\n            b -= a;\n            result += 1;\n        }\n        else\n        {\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0nypv1st.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp0nypv1st.__unittest_L41_C1() [0x427a89]\n??:? void tmp0nypv1st.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b * (a / 10);\n            a /= 10;\n            b /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * (b / 10);\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8f8ssrxn.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e8d]\n??:? void tmp8f8ssrxn.__unittest_L44_C1() [0x427af5]\n??:? void tmp8f8ssrxn.__modtest() [0x427c0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]\n??:? runModuleUnitTests [0x42b989]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfgrhnt_1.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpfgrhnt_1.__unittest_L42_C1() [0x427ad5]\n??:? void tmpfgrhnt_1.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if(b > a)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3wp1zggc.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp3wp1zggc.__unittest_L42_C1() [0x427ae5]\n??:? void tmp3wp1zggc.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoosz6i6t.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpoosz6i6t.__unittest_L36_C1() [0x427aa5]\n??:? void tmpoosz6i6t.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            product += b * (a / 10);\n            a = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            product += a * (b / 10);\n            b = 0;\n        }\n        else\n        {\n            product += a * b / 10;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long sum = 0;\n    while(a != 0)\n    {\n        sum += a % 10 * b % 10;\n        a /= 10;\n        b /= 10;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdgzwiafp.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpdgzwiafp.__unittest_L29_C1() [0x427a79]\n??:? void tmpdgzwiafp.__modtest() [0x427b90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]\n??:? runModuleUnitTests [0x42b909]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42825c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b * a / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a * b / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b / 10 + a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgdjy6ddh.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427ead]\n??:? void tmpgdjy6ddh.__unittest_L44_C1() [0x427b15]\n??:? void tmpgdjy6ddh.__modtest() [0x427c2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b * (a / 10);\n            a = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * (b / 10);\n            b = 0;\n        }\n        else\n        {\n            result += a * b / 10;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b * (a / 10);\n            a /= 10;\n            b /= 10;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a * (b / 10);\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph05pli19.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e8d]\n??:? void tmph05pli19.__unittest_L44_C1() [0x427af5]\n??:? void tmph05pli19.__modtest() [0x427c0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]\n??:? runModuleUnitTests [0x42b989]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a > b)\n        {\n            a -= b;\n            result += 1;\n        }\n        else if (a < b)\n        {\n            b -= a;\n            result += 1;\n        }\n        else\n        {\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0nypv1st.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmp0nypv1st.__unittest_L41_C1() [0x427a89]\n??:? void tmp0nypv1st.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if (b % 10 != 0)\n        {\n            result += a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmbfk63lw.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e8d]\n??:? void tmpmbfk63lw.__unittest_L44_C1() [0x427af5]\n??:? void tmpmbfk63lw.__modtest() [0x427c0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]\n??:? runModuleUnitTests [0x42b989]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b * (a / 10);\n            a /= 10;\n            b /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * (b / 10);\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8f8ssrxn.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e8d]\n??:? void tmp8f8ssrxn.__unittest_L44_C1() [0x427af5]\n??:? void tmp8f8ssrxn.__modtest() [0x427c0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]\n??:? runModuleUnitTests [0x42b989]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a%10 == 0 && b%10 == 0)\n        {\n            result += a*b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a%10 == 0)\n        {\n            result += a*b;\n            a /= 10;\n        }\n        else if(b%10 == 0)\n        {\n            result += a*b;\n            b /= 10;\n        }\n        else\n        {\n            result += a*b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf5ki7fl5.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpf5ki7fl5.__unittest_L48_C1() [0x427b21]\n??:? void tmpf5ki7fl5.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgiekbdcn.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpgiekbdcn.__unittest_L33_C1() [0x427a9d]\n??:? void tmpgiekbdcn.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu2cqm3rt.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpu2cqm3rt.__unittest_L44_C1() [0x427ae9]\n??:? void tmpu2cqm3rt.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n        }\n        b *= 10;\n        a /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpatgxjn9q.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpatgxjn9q.__unittest_L32_C1() [0x427a71]\n??:? void tmpatgxjn9q.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if(b > a)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3wp1zggc.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp3wp1zggc.__unittest_L42_C1() [0x427ae5]\n??:? void tmp3wp1zggc.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 != 0)\n            result += a % 10 * b;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd5ge39ze.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpd5ge39ze.__unittest_L30_C1() [0x427a89]\n??:? void tmpd5ge39ze.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n        }\n        a /= 10;\n        b *= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzcizktfd.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpzcizktfd.__unittest_L32_C1() [0x427a71]\n??:? void tmpzcizktfd.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8ppwcsyd.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp8ppwcsyd.__unittest_L42_C1() [0x427ad1]\n??:? void tmp8ppwcsyd.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0 && b % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb85f375c.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpb85f375c.__unittest_L48_C1() [0x427b21]\n??:? void tmpb85f375c.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoosz6i6t.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpoosz6i6t.__unittest_L36_C1() [0x427aa5]\n??:? void tmpoosz6i6t.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n            a /= 10;\n        else if(b % 10 == 0)\n            b /= 10;\n        else\n        {\n            product += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbrzi3rd0.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpbrzi3rd0.__unittest_L36_C1() [0x427aad]\n??:? void tmpbrzi3rd0.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            result += a % 10;\n            a /= 10;\n        } else {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqnw5p363.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpqnw5p363.__unittest_L32_C1() [0x427a99]\n??:? void tmpqnw5p363.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430028]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]\n??:? runModuleUnitTests [0x42b929]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42827c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            result += a % 10;\n            a /= 10;\n        } else if (b > a) {\n            result += b % 10;\n            b /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_pn9z205.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp_pn9z205.__unittest_L36_C1() [0x427ae5]\n??:? void tmp_pn9z205.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuz8ackv.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpzuz8ackv.__unittest_L36_C1() [0x427a9d]\n??:? void tmpzuz8ackv.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if (b != 0) {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp7lbunko.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpp7lbunko.__unittest_L33_C1() [0x427aa5]\n??:? void tmpp7lbunko.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0 && b % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb85f375c.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpb85f375c.__unittest_L48_C1() [0x427b21]\n??:? void tmpb85f375c.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n        }\n        a /= 10;\n        b *= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzcizktfd.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpzcizktfd.__unittest_L32_C1() [0x427a71]\n??:? void tmpzcizktfd.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b * (a / 10);\n            a = 0;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * (b / 10);\n            a = 0;\n            b = 0;\n        }\n        else\n        {\n            result += a * b / 10;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293161,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 != 0) {\n            result += a % 10 * b;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiycught2.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpiycught2.__unittest_L30_C1() [0x427a89]\n??:? void tmpiycught2.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0 && b != 0)\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if(b != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp277_c7i5.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp277_c7i5.__unittest_L42_C1() [0x427b01]\n??:? void tmp277_c7i5.__modtest() [0x427c18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b * a;\n            a = 0;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n        else\n        {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293161,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0 && b % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb85f375c.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpb85f375c.__unittest_L48_C1() [0x427b21]\n??:? void tmpb85f375c.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            a /= 10;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            b /= 10;\n            a = 0;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9kaeh5re.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmp9kaeh5re.__unittest_L44_C1() [0x427add]\n??:? void tmp9kaeh5re.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_0m8jjlb.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmp_0m8jjlb.__unittest_L36_C1() [0x427a9d]\n??:? void tmp_0m8jjlb.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b * a;\n            a = 0;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a * b;\n            a = 0;\n            b = 0;\n        } else {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293160,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a > b) {\n            result += a % 10;\n            a /= 10;\n        } else if (b > a) {\n            result += b % 10;\n            b /= 10;\n        } else {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_pn9z205.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp_pn9z205.__unittest_L36_C1() [0x427ae5]\n??:? void tmp_pn9z205.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8ppwcsyd.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp8ppwcsyd.__unittest_L42_C1() [0x427ad1]\n??:? void tmp8ppwcsyd.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if (b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmyyrr2tf.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpmyyrr2tf.__unittest_L42_C1() [0x427ad1]\n??:? void tmpmyyrr2tf.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b * a / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b / 10 + a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpglm69334.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427ead]\n??:? void tmpglm69334.__unittest_L44_C1() [0x427b15]\n??:? void tmpglm69334.__modtest() [0x427c2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if (a < b)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpihpzcetx.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpihpzcetx.__unittest_L42_C1() [0x427ae5]\n??:? void tmpihpzcetx.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a != 0) {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        } else {\n            result += b % 10 * b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq3s8qjyk.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpq3s8qjyk.__unittest_L33_C1() [0x427ac1]\n??:? void tmpq3s8qjyk.__modtest() [0x427bd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 != 0)\n            result += a % 10 * b;\n        a /= 10;\n        b /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd5ge39ze.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e1d]\n??:? void tmpd5ge39ze.__unittest_L30_C1() [0x427a89]\n??:? void tmpd5ge39ze.__modtest() [0x427ba0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430018]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]\n??:? runModuleUnitTests [0x42b919]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42826c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8ppwcsyd.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp8ppwcsyd.__unittest_L42_C1() [0x427ad1]\n??:? void tmp8ppwcsyd.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaubhk68r.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpaubhk68r.__unittest_L36_C1() [0x427ad5]\n??:? void tmpaubhk68r.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b * a / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a * b / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b / 10 + a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgdjy6ddh.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427ead]\n??:? void tmpgdjy6ddh.__unittest_L44_C1() [0x427b15]\n??:? void tmpgdjy6ddh.__modtest() [0x427c2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a != 0)\n        {\n            product += a % 10;\n            a /= 10;\n        }\n        if (b != 0)\n        {\n            product += b % 10;\n            b /= 10;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_0m8jjlb.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmp_0m8jjlb.__unittest_L36_C1() [0x427a9d]\n??:? void tmp_0m8jjlb.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if (b > a)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjk73u3x3.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpjk73u3x3.__unittest_L42_C1() [0x427ae5]\n??:? void tmpjk73u3x3.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a > 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b > 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmgh944rn.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpmgh944rn.__unittest_L36_C1() [0x427a9d]\n??:? void tmpmgh944rn.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10 * a;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa_btc_ut.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpa_btc_ut.__unittest_L36_C1() [0x427aa5]\n??:? void tmpa_btc_ut.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaubhk68r.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpaubhk68r.__unittest_L36_C1() [0x427ad5]\n??:? void tmpaubhk68r.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if (b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmyyrr2tf.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpmyyrr2tf.__unittest_L42_C1() [0x427ad1]\n??:? void tmpmyyrr2tf.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n        }\n        b *= 10;\n        a /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpatgxjn9q.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpatgxjn9q.__unittest_L32_C1() [0x427a71]\n??:? void tmpatgxjn9q.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaubhk68r.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpaubhk68r.__unittest_L36_C1() [0x427ad5]\n??:? void tmpaubhk68r.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a != 0)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        if(b != 0)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvk3b3qr2.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e35]\n??:? void tmpvk3b3qr2.__unittest_L36_C1() [0x427a9d]\n??:? void tmpvk3b3qr2.__modtest() [0x427bb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428284]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long product = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a%10 != 0)\n        {\n            product += a%10 * b;\n            a /= 10;\n        }\n        else if(b%10 != 0)\n        {\n            product += a * b%10;\n            b /= 10;\n        }\n        else\n        {\n            product += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return product;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqrel1r.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp6wqrel1r.__unittest_L42_C1() [0x427ad1]\n??:? void tmp6wqrel1r.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n        }\n        a /= 10;\n        b *= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzcizktfd.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpzcizktfd.__unittest_L32_C1() [0x427a71]\n??:? void tmpzcizktfd.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b * a;\n            a = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b;\n            b = 0;\n        }\n        else\n        {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293161,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0) {\n        if (a % 10 == 0) {\n            result += b;\n            b = 0;\n        } else if (b % 10 == 0) {\n            result += a;\n            a = 0;\n        } else {\n            result += a * b;\n            a = a % 10;\n            b = b % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293159,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while (a != 0 || b != 0)\n    {\n        if (a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if (b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfgrhnt_1.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpfgrhnt_1.__unittest_L42_C1() [0x427ad5]\n??:? void tmpfgrhnt_1.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpybhargej.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e8d]\n??:? void tmpybhargej.__unittest_L44_C1() [0x427af5]\n??:? void tmpybhargej.__modtest() [0x427c0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbb3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa46]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]\n??:? runModuleUnitTests [0x42b989]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b * a / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b / 10;\n            a /= 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b / 10 + a * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293146,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpglm69334.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427ead]\n??:? void tmpglm69334.__unittest_L44_C1() [0x427b15]\n??:? void tmpglm69334.__modtest() [0x427c2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa66]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]\n??:? runModuleUnitTests [0x42b9a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a > b)\n        {\n            result += a % 10;\n            a /= 10;\n        }\n        else if(b > a)\n        {\n            result += b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a % 10 * b % 10;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3wp1zggc.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp3wp1zggc.__unittest_L42_C1() [0x427ae5]\n??:? void tmp3wp1zggc.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0)\n        {\n            result += b;\n            b = 0;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a;\n            a = 0;\n        }\n        else\n        {\n            result += a * b % 10;\n            a = a * 10 % 10;\n            b = b * 10 % 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkefr2zhu.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkefr2zhu.__unittest_L42_C1() [0x427ad5]\n??:? void tmpkefr2zhu.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 != 0)\n        {\n            result += a % 10 * b;\n            a /= 10;\n        }\n        else if(b % 10 != 0)\n        {\n            result += a * b % 10;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a = 0;\n            b = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8ppwcsyd.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp8ppwcsyd.__unittest_L42_C1() [0x427ad1]\n??:? void tmp8ppwcsyd.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148L, 412L)\n    16L\n    >>> multiply(19L, 28L)\n    72L\n    >>> multiply(2020L, 1851L)\n    0L\n    >>> multiply(14L, -15L)\n    20L\n    \n*/\nlong multiply(long a, long b) \n{\n    long result = 0;\n    while(a != 0 || b != 0)\n    {\n        if(a % 10 == 0 && b % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n        else if(a % 10 == 0)\n        {\n            result += a * b;\n            a /= 10;\n        }\n        else if(b % 10 == 0)\n        {\n            result += a * b;\n            b /= 10;\n        }\n        else\n        {\n            result += a * b;\n            a /= 10;\n            b /= 10;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}",
      "timestamp": 1664293145,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb85f375c.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmpb85f375c.__unittest_L48_C1() [0x427b21]\n??:? void tmpb85f375c.__modtest() [0x427c38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}